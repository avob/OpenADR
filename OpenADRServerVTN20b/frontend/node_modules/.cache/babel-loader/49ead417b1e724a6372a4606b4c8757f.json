{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactDom = require(\"react-dom\");\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _dates = _interopRequireDefault(require(\"./utils/dates\"));\n\nvar _helpers = require(\"./utils/helpers\");\n\nvar _selection = require(\"./utils/selection\");\n\nvar _Selection = _interopRequireWildcard(require(\"./Selection\"));\n\nvar BackgroundCells =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(BackgroundCells, _React$Component);\n\n  function BackgroundCells(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n    _this.state = {\n      selecting: false\n    };\n    return _this;\n  }\n\n  var _proto = BackgroundCells.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.props.selectable && this._selectable();\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this._teardownSelectable();\n  };\n\n  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (nextProps.selectable && !this.props.selectable) this._selectable();\n    if (!nextProps.selectable && this.props.selectable) this._teardownSelectable();\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        range = _this$props.range,\n        getNow = _this$props.getNow,\n        getters = _this$props.getters,\n        currentDate = _this$props.date,\n        Wrapper = _this$props.components.dateCellWrapper;\n    var _this$state = this.state,\n        selecting = _this$state.selecting,\n        startIdx = _this$state.startIdx,\n        endIdx = _this$state.endIdx;\n    var current = getNow();\n    return _react.default.createElement(\"div\", {\n      className: \"rbc-row-bg\"\n    }, range.map(function (date, index) {\n      var selected = selecting && index >= startIdx && index <= endIdx;\n\n      var _getters$dayProp = getters.dayProp(date),\n          className = _getters$dayProp.className,\n          style = _getters$dayProp.style;\n\n      return _react.default.createElement(Wrapper, {\n        key: index,\n        value: date,\n        range: range\n      }, _react.default.createElement(\"div\", {\n        style: style,\n        className: (0, _classnames.default)('rbc-day-bg', className, selected && 'rbc-selected-cell', _dates.default.eq(date, current, 'day') && 'rbc-today', currentDate && _dates.default.month(currentDate) !== _dates.default.month(date) && 'rbc-off-range-bg')\n      }));\n    }));\n  };\n\n  _proto._selectable = function _selectable() {\n    var _this2 = this;\n\n    var node = (0, _reactDom.findDOMNode)(this);\n    var selector = this._selector = new _Selection.default(this.props.container, {\n      longPressThreshold: this.props.longPressThreshold\n    });\n\n    var selectorClicksHandler = function selectorClicksHandler(point, actionType) {\n      if (!(0, _Selection.isEvent)((0, _reactDom.findDOMNode)(_this2), point)) {\n        var rowBox = (0, _Selection.getBoundsForNode)(node);\n        var _this2$props = _this2.props,\n            range = _this2$props.range,\n            rtl = _this2$props.rtl;\n\n        if ((0, _selection.pointInBox)(rowBox, point)) {\n          var currentCell = (0, _selection.getSlotAtX)(rowBox, point.x, rtl, range.length);\n\n          _this2._selectSlot({\n            startIdx: currentCell,\n            endIdx: currentCell,\n            action: actionType,\n            box: point\n          });\n        }\n      }\n\n      _this2._initial = {};\n\n      _this2.setState({\n        selecting: false\n      });\n    };\n\n    selector.on('selecting', function (box) {\n      var _this2$props2 = _this2.props,\n          range = _this2$props2.range,\n          rtl = _this2$props2.rtl;\n      var startIdx = -1;\n      var endIdx = -1;\n\n      if (!_this2.state.selecting) {\n        (0, _helpers.notify)(_this2.props.onSelectStart, [box]);\n        _this2._initial = {\n          x: box.x,\n          y: box.y\n        };\n      }\n\n      if (selector.isSelected(node)) {\n        var nodeBox = (0, _Selection.getBoundsForNode)(node);\n\n        var _dateCellSelection = (0, _selection.dateCellSelection)(_this2._initial, nodeBox, box, range.length, rtl);\n\n        startIdx = _dateCellSelection.startIdx;\n        endIdx = _dateCellSelection.endIdx;\n      }\n\n      _this2.setState({\n        selecting: true,\n        startIdx: startIdx,\n        endIdx: endIdx\n      });\n    });\n    selector.on('beforeSelect', function (box) {\n      if (_this2.props.selectable !== 'ignoreEvents') return;\n      return !(0, _Selection.isEvent)((0, _reactDom.findDOMNode)(_this2), box);\n    });\n    selector.on('click', function (point) {\n      return selectorClicksHandler(point, 'click');\n    });\n    selector.on('doubleClick', function (point) {\n      return selectorClicksHandler(point, 'doubleClick');\n    });\n    selector.on('select', function (bounds) {\n      _this2._selectSlot((0, _extends2.default)({}, _this2.state, {\n        action: 'select',\n        bounds: bounds\n      }));\n\n      _this2._initial = {};\n\n      _this2.setState({\n        selecting: false\n      });\n\n      (0, _helpers.notify)(_this2.props.onSelectEnd, [_this2.state]);\n    });\n  };\n\n  _proto._teardownSelectable = function _teardownSelectable() {\n    if (!this._selector) return;\n\n    this._selector.teardown();\n\n    this._selector = null;\n  };\n\n  _proto._selectSlot = function _selectSlot(_ref) {\n    var endIdx = _ref.endIdx,\n        startIdx = _ref.startIdx,\n        action = _ref.action,\n        bounds = _ref.bounds,\n        box = _ref.box;\n    if (endIdx !== -1 && startIdx !== -1) this.props.onSelectSlot && this.props.onSelectSlot({\n      start: startIdx,\n      end: endIdx,\n      action: action,\n      bounds: bounds,\n      box: box\n    });\n  };\n\n  return BackgroundCells;\n}(_react.default.Component);\n\nBackgroundCells.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  date: _propTypes.default.instanceOf(Date),\n  getNow: _propTypes.default.func.isRequired,\n  getters: _propTypes.default.object.isRequired,\n  components: _propTypes.default.object.isRequired,\n  container: _propTypes.default.func,\n  dayPropGetter: _propTypes.default.func,\n  selectable: _propTypes.default.oneOf([true, false, 'ignoreEvents']),\n  longPressThreshold: _propTypes.default.number,\n  onSelectSlot: _propTypes.default.func.isRequired,\n  onSelectEnd: _propTypes.default.func,\n  onSelectStart: _propTypes.default.func,\n  range: _propTypes.default.arrayOf(_propTypes.default.instanceOf(Date)),\n  rtl: _propTypes.default.bool,\n  type: _propTypes.default.string\n} : {};\nvar _default = BackgroundCells;\nexports.default = _default;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}