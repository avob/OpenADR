{"ast":null,"code":"import * as types from '../constants/actionTypes';\nimport objectAssign from 'object-assign';\nimport initialState from './initialState'; // IMPORTANT: Note that with Redux, state should NEVER be changed.\n// State is considered immutable. Instead,\n// create a copy of the state passed and set new values on the copy.\n// Note that I'm using Object.assign to create a copy of current state\n// and update values on the copy.\n\nexport default function eventDetailReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState.event_detail;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var newState;\n\n  switch (action.type) {\n    // EVENT\n    case types.LOAD_EVENT_DETAIL:\n      return state;\n\n    case types.LOAD_EVENT_DETAIL_SUCCESS:\n      newState = objectAssign({}, state, {\n        event: action.payload\n      });\n      return newState;\n\n    case types.LOAD_EVENT_DETAIL_ERROR:\n      return state;\n\n    case types.UPDATE_EVENT:\n      return state;\n\n    case types.UPDATE_EVENT_SUCCESS:\n      newState = objectAssign({}, state, {\n        event: action.payload\n      });\n      return newState;\n\n    case types.UPDATE_EVENT_ERROR:\n      return state;\n\n    case types.PUBLISH_EVENT:\n      return state;\n\n    case types.PUBLISH_EVENT_SUCCESS:\n      return state;\n\n    case types.PUBLISH_EVENT_ERROR:\n      return state;\n\n    case types.ACTIVE_EVENT:\n      return state;\n\n    case types.ACTIVE_EVENT_SUCCESS:\n      return state;\n\n    case types.ACTIVE_EVENT_ERROR:\n      return state;\n\n    case types.CANCEL_EVENT:\n      return state;\n\n    case types.CANCEL_EVENT_SUCCESS:\n      return state;\n\n    case types.CANCEL_EVENT_ERROR:\n      return state;\n\n    case types.LOAD_EVENT_VEN_RESPONSE:\n      return state;\n\n    case types.LOAD_EVENT_VEN_RESPONSE_SUCCESS:\n      newState = objectAssign({}, state, {\n        venResponse: action.payload\n      });\n      return newState;\n\n    case types.LOAD_EVENT_VEN_RESPONSE_ERROR:\n      return state;\n    // MARKET CONTEXT\n\n    case types.LOAD_MARKET_CONTEXT:\n      return state;\n\n    case types.LOAD_MARKET_CONTEXT_SUCCESS:\n      newState = objectAssign({}, state, {\n        marketContext: action.payload\n      });\n      return newState;\n\n    case types.LOAD_MARKET_CONTEXT_ERROR:\n      return state;\n    // GROUPS\n\n    case types.LOAD_GROUP:\n      return state;\n\n    case types.LOAD_GROUP_SUCCESS:\n      newState = objectAssign({}, state, {\n        group: action.payload\n      });\n      return newState;\n\n    case types.LOAD_GROUP_ERROR:\n      return state;\n    // VEN\n\n    case types.SEARCH_VEN:\n      return state;\n\n    case types.SEARCH_VEN_SUCCESS:\n      newState = objectAssign({}, state, {\n        ven: action.payload\n      });\n      return newState;\n\n    case types.SEARCH_VEN_ERROR:\n      return state;\n\n    case types.LOCATION_CHANGE:\n      if (action.payload.location.pathname.includes(\"/event/detail\")) {\n        return state;\n      } else {\n        return initialState.event;\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/bzanni/Documents/github/OpenADR/OpenADRServerVTN20b/frontend/src/reducers/eventDetailReducer.js"],"names":["types","objectAssign","initialState","eventDetailReducer","state","event_detail","action","newState","type","LOAD_EVENT_DETAIL","LOAD_EVENT_DETAIL_SUCCESS","event","payload","LOAD_EVENT_DETAIL_ERROR","UPDATE_EVENT","UPDATE_EVENT_SUCCESS","UPDATE_EVENT_ERROR","PUBLISH_EVENT","PUBLISH_EVENT_SUCCESS","PUBLISH_EVENT_ERROR","ACTIVE_EVENT","ACTIVE_EVENT_SUCCESS","ACTIVE_EVENT_ERROR","CANCEL_EVENT","CANCEL_EVENT_SUCCESS","CANCEL_EVENT_ERROR","LOAD_EVENT_VEN_RESPONSE","LOAD_EVENT_VEN_RESPONSE_SUCCESS","venResponse","LOAD_EVENT_VEN_RESPONSE_ERROR","LOAD_MARKET_CONTEXT","LOAD_MARKET_CONTEXT_SUCCESS","marketContext","LOAD_MARKET_CONTEXT_ERROR","LOAD_GROUP","LOAD_GROUP_SUCCESS","group","LOAD_GROUP_ERROR","SEARCH_VEN","SEARCH_VEN_SUCCESS","ven","SEARCH_VEN_ERROR","LOCATION_CHANGE","location","pathname","includes"],"mappings":"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","sourcesContent":["import * as types from '../constants/actionTypes';\nimport objectAssign from 'object-assign';\nimport initialState from './initialState';\n\n// IMPORTANT: Note that with Redux, state should NEVER be changed.\n// State is considered immutable. Instead,\n// create a copy of the state passed and set new values on the copy.\n// Note that I'm using Object.assign to create a copy of current state\n// and update values on the copy.\nexport default function eventDetailReducer( state = initialState.event_detail, action ) {\n  let newState;\n\n  switch (action.type) {\n\n  \t// EVENT\n    case types.LOAD_EVENT_DETAIL:\n      return state;\n\n    case types.LOAD_EVENT_DETAIL_SUCCESS:\n      newState = objectAssign( {}, state, {\n        event: action.payload\n      } );\n      return newState;\n\n    case types.LOAD_EVENT_DETAIL_ERROR:\n      return state;\n\n    case types.UPDATE_EVENT:\n      return state;\n\n    case types.UPDATE_EVENT_SUCCESS:\n      newState = objectAssign( {}, state, {\n        event: action.payload\n      } );\n      return newState;\n\n    case types.UPDATE_EVENT_ERROR:\n      return state;\n\n    case types.PUBLISH_EVENT:\n      return state;\n\n    case types.PUBLISH_EVENT_SUCCESS:\n      return state;\n\n    case types.PUBLISH_EVENT_ERROR:\n      return state;\n\n\n    case types.ACTIVE_EVENT:\n      return state;\n\n    case types.ACTIVE_EVENT_SUCCESS:\n      return state;\n\n    case types.ACTIVE_EVENT_ERROR:\n      return state;\n\n    case types.CANCEL_EVENT:\n      return state;\n\n    case types.CANCEL_EVENT_SUCCESS:\n      return state;\n\n    case types.CANCEL_EVENT_ERROR:\n      return state;\n\n    case types.LOAD_EVENT_VEN_RESPONSE:\n      return state;\n\n    case types.LOAD_EVENT_VEN_RESPONSE_SUCCESS:\n      newState = objectAssign( {}, state, {\n        venResponse: action.payload\n      } );\n      return newState;\n\n    case types.LOAD_EVENT_VEN_RESPONSE_ERROR:\n      return state;\n\n     // MARKET CONTEXT\n    case types.LOAD_MARKET_CONTEXT:\n      return state;\n\n    case types.LOAD_MARKET_CONTEXT_SUCCESS:\n      newState = objectAssign( {}, state, {\n        marketContext: action.payload\n      } );\n      return newState;\n\n    case types.LOAD_MARKET_CONTEXT_ERROR:\n      return state;\n\n      // GROUPS\n    case types.LOAD_GROUP:\n      return state;\n\n    case types.LOAD_GROUP_SUCCESS:\n      newState = objectAssign( {}, state, {\n        group: action.payload\n      } );\n      return newState;\n\n    case types.LOAD_GROUP_ERROR:\n      return state;\n\n    // VEN\n    case types.SEARCH_VEN:\n      return state;\n\n    case types.SEARCH_VEN_SUCCESS:\n      newState = objectAssign( {}, state, {\n        ven: action.payload\n      } );\n      return newState;\n\n    case types.SEARCH_VEN_ERROR:\n      return state;\n\n    case types.LOCATION_CHANGE:\n      if(action.payload.location.pathname.includes(\"/event/detail\")){\n        return state;\n      }\n      else {\n        return initialState.event;\n      }\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}