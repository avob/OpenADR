{"ast":null,"code":"import * as types from '../constants/actionTypes';\nimport objectAssign from 'object-assign';\nimport initialState from './initialState'; // IMPORTANT: Note that with Redux, state should NEVER be changed.\n// State is considered immutable. Instead,\n// create a copy of the state passed and set new values on the copy.\n// Note that I'm using Object.assign to create a copy of current state\n// and update values on the copy.\n\nexport default function eventCreateReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState.event_create;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var newState;\n\n  switch (action.type) {\n    // MARKET CONTEXT\n    case types.LOAD_MARKET_CONTEXT:\n      return state;\n\n    case types.LOAD_MARKET_CONTEXT_SUCCESS:\n      newState = objectAssign({}, state, {\n        marketContext: action.payload\n      });\n      return newState;\n\n    case types.LOAD_MARKET_CONTEXT_ERROR:\n      return state;\n    // GROUPS\n\n    case types.LOAD_GROUP:\n      return state;\n\n    case types.LOAD_GROUP_SUCCESS:\n      newState = objectAssign({}, state, {\n        group: action.payload\n      });\n      return newState;\n\n    case types.LOAD_GROUP_ERROR:\n      return state;\n    // VEN\n\n    case types.SEARCH_VEN:\n      return state;\n\n    case types.SEARCH_VEN_SUCCESS:\n      newState = objectAssign({}, state, {\n        ven: action.payload\n      });\n      return newState;\n\n    case types.SEARCH_VEN_ERROR:\n      return state;\n\n    case types.LOCATION_CHANGE:\n      return initialState.event_create;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/bzanni/Documents/github/OpenADR/OpenADRServerVTN20b/frontend/src/reducers/eventCreateReducer.js"],"names":["types","objectAssign","initialState","eventCreateReducer","state","event_create","action","newState","type","LOAD_MARKET_CONTEXT","LOAD_MARKET_CONTEXT_SUCCESS","marketContext","payload","LOAD_MARKET_CONTEXT_ERROR","LOAD_GROUP","LOAD_GROUP_SUCCESS","group","LOAD_GROUP_ERROR","SEARCH_VEN","SEARCH_VEN_SUCCESS","ven","SEARCH_VEN_ERROR","LOCATION_CHANGE"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,0BAAvB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,kBAAT,GAAyE;AAAA,MAA5CC,KAA4C,uEAApCF,YAAY,CAACG,YAAuB;AAAA,MAATC,MAAS;AACtF,MAAIC,QAAJ;;AAEA,UAAQD,MAAM,CAACE,IAAf;AAEE;AACA,SAAKR,KAAK,CAACS,mBAAX;AACE,aAAOL,KAAP;;AAEF,SAAKJ,KAAK,CAACU,2BAAX;AACEH,MAAAA,QAAQ,GAAGN,YAAY,CAAE,EAAF,EAAMG,KAAN,EAAa;AAClCO,QAAAA,aAAa,EAAEL,MAAM,CAACM;AADY,OAAb,CAAvB;AAGA,aAAOL,QAAP;;AAEF,SAAKP,KAAK,CAACa,yBAAX;AACE,aAAOT,KAAP;AAEA;;AACF,SAAKJ,KAAK,CAACc,UAAX;AACE,aAAOV,KAAP;;AAEF,SAAKJ,KAAK,CAACe,kBAAX;AACER,MAAAA,QAAQ,GAAGN,YAAY,CAAE,EAAF,EAAMG,KAAN,EAAa;AAClCY,QAAAA,KAAK,EAAEV,MAAM,CAACM;AADoB,OAAb,CAAvB;AAGA,aAAOL,QAAP;;AAEF,SAAKP,KAAK,CAACiB,gBAAX;AACE,aAAOb,KAAP;AAEA;;AACF,SAAKJ,KAAK,CAACkB,UAAX;AACE,aAAOd,KAAP;;AAEF,SAAKJ,KAAK,CAACmB,kBAAX;AACEZ,MAAAA,QAAQ,GAAGN,YAAY,CAAE,EAAF,EAAMG,KAAN,EAAa;AAClCgB,QAAAA,GAAG,EAAEd,MAAM,CAACM;AADsB,OAAb,CAAvB;AAGA,aAAOL,QAAP;;AAEF,SAAKP,KAAK,CAACqB,gBAAX;AACE,aAAOjB,KAAP;;AAEF,SAAKJ,KAAK,CAACsB,eAAX;AACE,aAAOpB,YAAY,CAACG,YAApB;;AAEF;AACE,aAAOD,KAAP;AA7CJ;AA+CD","sourcesContent":["import * as types from '../constants/actionTypes';\nimport objectAssign from 'object-assign';\nimport initialState from './initialState';\n\n// IMPORTANT: Note that with Redux, state should NEVER be changed.\n// State is considered immutable. Instead,\n// create a copy of the state passed and set new values on the copy.\n// Note that I'm using Object.assign to create a copy of current state\n// and update values on the copy.\nexport default function eventCreateReducer( state = initialState.event_create, action ) {\n  let newState;\n\n  switch (action.type) {\n\n  \t // MARKET CONTEXT\n    case types.LOAD_MARKET_CONTEXT:\n      return state;\n\n    case types.LOAD_MARKET_CONTEXT_SUCCESS:\n      newState = objectAssign( {}, state, {\n        marketContext: action.payload\n      } );\n      return newState;\n\n    case types.LOAD_MARKET_CONTEXT_ERROR:\n      return state;\n\n      // GROUPS\n    case types.LOAD_GROUP:\n      return state;\n\n    case types.LOAD_GROUP_SUCCESS:\n      newState = objectAssign( {}, state, {\n        group: action.payload\n      } );\n      return newState;\n\n    case types.LOAD_GROUP_ERROR:\n      return state;\n\n      // VEN\n    case types.SEARCH_VEN:\n      return state;\n\n    case types.SEARCH_VEN_SUCCESS:\n      newState = objectAssign( {}, state, {\n        ven: action.payload\n      } );\n      return newState;\n\n    case types.SEARCH_VEN_ERROR:\n      return state;\n\n    case types.LOCATION_CHANGE:\n      return initialState.event_create;\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}