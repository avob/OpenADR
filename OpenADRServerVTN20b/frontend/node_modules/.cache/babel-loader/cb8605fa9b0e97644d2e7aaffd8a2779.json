{"ast":null,"code":"// Query String Utilities\n'use strict';\n\nvar QueryString = exports;\n\nvar Buffer = require('buffer').Buffer; // a safe fast alternative to decodeURIComponent\n\n\nQueryString.unescapeBuffer = function (s, decodeSpaces) {\n  var out = new Buffer(s.length);\n  var state = 0;\n  var n, m, hexchar;\n\n  for (var inIndex = 0, outIndex = 0; inIndex <= s.length; inIndex++) {\n    var c = inIndex < s.length ? s.charCodeAt(inIndex) : NaN;\n\n    switch (state) {\n      case 0:\n        // Any character\n        switch (c) {\n          case 37:\n            // '%'\n            n = 0;\n            m = 0;\n            state = 1;\n            break;\n\n          case 43:\n            // '+'\n            if (decodeSpaces) c = 32;\n          // ' '\n          // falls through\n\n          default:\n            out[outIndex++] = c;\n            break;\n        }\n\n        break;\n\n      case 1:\n        // First hex digit\n        hexchar = c;\n\n        if (c >= 48\n        /*0*/\n        && c <= 57\n        /*9*/\n        ) {\n            n = c - 48\n            /*0*/\n            ;\n          } else if (c >= 65\n        /*A*/\n        && c <= 70\n        /*F*/\n        ) {\n            n = c - 65\n            /*A*/\n            + 10;\n          } else if (c >= 97\n        /*a*/\n        && c <= 102\n        /*f*/\n        ) {\n            n = c - 97\n            /*a*/\n            + 10;\n          } else {\n          out[outIndex++] = 37\n          /*%*/\n          ;\n          out[outIndex++] = c;\n          state = 0;\n          break;\n        }\n\n        state = 2;\n        break;\n\n      case 2:\n        // Second hex digit\n        state = 0;\n\n        if (c >= 48\n        /*0*/\n        && c <= 57\n        /*9*/\n        ) {\n            m = c - 48\n            /*0*/\n            ;\n          } else if (c >= 65\n        /*A*/\n        && c <= 70\n        /*F*/\n        ) {\n            m = c - 65\n            /*A*/\n            + 10;\n          } else if (c >= 97\n        /*a*/\n        && c <= 102\n        /*f*/\n        ) {\n            m = c - 97\n            /*a*/\n            + 10;\n          } else {\n          out[outIndex++] = 37\n          /*%*/\n          ;\n          out[outIndex++] = hexchar;\n          out[outIndex++] = c;\n          break;\n        }\n\n        out[outIndex++] = 16 * n + m;\n        break;\n    }\n  } // TODO support returning arbitrary buffers.\n\n\n  return out.slice(0, outIndex - 1);\n};\n\nfunction qsUnescape(s, decodeSpaces) {\n  try {\n    return decodeURIComponent(s);\n  } catch (e) {\n    return QueryString.unescapeBuffer(s, decodeSpaces).toString();\n  }\n}\n\nQueryString.unescape = qsUnescape;\nvar hexTable = new Array(256);\n\nfor (var i = 0; i < 256; ++i) {\n  hexTable[i] = '%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase();\n}\n\nQueryString.escape = function (str) {\n  // replaces encodeURIComponent\n  // http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3.4\n  if (typeof str !== 'string') str += '';\n  var out = '';\n  var lastPos = 0;\n\n  for (var i = 0; i < str.length; ++i) {\n    var c = str.charCodeAt(i); // These characters do not need escaping (in order):\n    // ! - . _ ~\n    // ' ( ) *\n    // digits\n    // alpha (uppercase)\n    // alpha (lowercase)\n\n    if (c === 0x21 || c === 0x2D || c === 0x2E || c === 0x5F || c === 0x7E || c >= 0x27 && c <= 0x2A || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5A || c >= 0x61 && c <= 0x7A) {\n      continue;\n    }\n\n    if (i - lastPos > 0) out += str.slice(lastPos, i); // Other ASCII characters\n\n    if (c < 0x80) {\n      lastPos = i + 1;\n      out += hexTable[c];\n      continue;\n    } // Multi-byte characters ...\n\n\n    if (c < 0x800) {\n      lastPos = i + 1;\n      out += hexTable[0xC0 | c >> 6] + hexTable[0x80 | c & 0x3F];\n      continue;\n    }\n\n    if (c < 0xD800 || c >= 0xE000) {\n      lastPos = i + 1;\n      out += hexTable[0xE0 | c >> 12] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F];\n      continue;\n    } // Surrogate pair\n\n\n    ++i;\n    var c2;\n    if (i < str.length) c2 = str.charCodeAt(i) & 0x3FF;else throw new URIError('URI malformed');\n    lastPos = i + 1;\n    c = 0x10000 + ((c & 0x3FF) << 10 | c2);\n    out += hexTable[0xF0 | c >> 18] + hexTable[0x80 | c >> 12 & 0x3F] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F];\n  }\n\n  if (lastPos === 0) return str;\n  if (lastPos < str.length) return out + str.slice(lastPos);\n  return out;\n};\n\nvar stringifyPrimitive = function stringifyPrimitive(v) {\n  if (typeof v === 'string') return v;\n  if (typeof v === 'number' && isFinite(v)) return '' + v;\n  if (typeof v === 'boolean') return v ? 'true' : 'false';\n  return '';\n};\n\nQueryString.stringify = QueryString.encode = function (obj, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var encode = QueryString.escape;\n\n  if (options && typeof options.encodeURIComponent === 'function') {\n    encode = options.encodeURIComponent;\n  }\n\n  if (obj !== null && typeof obj === 'object') {\n    var keys = Object.keys(obj);\n    var len = keys.length;\n    var flast = len - 1;\n    var fields = '';\n\n    for (var i = 0; i < len; ++i) {\n      var k = keys[i];\n      var v = obj[k];\n      var ks = encode(stringifyPrimitive(k)) + eq;\n\n      if (Array.isArray(v)) {\n        var vlen = v.length;\n        var vlast = vlen - 1;\n\n        for (var j = 0; j < vlen; ++j) {\n          fields += ks + encode(stringifyPrimitive(v[j]));\n          if (j < vlast) fields += sep;\n        }\n\n        if (vlen && i < flast) fields += sep;\n      } else {\n        fields += ks + encode(stringifyPrimitive(v));\n        if (i < flast) fields += sep;\n      }\n    }\n\n    return fields;\n  }\n\n  return '';\n}; // Parse a key/val string.\n\n\nQueryString.parse = QueryString.decode = function (qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  if (typeof sep !== 'string') sep += '';\n  var eqLen = eq.length;\n  var sepLen = sep.length;\n  var maxKeys = 1000;\n\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var pairs = Infinity;\n  if (maxKeys > 0) pairs = maxKeys;\n  var decode = QueryString.unescape;\n\n  if (options && typeof options.decodeURIComponent === 'function') {\n    decode = options.decodeURIComponent;\n  }\n\n  var customDecode = decode !== qsUnescape;\n  var keys = [];\n  var lastPos = 0;\n  var sepIdx = 0;\n  var eqIdx = 0;\n  var key = '';\n  var value = '';\n  var keyEncoded = customDecode;\n  var valEncoded = customDecode;\n  var encodeCheck = 0;\n\n  for (var i = 0; i < qs.length; ++i) {\n    var code = qs.charCodeAt(i); // Try matching key/value pair separator (e.g. '&')\n\n    if (code === sep.charCodeAt(sepIdx)) {\n      if (++sepIdx === sepLen) {\n        // Key/value pair separator match!\n        var end = i - sepIdx + 1;\n\n        if (eqIdx < eqLen) {\n          // If we didn't find the key/value separator, treat the substring as\n          // part of the key instead of the value\n          if (lastPos < end) key += qs.slice(lastPos, end);\n        } else if (lastPos < end) value += qs.slice(lastPos, end);\n\n        if (keyEncoded) key = decodeStr(key, decode);\n        if (valEncoded) value = decodeStr(value, decode); // Use a key array lookup instead of using hasOwnProperty(), which is\n        // slower\n\n        if (keys.indexOf(key) === -1) {\n          obj[key] = value;\n          keys[keys.length] = key;\n        } else {\n          var curValue = obj[key]; // `instanceof Array` is used instead of Array.isArray() because it\n          // is ~15-20% faster with v8 4.7 and is safe to use because we are\n          // using it with values being created within this function\n\n          if (curValue instanceof Array) curValue[curValue.length] = value;else obj[key] = [curValue, value];\n        }\n\n        if (--pairs === 0) break;\n        keyEncoded = valEncoded = customDecode;\n        encodeCheck = 0;\n        key = value = '';\n        lastPos = i + 1;\n        sepIdx = eqIdx = 0;\n      }\n\n      continue;\n    } else {\n      sepIdx = 0;\n\n      if (!valEncoded) {\n        // Try to match an (valid) encoded byte (once) to minimize unnecessary\n        // calls to string decoding functions\n        if (code === 37\n        /*%*/\n        ) {\n            encodeCheck = 1;\n          } else if (encodeCheck > 0 && (code >= 48\n        /*0*/\n        && code <= 57\n        /*9*/\n        || code >= 65\n        /*A*/\n        && code <= 70\n        /*Z*/\n        || code >= 97\n        /*a*/\n        && code <= 102\n        /*z*/\n        )) {\n          if (++encodeCheck === 3) valEncoded = true;\n        } else {\n          encodeCheck = 0;\n        }\n      }\n    } // Try matching key/value separator (e.g. '=') if we haven't already\n\n\n    if (eqIdx < eqLen) {\n      if (code === eq.charCodeAt(eqIdx)) {\n        if (++eqIdx === eqLen) {\n          // Key/value separator match!\n          var end = i - eqIdx + 1;\n          if (lastPos < end) key += qs.slice(lastPos, end);\n          encodeCheck = 0;\n          lastPos = i + 1;\n        }\n\n        continue;\n      } else {\n        eqIdx = 0;\n\n        if (!keyEncoded) {\n          // Try to match an (valid) encoded byte once to minimize unnecessary\n          // calls to string decoding functions\n          if (code === 37\n          /*%*/\n          ) {\n              encodeCheck = 1;\n            } else if (encodeCheck > 0 && (code >= 48\n          /*0*/\n          && code <= 57\n          /*9*/\n          || code >= 65\n          /*A*/\n          && code <= 70\n          /*Z*/\n          || code >= 97\n          /*a*/\n          && code <= 102\n          /*z*/\n          )) {\n            if (++encodeCheck === 3) keyEncoded = true;\n          } else {\n            encodeCheck = 0;\n          }\n        }\n      }\n    }\n\n    if (code === 43\n    /*+*/\n    ) {\n        if (eqIdx < eqLen) {\n          if (i - lastPos > 0) key += qs.slice(lastPos, i);\n          key += '%20';\n          keyEncoded = true;\n        } else {\n          if (i - lastPos > 0) value += qs.slice(lastPos, i);\n          value += '%20';\n          valEncoded = true;\n        }\n\n        lastPos = i + 1;\n      }\n  } // Check if we have leftover key or value data\n\n\n  if (pairs > 0 && (lastPos < qs.length || eqIdx > 0)) {\n    if (lastPos < qs.length) {\n      if (eqIdx < eqLen) key += qs.slice(lastPos);else if (sepIdx < sepLen) value += qs.slice(lastPos);\n    }\n\n    if (keyEncoded) key = decodeStr(key, decode);\n    if (valEncoded) value = decodeStr(value, decode); // Use a key array lookup instead of using hasOwnProperty(), which is\n    // slower\n\n    if (keys.indexOf(key) === -1) {\n      obj[key] = value;\n      keys[keys.length] = key;\n    } else {\n      var curValue = obj[key]; // `instanceof Array` is used instead of Array.isArray() because it\n      // is ~15-20% faster with v8 4.7 and is safe to use because we are\n      // using it with values being created within this function\n\n      if (curValue instanceof Array) curValue[curValue.length] = value;else obj[key] = [curValue, value];\n    }\n  }\n\n  return obj;\n}; // v8 does not optimize functions with try-catch blocks, so we isolate them here\n// to minimize the damage\n\n\nfunction decodeStr(s, decoder) {\n  try {\n    return decoder(s);\n  } catch (e) {\n    return QueryString.unescape(s, true);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}