{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _EventRowMixin = _interopRequireDefault(require(\"./EventRowMixin\"));\n\nvar _eventLevels = require(\"./utils/eventLevels\");\n\nvar _range = _interopRequireDefault(require(\"lodash/range\"));\n\nvar isSegmentInSlot = function isSegmentInSlot(seg, slot) {\n  return seg.left <= slot && seg.right >= slot;\n};\n\nvar eventsInSlot = function eventsInSlot(segments, slot) {\n  return segments.filter(function (seg) {\n    return isSegmentInSlot(seg, slot);\n  }).length;\n};\n\nvar EventEndingRow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(EventEndingRow, _React$Component);\n\n  function EventEndingRow() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = EventEndingRow.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        segments = _this$props.segments,\n        slots = _this$props.slotMetrics.slots;\n    var rowSegments = (0, _eventLevels.eventLevels)(segments).levels[0];\n    var current = 1,\n        lastEnd = 1,\n        row = [];\n\n    while (current <= slots) {\n      var key = '_lvl_' + current;\n\n      var _ref = rowSegments.filter(function (seg) {\n        return isSegmentInSlot(seg, current);\n      })[0] || {},\n          event = _ref.event,\n          left = _ref.left,\n          right = _ref.right,\n          span = _ref.span; //eslint-disable-line\n\n\n      if (!event) {\n        current++;\n        continue;\n      }\n\n      var gap = Math.max(0, left - lastEnd);\n\n      if (this.canRenderSlotEvent(left, span)) {\n        var content = _EventRowMixin.default.renderEvent(this.props, event);\n\n        if (gap) {\n          row.push(_EventRowMixin.default.renderSpan(slots, gap, key + '_gap'));\n        }\n\n        row.push(_EventRowMixin.default.renderSpan(slots, span, key, content));\n        lastEnd = current = right + 1;\n      } else {\n        if (gap) {\n          row.push(_EventRowMixin.default.renderSpan(slots, gap, key + '_gap'));\n        }\n\n        row.push(_EventRowMixin.default.renderSpan(slots, 1, key, this.renderShowMore(segments, current)));\n        lastEnd = current = current + 1;\n      }\n    }\n\n    return _react.default.createElement(\"div\", {\n      className: \"rbc-row\"\n    }, row);\n  };\n\n  _proto.canRenderSlotEvent = function canRenderSlotEvent(slot, span) {\n    var segments = this.props.segments;\n    return (0, _range.default)(slot, slot + span).every(function (s) {\n      var count = eventsInSlot(segments, s);\n      return count === 1;\n    });\n  };\n\n  _proto.renderShowMore = function renderShowMore(segments, slot) {\n    var _this = this;\n\n    var localizer = this.props.localizer;\n    var count = eventsInSlot(segments, slot);\n    return count ? _react.default.createElement(\"a\", {\n      key: 'sm_' + slot,\n      href: \"#\",\n      className: 'rbc-show-more',\n      onClick: function onClick(e) {\n        return _this.showMore(slot, e);\n      }\n    }, localizer.messages.showMore(count)) : false;\n  };\n\n  _proto.showMore = function showMore(slot, e) {\n    e.preventDefault();\n    this.props.onShowMore(slot);\n  };\n\n  return EventEndingRow;\n}(_react.default.Component);\n\nEventEndingRow.propTypes = process.env.NODE_ENV !== \"production\" ? (0, _extends2.default)({\n  segments: _propTypes.default.array,\n  slots: _propTypes.default.number,\n  onShowMore: _propTypes.default.func\n}, _EventRowMixin.default.propTypes) : {};\nEventEndingRow.defaultProps = (0, _extends2.default)({}, _EventRowMixin.default.defaultProps);\nvar _default = EventEndingRow;\nexports.default = _default;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}