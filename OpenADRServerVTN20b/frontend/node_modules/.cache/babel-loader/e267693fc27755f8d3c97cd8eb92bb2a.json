{"ast":null,"code":"var self = {};\n!function (t) {\n  \"use strict\";\n\n  function e(t) {\n    if (\"string\" != typeof t && (t = String(t)), /[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(t)) throw new TypeError(\"Invalid character in header field name\");\n    return t.toLowerCase();\n  }\n\n  function r(t) {\n    return \"string\" != typeof t && (t = String(t)), t;\n  }\n\n  function o(t) {\n    var e = {\n      next: function next() {\n        var e = t.shift();\n        return {\n          done: void 0 === e,\n          value: e\n        };\n      }\n    };\n    return m.iterable && (e[Symbol.iterator] = function () {\n      return e;\n    }), e;\n  }\n\n  function n(t) {\n    this.map = {}, t instanceof n ? t.forEach(function (t, e) {\n      this.append(e, t);\n    }, this) : Array.isArray(t) ? t.forEach(function (t) {\n      this.append(t[0], t[1]);\n    }, this) : t && Object.getOwnPropertyNames(t).forEach(function (e) {\n      this.append(e, t[e]);\n    }, this);\n  }\n\n  function i(t) {\n    if (t.bodyUsed) return Promise.reject(new TypeError(\"Already read\"));\n    t.bodyUsed = !0;\n  }\n\n  function s(t) {\n    return new Promise(function (e, r) {\n      t.onload = function () {\n        e(t.result);\n      }, t.onerror = function () {\n        r(t.error);\n      };\n    });\n  }\n\n  function a(t) {\n    var e = new FileReader(),\n        r = s(e);\n    return e.readAsArrayBuffer(t), r;\n  }\n\n  function u(t) {\n    var e = new FileReader(),\n        r = s(e);\n    return e.readAsText(t), r;\n  }\n\n  function h(t) {\n    for (var e = new Uint8Array(t), r = new Array(e.length), o = 0; o < e.length; o++) {\n      r[o] = String.fromCharCode(e[o]);\n    }\n\n    return r.join(\"\");\n  }\n\n  function f(t) {\n    if (t.slice) return t.slice(0);\n    var e = new Uint8Array(t.byteLength);\n    return e.set(new Uint8Array(t)), e.buffer;\n  }\n\n  function d() {\n    return this.bodyUsed = !1, this._initBody = function (t) {\n      if (this._bodyInit = t, t) {\n        if (\"string\" == typeof t) this._bodyText = t;else if (m.blob && Blob.prototype.isPrototypeOf(t)) this._bodyBlob = t;else if (m.formData && FormData.prototype.isPrototypeOf(t)) this._bodyFormData = t;else if (m.searchParams && URLSearchParams.prototype.isPrototypeOf(t)) this._bodyText = t.toString();else if (m.arrayBuffer && m.blob && v(t)) this._bodyArrayBuffer = f(t.buffer), this._bodyInit = new Blob([this._bodyArrayBuffer]);else {\n          if (!m.arrayBuffer || !ArrayBuffer.prototype.isPrototypeOf(t) && !B(t)) throw new Error(\"unsupported BodyInit type\");\n          this._bodyArrayBuffer = f(t);\n        }\n      } else this._bodyText = \"\";\n      this.headers.get(\"content-type\") || (\"string\" == typeof t ? this.headers.set(\"content-type\", \"text/plain;charset=UTF-8\") : this._bodyBlob && this._bodyBlob.type ? this.headers.set(\"content-type\", this._bodyBlob.type) : m.searchParams && URLSearchParams.prototype.isPrototypeOf(t) && this.headers.set(\"content-type\", \"application/x-www-form-urlencoded;charset=UTF-8\"));\n    }, m.blob && (this.blob = function () {\n      var t = i(this);\n      if (t) return t;\n      if (this._bodyBlob) return Promise.resolve(this._bodyBlob);\n      if (this._bodyArrayBuffer) return Promise.resolve(new Blob([this._bodyArrayBuffer]));\n      if (this._bodyFormData) throw new Error(\"could not read FormData body as blob\");\n      return Promise.resolve(new Blob([this._bodyText]));\n    }, this.arrayBuffer = function () {\n      return this._bodyArrayBuffer ? i(this) || Promise.resolve(this._bodyArrayBuffer) : this.blob().then(a);\n    }), this.text = function () {\n      var t = i(this);\n      if (t) return t;\n      if (this._bodyBlob) return u(this._bodyBlob);\n      if (this._bodyArrayBuffer) return Promise.resolve(h(this._bodyArrayBuffer));\n      if (this._bodyFormData) throw new Error(\"could not read FormData body as text\");\n      return Promise.resolve(this._bodyText);\n    }, m.formData && (this.formData = function () {\n      return this.text().then(p);\n    }), this.json = function () {\n      return this.text().then(JSON.parse);\n    }, this;\n  }\n\n  function y(t) {\n    var e = t.toUpperCase();\n    return _.indexOf(e) > -1 ? e : t;\n  }\n\n  function l(t, e) {\n    var r = (e = e || {}).body;\n\n    if (t instanceof l) {\n      if (t.bodyUsed) throw new TypeError(\"Already read\");\n      this.url = t.url, this.credentials = t.credentials, e.headers || (this.headers = new n(t.headers)), this.method = t.method, this.mode = t.mode, r || null == t._bodyInit || (r = t._bodyInit, t.bodyUsed = !0);\n    } else this.url = String(t);\n\n    if (this.credentials = e.credentials || this.credentials || \"omit\", !e.headers && this.headers || (this.headers = new n(e.headers)), this.method = y(e.method || this.method || \"GET\"), this.mode = e.mode || this.mode || null, this.referrer = null, (\"GET\" === this.method || \"HEAD\" === this.method) && r) throw new TypeError(\"Body not allowed for GET or HEAD requests\");\n\n    this._initBody(r);\n  }\n\n  function p(t) {\n    var e = new FormData();\n    return t.trim().split(\"&\").forEach(function (t) {\n      if (t) {\n        var r = t.split(\"=\"),\n            o = r.shift().replace(/\\+/g, \" \"),\n            n = r.join(\"=\").replace(/\\+/g, \" \");\n        e.append(decodeURIComponent(o), decodeURIComponent(n));\n      }\n    }), e;\n  }\n\n  function c(t) {\n    var e = new n();\n    return t.split(/\\r?\\n/).forEach(function (t) {\n      var r = t.split(\":\"),\n          o = r.shift().trim();\n\n      if (o) {\n        var n = r.join(\":\").trim();\n        e.append(o, n);\n      }\n    }), e;\n  }\n\n  function b(t, e) {\n    e || (e = {}), this.type = \"default\", this.status = \"status\" in e ? e.status : 200, this.ok = this.status >= 200 && this.status < 300, this.statusText = \"statusText\" in e ? e.statusText : \"OK\", this.headers = new n(e.headers), this.url = e.url || \"\", this._initBody(t);\n  }\n\n  if (!t.fetch) {\n    var m = {\n      searchParams: \"URLSearchParams\" in t,\n      iterable: \"Symbol\" in t && \"iterator\" in Symbol,\n      blob: \"FileReader\" in t && \"Blob\" in t && function () {\n        try {\n          return new Blob(), !0;\n        } catch (t) {\n          return !1;\n        }\n      }(),\n      formData: \"FormData\" in t,\n      arrayBuffer: \"ArrayBuffer\" in t\n    };\n    if (m.arrayBuffer) var w = [\"[object Int8Array]\", \"[object Uint8Array]\", \"[object Uint8ClampedArray]\", \"[object Int16Array]\", \"[object Uint16Array]\", \"[object Int32Array]\", \"[object Uint32Array]\", \"[object Float32Array]\", \"[object Float64Array]\"],\n        v = function v(t) {\n      return t && DataView.prototype.isPrototypeOf(t);\n    },\n        B = ArrayBuffer.isView || function (t) {\n      return t && w.indexOf(Object.prototype.toString.call(t)) > -1;\n    };\n    n.prototype.append = function (t, o) {\n      t = e(t), o = r(o);\n      var n = this.map[t];\n      this.map[t] = n ? n + \",\" + o : o;\n    }, n.prototype.delete = function (t) {\n      delete this.map[e(t)];\n    }, n.prototype.get = function (t) {\n      return t = e(t), this.has(t) ? this.map[t] : null;\n    }, n.prototype.has = function (t) {\n      return this.map.hasOwnProperty(e(t));\n    }, n.prototype.set = function (t, o) {\n      this.map[e(t)] = r(o);\n    }, n.prototype.forEach = function (t, e) {\n      for (var r in this.map) {\n        this.map.hasOwnProperty(r) && t.call(e, this.map[r], r, this);\n      }\n    }, n.prototype.keys = function () {\n      var t = [];\n      return this.forEach(function (e, r) {\n        t.push(r);\n      }), o(t);\n    }, n.prototype.values = function () {\n      var t = [];\n      return this.forEach(function (e) {\n        t.push(e);\n      }), o(t);\n    }, n.prototype.entries = function () {\n      var t = [];\n      return this.forEach(function (e, r) {\n        t.push([r, e]);\n      }), o(t);\n    }, m.iterable && (n.prototype[Symbol.iterator] = n.prototype.entries);\n    var _ = [\"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"POST\", \"PUT\"];\n    l.prototype.clone = function () {\n      return new l(this, {\n        body: this._bodyInit\n      });\n    }, d.call(l.prototype), d.call(b.prototype), b.prototype.clone = function () {\n      return new b(this._bodyInit, {\n        status: this.status,\n        statusText: this.statusText,\n        headers: new n(this.headers),\n        url: this.url\n      });\n    }, b.error = function () {\n      var t = new b(null, {\n        status: 0,\n        statusText: \"\"\n      });\n      return t.type = \"error\", t;\n    };\n    var A = [301, 302, 303, 307, 308];\n    b.redirect = function (t, e) {\n      if (-1 === A.indexOf(e)) throw new RangeError(\"Invalid status code\");\n      return new b(null, {\n        status: e,\n        headers: {\n          location: t\n        }\n      });\n    }, t.Headers = n, t.Request = l, t.Response = b, t.fetch = function (t, e) {\n      return new Promise(function (r, o) {\n        var n = new l(t, e),\n            i = new XMLHttpRequest();\n        i.onload = function () {\n          var t = {\n            status: i.status,\n            statusText: i.statusText,\n            headers: c(i.getAllResponseHeaders() || \"\")\n          };\n          t.url = \"responseURL\" in i ? i.responseURL : t.headers.get(\"X-Request-URL\");\n          var e = \"response\" in i ? i.response : i.responseText;\n          r(new b(e, t));\n        }, i.onerror = function () {\n          o(new TypeError(\"Network request failed\"));\n        }, i.ontimeout = function () {\n          o(new TypeError(\"Network request failed\"));\n        }, i.open(n.method, n.url, !0), \"include\" === n.credentials && (i.withCredentials = !0), \"responseType\" in i && m.blob && (i.responseType = \"blob\"), n.headers.forEach(function (t, e) {\n          i.setRequestHeader(e, t);\n        }), i.send(void 0 === n._bodyInit ? null : n._bodyInit);\n      });\n    }, t.fetch.polyfill = !0;\n  }\n}(void 0 !== self ? self : this), module.exports = self;","map":null,"metadata":{},"sourceType":"script"}