{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport _inheritsLoose from '@babel/runtime/helpers/esm/inheritsLoose';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport uncontrollable from 'uncontrollable';\nimport cn from 'classnames';\nimport elementType from 'prop-types-extra/lib/elementType';\nimport all from 'prop-types-extra/lib/all';\nimport warning from 'warning';\nimport invariant from 'invariant';\nimport _assertThisInitialized from '@babel/runtime/helpers/esm/assertThisInitialized';\nimport { findDOMNode } from 'react-dom';\nimport dateMath from 'date-arithmetic';\nimport chunk from 'lodash/chunk';\nimport getPosition from 'dom-helpers/query/position';\nimport raf from 'dom-helpers/util/requestAnimationFrame';\nimport getOffset from 'dom-helpers/query/offset';\nimport getScrollTop from 'dom-helpers/query/scrollTop';\nimport getScrollLeft from 'dom-helpers/query/scrollLeft';\nimport Overlay from 'react-overlays/lib/Overlay';\nimport getHeight from 'dom-helpers/query/height';\nimport qsa from 'dom-helpers/query/querySelectorAll';\nimport contains from 'dom-helpers/query/contains';\nimport closest from 'dom-helpers/query/closest';\nimport events from 'dom-helpers/events';\nimport findIndex from 'lodash/findIndex';\nimport range from 'lodash/range';\nimport memoize from 'memoize-one';\nimport _createClass from '@babel/runtime/helpers/esm/createClass';\nimport sortBy from 'lodash/sortBy';\nimport getWidth from 'dom-helpers/query/width';\nimport scrollbarSize from 'dom-helpers/util/scrollbarSize';\nimport classes from 'dom-helpers/class';\nimport omit from 'lodash/omit';\nimport defaults from 'lodash/defaults';\nimport transform from 'lodash/transform';\nimport mapValues from 'lodash/mapValues';\nvar navigate = {\n  PREVIOUS: 'PREV',\n  NEXT: 'NEXT',\n  TODAY: 'TODAY',\n  DATE: 'DATE'\n};\nvar views = {\n  MONTH: 'month',\n  WEEK: 'week',\n  WORK_WEEK: 'work_week',\n  DAY: 'day',\n  AGENDA: 'agenda'\n};\nvar eventComponent = PropTypes.oneOfType([elementType, PropTypes.shape({\n  month: elementType,\n  week: elementType,\n  day: elementType,\n  agenda: elementType\n})]);\nvar viewNames = Object.keys(views).map(function (k) {\n  return views[k];\n});\nvar accessor = PropTypes.oneOfType([PropTypes.string, PropTypes.func]);\nvar dateFormat = PropTypes.any;\nvar dateRangeFormat = PropTypes.func;\n/**\n * accepts either an array of builtin view names:\n *\n * ```\n * views={['month', 'day', 'agenda']}\n * ```\n *\n * or an object hash of the view name and the component (or boolean for builtin)\n *\n * ```\n * views={{\n *   month: true,\n *   week: false,\n *   workweek: WorkWeekViewComponent,\n * }}\n * ```\n */\n\nvar views$1 = PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOf(viewNames)), all(PropTypes.object, function (props, name) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  var prop = props[name],\n      err;\n  Object.keys(prop).every(function (key) {\n    var isBuiltinView = viewNames.indexOf(key) !== -1 && typeof prop[key] === 'boolean';\n    return isBuiltinView || !(err = elementType.apply(void 0, [prop, key].concat(args)));\n  });\n  return err || null;\n})]);\n\nfunction notify(handler, args) {\n  handler && handler.apply(null, [].concat(args));\n}\n\nvar localePropType = PropTypes.oneOfType([PropTypes.string, PropTypes.func]);\n\nfunction _format(localizer, formatter, value, format, culture) {\n  var result = typeof format === 'function' ? format(value, culture, localizer) : formatter.call(localizer, value, format, culture);\n  !(result == null || typeof result === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, '`localizer format(..)` must return a string, null, or undefined') : invariant(false) : void 0;\n  return result;\n}\n\nvar DateLocalizer = function DateLocalizer(spec) {\n  var _this = this;\n\n  !(typeof spec.format === 'function') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'date localizer `format(..)` must be a function') : invariant(false) : void 0;\n  !(typeof spec.firstOfWeek === 'function') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'date localizer `firstOfWeek(..)` must be a function') : invariant(false) : void 0;\n  this.propType = spec.propType || localePropType;\n  this.startOfWeek = spec.firstOfWeek;\n  this.formats = spec.formats;\n\n  this.format = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _format.apply(void 0, [_this, spec.format].concat(args));\n  };\n};\n\nfunction mergeWithDefaults(localizer, culture, formatOverrides, messages) {\n  var formats = _extends({}, localizer.formats, formatOverrides);\n\n  return _extends({}, localizer, {\n    messages: messages,\n    startOfWeek: function startOfWeek() {\n      return localizer.startOfWeek(culture);\n    },\n    format: function format(value, _format2) {\n      return localizer.format(value, formats[_format2] || _format2, culture);\n    }\n  });\n}\n\nvar defaultMessages = {\n  date: 'Date',\n  time: 'Time',\n  event: 'Event',\n  allDay: 'All Day',\n  week: 'Week',\n  work_week: 'Work Week',\n  day: 'Day',\n  month: 'Month',\n  previous: 'Back',\n  next: 'Next',\n  yesterday: 'Yesterday',\n  tomorrow: 'Tomorrow',\n  today: 'Today',\n  agenda: 'Agenda',\n  noEventsInRange: 'There are no events in this range.',\n  showMore: function showMore(total) {\n    return \"+\" + total + \" more\";\n  }\n};\n\nfunction messages(msgs) {\n  return _extends({}, defaultMessages, msgs);\n}\n\nvar MILLI = {\n  seconds: 1000,\n  minutes: 1000 * 60,\n  hours: 1000 * 60 * 60,\n  day: 1000 * 60 * 60 * 24\n};\nvar MONTHS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n\nvar dates = _extends({}, dateMath, {\n  monthsInYear: function monthsInYear(year) {\n    var date = new Date(year, 0, 1);\n    return MONTHS.map(function (i) {\n      return dates.month(date, i);\n    });\n  },\n  firstVisibleDay: function firstVisibleDay(date, localizer) {\n    var firstOfMonth = dates.startOf(date, 'month');\n    return dates.startOf(firstOfMonth, 'week', localizer.startOfWeek());\n  },\n  lastVisibleDay: function lastVisibleDay(date, localizer) {\n    var endOfMonth = dates.endOf(date, 'month');\n    return dates.endOf(endOfMonth, 'week', localizer.startOfWeek());\n  },\n  visibleDays: function visibleDays(date, localizer) {\n    var current = dates.firstVisibleDay(date, localizer),\n        last = dates.lastVisibleDay(date, localizer),\n        days = [];\n\n    while (dates.lte(current, last, 'day')) {\n      days.push(current);\n      current = dates.add(current, 1, 'day');\n    }\n\n    return days;\n  },\n  ceil: function ceil(date, unit) {\n    var floor = dates.startOf(date, unit);\n    return dates.eq(floor, date) ? floor : dates.add(floor, 1, unit);\n  },\n  range: function range$$1(start, end, unit) {\n    if (unit === void 0) {\n      unit = 'day';\n    }\n\n    var current = start,\n        days = [];\n\n    while (dates.lte(current, end, unit)) {\n      days.push(current);\n      current = dates.add(current, 1, unit);\n    }\n\n    return days;\n  },\n  merge: function merge(date, time) {\n    if (time == null && date == null) return null;\n    if (time == null) time = new Date();\n    if (date == null) date = new Date();\n    date = dates.startOf(date, 'day');\n    date = dates.hours(date, dates.hours(time));\n    date = dates.minutes(date, dates.minutes(time));\n    date = dates.seconds(date, dates.seconds(time));\n    return dates.milliseconds(date, dates.milliseconds(time));\n  },\n  eqTime: function eqTime(dateA, dateB) {\n    return dates.hours(dateA) === dates.hours(dateB) && dates.minutes(dateA) === dates.minutes(dateB) && dates.seconds(dateA) === dates.seconds(dateB);\n  },\n  isJustDate: function isJustDate(date) {\n    return dates.hours(date) === 0 && dates.minutes(date) === 0 && dates.seconds(date) === 0 && dates.milliseconds(date) === 0;\n  },\n  duration: function duration(start, end, unit, firstOfWeek) {\n    if (unit === 'day') unit = 'date';\n    return Math.abs(dates[unit](start, undefined, firstOfWeek) - dates[unit](end, undefined, firstOfWeek));\n  },\n  diff: function diff(dateA, dateB, unit) {\n    if (!unit || unit === 'milliseconds') return Math.abs(+dateA - +dateB); // the .round() handles an edge case\n    // with DST where the total won't be exact\n    // since one day in the range may be shorter/longer by an hour\n\n    return Math.round(Math.abs(+dates.startOf(dateA, unit) / MILLI[unit] - +dates.startOf(dateB, unit) / MILLI[unit]));\n  },\n  total: function total(date, unit) {\n    var ms = date.getTime(),\n        div = 1;\n\n    switch (unit) {\n      case 'week':\n        div *= 7;\n\n      case 'day':\n        div *= 24;\n\n      case 'hours':\n        div *= 60;\n\n      case 'minutes':\n        div *= 60;\n\n      case 'seconds':\n        div *= 1000;\n    }\n\n    return ms / div;\n  },\n  week: function week(date) {\n    var d = new Date(date);\n    d.setHours(0, 0, 0);\n    d.setDate(d.getDate() + 4 - (d.getDay() || 7));\n    return Math.ceil(((d - new Date(d.getFullYear(), 0, 1)) / 8.64e7 + 1) / 7);\n  },\n  today: function today() {\n    return dates.startOf(new Date(), 'day');\n  },\n  yesterday: function yesterday() {\n    return dates.add(dates.startOf(new Date(), 'day'), -1, 'day');\n  },\n  tomorrow: function tomorrow() {\n    return dates.add(dates.startOf(new Date(), 'day'), 1, 'day');\n  }\n});\n\nvar EventCell =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(EventCell, _React$Component);\n\n  function EventCell() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = EventCell.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        style = _this$props.style,\n        className = _this$props.className,\n        event = _this$props.event,\n        selected = _this$props.selected,\n        isAllDay = _this$props.isAllDay,\n        onSelect = _this$props.onSelect,\n        _onDoubleClick = _this$props.onDoubleClick,\n        localizer = _this$props.localizer,\n        continuesPrior = _this$props.continuesPrior,\n        continuesAfter = _this$props.continuesAfter,\n        accessors = _this$props.accessors,\n        getters = _this$props.getters,\n        children = _this$props.children,\n        _this$props$component = _this$props.components,\n        Event = _this$props$component.event,\n        EventWrapper = _this$props$component.eventWrapper,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"style\", \"className\", \"event\", \"selected\", \"isAllDay\", \"onSelect\", \"onDoubleClick\", \"localizer\", \"continuesPrior\", \"continuesAfter\", \"accessors\", \"getters\", \"children\", \"components\"]);\n\n    var title = accessors.title(event);\n    var tooltip = accessors.tooltip(event);\n    var end = accessors.end(event);\n    var start = accessors.start(event);\n    var allDay = accessors.allDay(event);\n    var showAsAllDay = isAllDay || allDay || dates.diff(start, dates.ceil(end, 'day'), 'day') > 1;\n    var userProps = getters.eventProp(event, start, end, selected);\n    var content = React.createElement(\"div\", {\n      className: \"rbc-event-content\",\n      title: tooltip || undefined\n    }, Event ? React.createElement(Event, {\n      event: event,\n      title: title,\n      isAllDay: allDay,\n      localizer: localizer\n    }) : title);\n    return React.createElement(EventWrapper, _extends({}, this.props, {\n      type: \"date\"\n    }), React.createElement(\"div\", _extends({}, props, {\n      tabIndex: 0,\n      style: _extends({}, userProps.style, style),\n      className: cn('rbc-event', className, userProps.className, {\n        'rbc-selected': selected,\n        'rbc-event-allday': showAsAllDay,\n        'rbc-event-continues-prior': continuesPrior,\n        'rbc-event-continues-after': continuesAfter\n      }),\n      onClick: function onClick(e) {\n        return onSelect && onSelect(event, e);\n      },\n      onDoubleClick: function onDoubleClick(e) {\n        return _onDoubleClick && _onDoubleClick(event, e);\n      }\n    }), typeof children === 'function' ? children(content) : content));\n  };\n\n  return EventCell;\n}(React.Component);\n\nEventCell.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  event: PropTypes.object.isRequired,\n  slotStart: PropTypes.instanceOf(Date),\n  slotEnd: PropTypes.instanceOf(Date),\n  selected: PropTypes.bool,\n  isAllDay: PropTypes.bool,\n  continuesPrior: PropTypes.bool,\n  continuesAfter: PropTypes.bool,\n  accessors: PropTypes.object.isRequired,\n  components: PropTypes.object.isRequired,\n  getters: PropTypes.object.isRequired,\n  localizer: PropTypes.object,\n  onSelect: PropTypes.func,\n  onDoubleClick: PropTypes.func\n} : {};\n\nfunction isSelected(event, selected) {\n  if (!event || selected == null) return false;\n  return [].concat(selected).indexOf(event) !== -1;\n}\n\nfunction slotWidth(rowBox, slots) {\n  var rowWidth = rowBox.right - rowBox.left;\n  var cellWidth = rowWidth / slots;\n  return cellWidth;\n}\n\nfunction getSlotAtX(rowBox, x, rtl, slots) {\n  var cellWidth = slotWidth(rowBox, slots);\n  return rtl ? slots - 1 - Math.floor((x - rowBox.left) / cellWidth) : Math.floor((x - rowBox.left) / cellWidth);\n}\n\nfunction pointInBox(box, _ref) {\n  var x = _ref.x,\n      y = _ref.y;\n  return y >= box.top && y <= box.bottom && x >= box.left && x <= box.right;\n}\n\nfunction dateCellSelection(start, rowBox, box, slots, rtl) {\n  var startIdx = -1;\n  var endIdx = -1;\n  var lastSlotIdx = slots - 1;\n  var cellWidth = slotWidth(rowBox, slots); // cell under the mouse\n\n  var currentSlot = getSlotAtX(rowBox, box.x, rtl, slots); // Identify row as either the initial row\n  // or the row under the current mouse point\n\n  var isCurrentRow = rowBox.top < box.y && rowBox.bottom > box.y;\n  var isStartRow = rowBox.top < start.y && rowBox.bottom > start.y; // this row's position relative to the start point\n\n  var isAboveStart = start.y > rowBox.bottom;\n  var isBelowStart = rowBox.top > start.y;\n  var isBetween = box.top < rowBox.top && box.bottom > rowBox.bottom; // this row is between the current and start rows, so entirely selected\n\n  if (isBetween) {\n    startIdx = 0;\n    endIdx = lastSlotIdx;\n  }\n\n  if (isCurrentRow) {\n    if (isBelowStart) {\n      startIdx = 0;\n      endIdx = currentSlot;\n    } else if (isAboveStart) {\n      startIdx = currentSlot;\n      endIdx = lastSlotIdx;\n    }\n  }\n\n  if (isStartRow) {\n    // select the cell under the initial point\n    startIdx = endIdx = rtl ? lastSlotIdx - Math.floor((start.x - rowBox.left) / cellWidth) : Math.floor((start.x - rowBox.left) / cellWidth);\n\n    if (isCurrentRow) {\n      if (currentSlot < startIdx) startIdx = currentSlot;else endIdx = currentSlot; //select current range\n    } else if (start.y < box.y) {\n      // the current row is below start row\n      // select cells to the right of the start cell\n      endIdx = lastSlotIdx;\n    } else {\n      // select cells to the left of the start cell\n      startIdx = 0;\n    }\n  }\n\n  return {\n    startIdx: startIdx,\n    endIdx: endIdx\n  };\n}\n\nvar Popup =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Popup, _React$Component);\n\n  function Popup() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Popup.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var _this$props$popupOffs = this.props.popupOffset,\n        popupOffset = _this$props$popupOffs === void 0 ? 5 : _this$props$popupOffs,\n        _getOffset = getOffset(this.refs.root),\n        top = _getOffset.top,\n        left = _getOffset.left,\n        width = _getOffset.width,\n        height = _getOffset.height,\n        viewBottom = window.innerHeight + getScrollTop(window),\n        viewRight = window.innerWidth + getScrollLeft(window),\n        bottom = top + height,\n        right = left + width;\n\n    if (bottom > viewBottom || right > viewRight) {\n      var topOffset, leftOffset;\n      if (bottom > viewBottom) topOffset = bottom - viewBottom + (popupOffset.y || +popupOffset || 0);\n      if (right > viewRight) leftOffset = right - viewRight + (popupOffset.x || +popupOffset || 0);\n      this.setState({\n        topOffset: topOffset,\n        leftOffset: leftOffset\n      }); //eslint-disable-line\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        events$$1 = _this$props.events,\n        selected = _this$props.selected,\n        getters = _this$props.getters,\n        accessors = _this$props.accessors,\n        components = _this$props.components,\n        onSelect = _this$props.onSelect,\n        onDoubleClick = _this$props.onDoubleClick,\n        slotStart = _this$props.slotStart,\n        slotEnd = _this$props.slotEnd,\n        localizer = _this$props.localizer;\n    var _this$props$position = this.props.position,\n        left = _this$props$position.left,\n        width = _this$props$position.width,\n        top = _this$props$position.top,\n        topOffset = (this.state || {}).topOffset || 0,\n        leftOffset = (this.state || {}).leftOffset || 0;\n    var style = {\n      top: Math.max(0, top - topOffset),\n      left: left - leftOffset,\n      minWidth: width + width / 2\n    };\n    return React.createElement(\"div\", {\n      ref: \"root\",\n      style: style,\n      className: \"rbc-overlay\"\n    }, React.createElement(\"div\", {\n      className: \"rbc-overlay-header\"\n    }, localizer.format(slotStart, 'dayHeaderFormat')), events$$1.map(function (event, idx) {\n      return React.createElement(EventCell, {\n        key: idx,\n        type: \"popup\",\n        event: event,\n        getters: getters,\n        onSelect: onSelect,\n        accessors: accessors,\n        components: components,\n        onDoubleClick: onDoubleClick,\n        continuesPrior: dates.lt(accessors.end(event), slotStart, 'day'),\n        continuesAfter: dates.gte(accessors.start(event), slotEnd, 'day'),\n        selected: isSelected(event, selected)\n      });\n    }));\n  };\n\n  return Popup;\n}(React.Component);\n\nPopup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  position: PropTypes.object,\n  popupOffset: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    x: PropTypes.number,\n    y: PropTypes.number\n  })]),\n  events: PropTypes.array,\n  selected: PropTypes.object,\n  accessors: PropTypes.object.isRequired,\n  components: PropTypes.object.isRequired,\n  getters: PropTypes.object.isRequired,\n  localizer: PropTypes.object.isRequired,\n  onSelect: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  slotStart: PropTypes.instanceOf(Date),\n  slotEnd: PropTypes.number\n} : {};\n\nfunction addEventListener(type, handler, target) {\n  if (target === void 0) {\n    target = document;\n  }\n\n  events.on(target, type, handler, {\n    passive: false\n  });\n  return {\n    remove: function remove() {\n      events.off(target, type, handler);\n    }\n  };\n}\n\nfunction isOverContainer(container, x, y) {\n  return !container || contains(container, document.elementFromPoint(x, y));\n}\n\nfunction getEventNodeFromPoint(node, _ref) {\n  var clientX = _ref.clientX,\n      clientY = _ref.clientY;\n  var target = document.elementFromPoint(clientX, clientY);\n  return closest(target, '.rbc-event', node);\n}\n\nfunction isEvent(node, bounds) {\n  return !!getEventNodeFromPoint(node, bounds);\n}\n\nfunction getEventCoordinates(e) {\n  var target = e;\n\n  if (e.touches && e.touches.length) {\n    target = e.touches[0];\n  }\n\n  return {\n    clientX: target.clientX,\n    clientY: target.clientY,\n    pageX: target.pageX,\n    pageY: target.pageY\n  };\n}\n\nvar clickTolerance = 5;\nvar clickInterval = 250;\n\nvar Selection =\n/*#__PURE__*/\nfunction () {\n  function Selection(node, _temp) {\n    var _ref2 = _temp === void 0 ? {} : _temp,\n        _ref2$global = _ref2.global,\n        global = _ref2$global === void 0 ? false : _ref2$global,\n        _ref2$longPressThresh = _ref2.longPressThreshold,\n        longPressThreshold = _ref2$longPressThresh === void 0 ? 250 : _ref2$longPressThresh;\n\n    this.container = node;\n    this.globalMouse = !node || global;\n    this.longPressThreshold = longPressThreshold;\n    this._listeners = Object.create(null);\n    this._handleInitialEvent = this._handleInitialEvent.bind(this);\n    this._handleMoveEvent = this._handleMoveEvent.bind(this);\n    this._handleTerminatingEvent = this._handleTerminatingEvent.bind(this);\n    this._keyListener = this._keyListener.bind(this); // Fixes an iOS 10 bug where scrolling could not be prevented on the window.\n    // https://github.com/metafizzy/flickity/issues/457#issuecomment-254501356\n\n    this._onTouchMoveWindowListener = addEventListener('touchmove', function () {}, window);\n    this._onKeyDownListener = addEventListener('keydown', this._keyListener);\n    this._onKeyUpListener = addEventListener('keyup', this._keyListener);\n\n    this._addInitialEventListener();\n  }\n\n  var _proto = Selection.prototype;\n\n  _proto.on = function on(type, handler) {\n    var handlers = this._listeners[type] || (this._listeners[type] = []);\n    handlers.push(handler);\n    return {\n      remove: function remove() {\n        var idx = handlers.indexOf(handler);\n        if (idx !== -1) handlers.splice(idx, 1);\n      }\n    };\n  };\n\n  _proto.emit = function emit(type) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    var result;\n    var handlers = this._listeners[type] || [];\n    handlers.forEach(function (fn) {\n      if (result === undefined) result = fn.apply(void 0, args);\n    });\n    return result;\n  };\n\n  _proto.teardown = function teardown() {\n    this.listeners = Object.create(null);\n    this._onTouchMoveWindowListener && this._onTouchMoveWindowListener.remove();\n    this._onInitialEventListener && this._onInitialEventListener.remove();\n    this._onEndListener && this._onEndListener.remove();\n    this._onEscListener && this._onEscListener.remove();\n    this._onMoveListener && this._onMoveListener.remove();\n    this._onKeyUpListener && this._onKeyUpListener.remove();\n    this._onKeyDownListener && this._onKeyDownListener.remove();\n  };\n\n  _proto.isSelected = function isSelected(node) {\n    var box = this._selectRect;\n    if (!box || !this.selecting) return false;\n    return objectsCollide(box, getBoundsForNode(node));\n  };\n\n  _proto.filter = function filter(items) {\n    var box = this._selectRect; //not selecting\n\n    if (!box || !this.selecting) return [];\n    return items.filter(this.isSelected, this);\n  }; // Adds a listener that will call the handler only after the user has pressed on the screen\n  // without moving their finger for 250ms.\n\n\n  _proto._addLongPressListener = function _addLongPressListener(handler, initialEvent) {\n    var _this = this;\n\n    var timer = null;\n    var touchMoveListener = null;\n    var touchEndListener = null;\n\n    var handleTouchStart = function handleTouchStart(initialEvent) {\n      timer = setTimeout(function () {\n        cleanup();\n        handler(initialEvent);\n      }, _this.longPressThreshold);\n      touchMoveListener = addEventListener('touchmove', function () {\n        return cleanup();\n      });\n      touchEndListener = addEventListener('touchend', function () {\n        return cleanup();\n      });\n    };\n\n    var touchStartListener = addEventListener('touchstart', handleTouchStart);\n\n    var cleanup = function cleanup() {\n      if (timer) {\n        clearTimeout(timer);\n      }\n\n      if (touchMoveListener) {\n        touchMoveListener.remove();\n      }\n\n      if (touchEndListener) {\n        touchEndListener.remove();\n      }\n\n      timer = null;\n      touchMoveListener = null;\n      touchEndListener = null;\n    };\n\n    if (initialEvent) {\n      handleTouchStart(initialEvent);\n    }\n\n    return {\n      remove: function remove() {\n        cleanup();\n        touchStartListener.remove();\n      }\n    };\n  }; // Listen for mousedown and touchstart events. When one is received, disable the other and setup\n  // future event handling based on the type of event.\n\n\n  _proto._addInitialEventListener = function _addInitialEventListener() {\n    var _this2 = this;\n\n    var mouseDownListener = addEventListener('mousedown', function (e) {\n      _this2._onInitialEventListener.remove();\n\n      _this2._handleInitialEvent(e);\n\n      _this2._onInitialEventListener = addEventListener('mousedown', _this2._handleInitialEvent);\n    });\n    var touchStartListener = addEventListener('touchstart', function (e) {\n      _this2._onInitialEventListener.remove();\n\n      _this2._onInitialEventListener = _this2._addLongPressListener(_this2._handleInitialEvent, e);\n    });\n    this._onInitialEventListener = {\n      remove: function remove() {\n        mouseDownListener.remove();\n        touchStartListener.remove();\n      }\n    };\n  };\n\n  _proto._handleInitialEvent = function _handleInitialEvent(e) {\n    var _getEventCoordinates = getEventCoordinates(e),\n        clientX = _getEventCoordinates.clientX,\n        clientY = _getEventCoordinates.clientY,\n        pageX = _getEventCoordinates.pageX,\n        pageY = _getEventCoordinates.pageY;\n\n    var node = this.container(),\n        collides,\n        offsetData; // Right clicks\n\n    if (e.which === 3 || e.button === 2 || !isOverContainer(node, clientX, clientY)) return;\n\n    if (!this.globalMouse && node && !contains(node, e.target)) {\n      var _normalizeDistance = normalizeDistance(0),\n          top = _normalizeDistance.top,\n          left = _normalizeDistance.left,\n          bottom = _normalizeDistance.bottom,\n          right = _normalizeDistance.right;\n\n      offsetData = getBoundsForNode(node);\n      collides = objectsCollide({\n        top: offsetData.top - top,\n        left: offsetData.left - left,\n        bottom: offsetData.bottom + bottom,\n        right: offsetData.right + right\n      }, {\n        top: pageY,\n        left: pageX\n      });\n      if (!collides) return;\n    }\n\n    var result = this.emit('beforeSelect', this._initialEventData = {\n      isTouch: /^touch/.test(e.type),\n      x: pageX,\n      y: pageY,\n      clientX: clientX,\n      clientY: clientY\n    });\n    if (result === false) return;\n\n    switch (e.type) {\n      case 'mousedown':\n        this._onEndListener = addEventListener('mouseup', this._handleTerminatingEvent);\n        this._onEscListener = addEventListener('keydown', this._handleTerminatingEvent);\n        this._onMoveListener = addEventListener('mousemove', this._handleMoveEvent);\n        break;\n\n      case 'touchstart':\n        this._handleMoveEvent(e);\n\n        this._onEndListener = addEventListener('touchend', this._handleTerminatingEvent);\n        this._onMoveListener = addEventListener('touchmove', this._handleMoveEvent);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  _proto._handleTerminatingEvent = function _handleTerminatingEvent(e) {\n    var _getEventCoordinates2 = getEventCoordinates(e),\n        pageX = _getEventCoordinates2.pageX,\n        pageY = _getEventCoordinates2.pageY;\n\n    this.selecting = false;\n    this._onEndListener && this._onEndListener.remove();\n    this._onMoveListener && this._onMoveListener.remove();\n    if (!this._initialEventData) return;\n    var inRoot = !this.container || contains(this.container(), e.target);\n    var bounds = this._selectRect;\n    var click = this.isClick(pageX, pageY);\n    this._initialEventData = null;\n\n    if (e.key === 'Escape') {\n      return this.emit('reset');\n    }\n\n    if (!inRoot) {\n      return this.emit('reset');\n    }\n\n    if (click && inRoot) {\n      return this._handleClickEvent(e);\n    } // User drag-clicked in the Selectable area\n\n\n    if (!click) return this.emit('select', bounds);\n  };\n\n  _proto._handleClickEvent = function _handleClickEvent(e) {\n    var _getEventCoordinates3 = getEventCoordinates(e),\n        pageX = _getEventCoordinates3.pageX,\n        pageY = _getEventCoordinates3.pageY,\n        clientX = _getEventCoordinates3.clientX,\n        clientY = _getEventCoordinates3.clientY;\n\n    var now = new Date().getTime();\n\n    if (this._lastClickData && now - this._lastClickData.timestamp < clickInterval) {\n      // Double click event\n      this._lastClickData = null;\n      return this.emit('doubleClick', {\n        x: pageX,\n        y: pageY,\n        clientX: clientX,\n        clientY: clientY\n      });\n    } // Click event\n\n\n    this._lastClickData = {\n      timestamp: now\n    };\n    return this.emit('click', {\n      x: pageX,\n      y: pageY,\n      clientX: clientX,\n      clientY: clientY\n    });\n  };\n\n  _proto._handleMoveEvent = function _handleMoveEvent(e) {\n    if (this._initialEventData === null) {\n      return;\n    }\n\n    var _this$_initialEventDa = this._initialEventData,\n        x = _this$_initialEventDa.x,\n        y = _this$_initialEventDa.y;\n\n    var _getEventCoordinates4 = getEventCoordinates(e),\n        pageX = _getEventCoordinates4.pageX,\n        pageY = _getEventCoordinates4.pageY;\n\n    var w = Math.abs(x - pageX);\n    var h = Math.abs(y - pageY);\n    var left = Math.min(pageX, x),\n        top = Math.min(pageY, y),\n        old = this.selecting; // Prevent emitting selectStart event until mouse is moved.\n    // in Chrome on Windows, mouseMove event may be fired just after mouseDown event.\n\n    if (this.isClick(pageX, pageY) && !old && !(w || h)) {\n      return;\n    }\n\n    this.selecting = true;\n    this._selectRect = {\n      top: top,\n      left: left,\n      x: pageX,\n      y: pageY,\n      right: left + w,\n      bottom: top + h\n    };\n\n    if (!old) {\n      this.emit('selectStart', this._initialEventData);\n    }\n\n    if (!this.isClick(pageX, pageY)) this.emit('selecting', this._selectRect);\n    e.preventDefault();\n  };\n\n  _proto._keyListener = function _keyListener(e) {\n    this.ctrl = e.metaKey || e.ctrlKey;\n  };\n\n  _proto.isClick = function isClick(pageX, pageY) {\n    var _this$_initialEventDa2 = this._initialEventData,\n        x = _this$_initialEventDa2.x,\n        y = _this$_initialEventDa2.y,\n        isTouch = _this$_initialEventDa2.isTouch;\n    return !isTouch && Math.abs(pageX - x) <= clickTolerance && Math.abs(pageY - y) <= clickTolerance;\n  };\n\n  return Selection;\n}();\n/**\n * Resolve the disance prop from either an Int or an Object\n * @return {Object}\n */\n\n\nfunction normalizeDistance(distance) {\n  if (distance === void 0) {\n    distance = 0;\n  }\n\n  if (typeof distance !== 'object') distance = {\n    top: distance,\n    left: distance,\n    right: distance,\n    bottom: distance\n  };\n  return distance;\n}\n/**\n * Given two objects containing \"top\", \"left\", \"offsetWidth\" and \"offsetHeight\"\n * properties, determine if they collide.\n * @param  {Object|HTMLElement} a\n * @param  {Object|HTMLElement} b\n * @return {bool}\n */\n\n\nfunction objectsCollide(nodeA, nodeB, tolerance) {\n  if (tolerance === void 0) {\n    tolerance = 0;\n  }\n\n  var _getBoundsForNode = getBoundsForNode(nodeA),\n      aTop = _getBoundsForNode.top,\n      aLeft = _getBoundsForNode.left,\n      _getBoundsForNode$rig = _getBoundsForNode.right,\n      aRight = _getBoundsForNode$rig === void 0 ? aLeft : _getBoundsForNode$rig,\n      _getBoundsForNode$bot = _getBoundsForNode.bottom,\n      aBottom = _getBoundsForNode$bot === void 0 ? aTop : _getBoundsForNode$bot;\n\n  var _getBoundsForNode2 = getBoundsForNode(nodeB),\n      bTop = _getBoundsForNode2.top,\n      bLeft = _getBoundsForNode2.left,\n      _getBoundsForNode2$ri = _getBoundsForNode2.right,\n      bRight = _getBoundsForNode2$ri === void 0 ? bLeft : _getBoundsForNode2$ri,\n      _getBoundsForNode2$bo = _getBoundsForNode2.bottom,\n      bBottom = _getBoundsForNode2$bo === void 0 ? bTop : _getBoundsForNode2$bo;\n\n  return !( // 'a' bottom doesn't touch 'b' top\n  aBottom - tolerance < bTop || // 'a' top doesn't touch 'b' bottom\n  aTop + tolerance > bBottom || // 'a' right doesn't touch 'b' left\n  aRight - tolerance < bLeft || // 'a' left doesn't touch 'b' right\n  aLeft + tolerance > bRight);\n}\n/**\n * Given a node, get everything needed to calculate its boundaries\n * @param  {HTMLElement} node\n * @return {Object}\n */\n\n\nfunction getBoundsForNode(node) {\n  if (!node.getBoundingClientRect) return node;\n  var rect = node.getBoundingClientRect(),\n      left = rect.left + pageOffset('left'),\n      top = rect.top + pageOffset('top');\n  return {\n    top: top,\n    left: left,\n    right: (node.offsetWidth || 0) + left,\n    bottom: (node.offsetHeight || 0) + top\n  };\n}\n\nfunction pageOffset(dir) {\n  if (dir === 'left') return window.pageXOffset || document.body.scrollLeft || 0;\n  if (dir === 'top') return window.pageYOffset || document.body.scrollTop || 0;\n}\n\nvar BackgroundCells =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(BackgroundCells, _React$Component);\n\n  function BackgroundCells(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n    _this.state = {\n      selecting: false\n    };\n    return _this;\n  }\n\n  var _proto = BackgroundCells.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.props.selectable && this._selectable();\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this._teardownSelectable();\n  };\n\n  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (nextProps.selectable && !this.props.selectable) this._selectable();\n    if (!nextProps.selectable && this.props.selectable) this._teardownSelectable();\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        range$$1 = _this$props.range,\n        getNow = _this$props.getNow,\n        getters = _this$props.getters,\n        currentDate = _this$props.date,\n        Wrapper = _this$props.components.dateCellWrapper;\n    var _this$state = this.state,\n        selecting = _this$state.selecting,\n        startIdx = _this$state.startIdx,\n        endIdx = _this$state.endIdx;\n    var current = getNow();\n    return React.createElement(\"div\", {\n      className: \"rbc-row-bg\"\n    }, range$$1.map(function (date, index) {\n      var selected = selecting && index >= startIdx && index <= endIdx;\n\n      var _getters$dayProp = getters.dayProp(date),\n          className = _getters$dayProp.className,\n          style = _getters$dayProp.style;\n\n      return React.createElement(Wrapper, {\n        key: index,\n        value: date,\n        range: range$$1\n      }, React.createElement(\"div\", {\n        style: style,\n        className: cn('rbc-day-bg', className, selected && 'rbc-selected-cell', dates.eq(date, current, 'day') && 'rbc-today', currentDate && dates.month(currentDate) !== dates.month(date) && 'rbc-off-range-bg')\n      }));\n    }));\n  };\n\n  _proto._selectable = function _selectable() {\n    var _this2 = this;\n\n    var node = findDOMNode(this);\n    var selector = this._selector = new Selection(this.props.container, {\n      longPressThreshold: this.props.longPressThreshold\n    });\n\n    var selectorClicksHandler = function selectorClicksHandler(point, actionType) {\n      if (!isEvent(findDOMNode(_this2), point)) {\n        var rowBox = getBoundsForNode(node);\n        var _this2$props = _this2.props,\n            range$$1 = _this2$props.range,\n            rtl = _this2$props.rtl;\n\n        if (pointInBox(rowBox, point)) {\n          var currentCell = getSlotAtX(rowBox, point.x, rtl, range$$1.length);\n\n          _this2._selectSlot({\n            startIdx: currentCell,\n            endIdx: currentCell,\n            action: actionType,\n            box: point\n          });\n        }\n      }\n\n      _this2._initial = {};\n\n      _this2.setState({\n        selecting: false\n      });\n    };\n\n    selector.on('selecting', function (box) {\n      var _this2$props2 = _this2.props,\n          range$$1 = _this2$props2.range,\n          rtl = _this2$props2.rtl;\n      var startIdx = -1;\n      var endIdx = -1;\n\n      if (!_this2.state.selecting) {\n        notify(_this2.props.onSelectStart, [box]);\n        _this2._initial = {\n          x: box.x,\n          y: box.y\n        };\n      }\n\n      if (selector.isSelected(node)) {\n        var nodeBox = getBoundsForNode(node);\n\n        var _dateCellSelection = dateCellSelection(_this2._initial, nodeBox, box, range$$1.length, rtl);\n\n        startIdx = _dateCellSelection.startIdx;\n        endIdx = _dateCellSelection.endIdx;\n      }\n\n      _this2.setState({\n        selecting: true,\n        startIdx: startIdx,\n        endIdx: endIdx\n      });\n    });\n    selector.on('beforeSelect', function (box) {\n      if (_this2.props.selectable !== 'ignoreEvents') return;\n      return !isEvent(findDOMNode(_this2), box);\n    });\n    selector.on('click', function (point) {\n      return selectorClicksHandler(point, 'click');\n    });\n    selector.on('doubleClick', function (point) {\n      return selectorClicksHandler(point, 'doubleClick');\n    });\n    selector.on('select', function (bounds) {\n      _this2._selectSlot(_extends({}, _this2.state, {\n        action: 'select',\n        bounds: bounds\n      }));\n\n      _this2._initial = {};\n\n      _this2.setState({\n        selecting: false\n      });\n\n      notify(_this2.props.onSelectEnd, [_this2.state]);\n    });\n  };\n\n  _proto._teardownSelectable = function _teardownSelectable() {\n    if (!this._selector) return;\n\n    this._selector.teardown();\n\n    this._selector = null;\n  };\n\n  _proto._selectSlot = function _selectSlot(_ref) {\n    var endIdx = _ref.endIdx,\n        startIdx = _ref.startIdx,\n        action = _ref.action,\n        bounds = _ref.bounds,\n        box = _ref.box;\n    if (endIdx !== -1 && startIdx !== -1) this.props.onSelectSlot && this.props.onSelectSlot({\n      start: startIdx,\n      end: endIdx,\n      action: action,\n      bounds: bounds,\n      box: box\n    });\n  };\n\n  return BackgroundCells;\n}(React.Component);\n\nBackgroundCells.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  date: PropTypes.instanceOf(Date),\n  getNow: PropTypes.func.isRequired,\n  getters: PropTypes.object.isRequired,\n  components: PropTypes.object.isRequired,\n  container: PropTypes.func,\n  dayPropGetter: PropTypes.func,\n  selectable: PropTypes.oneOf([true, false, 'ignoreEvents']),\n  longPressThreshold: PropTypes.number,\n  onSelectSlot: PropTypes.func.isRequired,\n  onSelectEnd: PropTypes.func,\n  onSelectStart: PropTypes.func,\n  range: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  rtl: PropTypes.bool,\n  type: PropTypes.string\n} : {};\n/* eslint-disable react/prop-types */\n\nvar EventRowMixin = {\n  propTypes: {\n    slotMetrics: PropTypes.object.isRequired,\n    selected: PropTypes.object,\n    isAllDay: PropTypes.bool,\n    accessors: PropTypes.object.isRequired,\n    localizer: PropTypes.object.isRequired,\n    components: PropTypes.object.isRequired,\n    getters: PropTypes.object.isRequired,\n    onSelect: PropTypes.func,\n    onDoubleClick: PropTypes.func\n  },\n  defaultProps: {\n    segments: [],\n    selected: {}\n  },\n  renderEvent: function renderEvent(props, event) {\n    var selected = props.selected,\n        _ = props.isAllDay,\n        accessors = props.accessors,\n        getters = props.getters,\n        onSelect = props.onSelect,\n        onDoubleClick = props.onDoubleClick,\n        localizer = props.localizer,\n        slotMetrics = props.slotMetrics,\n        components = props.components;\n    var continuesPrior = slotMetrics.continuesPrior(event);\n    var continuesAfter = slotMetrics.continuesAfter(event);\n    return React.createElement(EventCell, {\n      event: event,\n      getters: getters,\n      localizer: localizer,\n      accessors: accessors,\n      components: components,\n      onSelect: onSelect,\n      onDoubleClick: onDoubleClick,\n      continuesPrior: continuesPrior,\n      continuesAfter: continuesAfter,\n      selected: isSelected(event, selected)\n    });\n  },\n  renderSpan: function renderSpan(slots, len, key, content) {\n    if (content === void 0) {\n      content = ' ';\n    }\n\n    var per = Math.abs(len) / slots * 100 + '%';\n    return React.createElement(\"div\", {\n      key: key,\n      className: \"rbc-row-segment\" // IE10/11 need max-width. flex-basis doesn't respect box-sizing\n      ,\n      style: {\n        WebkitFlexBasis: per,\n        flexBasis: per,\n        maxWidth: per\n      }\n    }, content);\n  }\n};\n\nvar EventRow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(EventRow, _React$Component);\n\n  function EventRow() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = EventRow.prototype;\n\n  _proto.render = function render() {\n    var _this = this;\n\n    var _this$props = this.props,\n        segments = _this$props.segments,\n        slots = _this$props.slotMetrics.slots,\n        className = _this$props.className;\n    var lastEnd = 1;\n    return React.createElement(\"div\", {\n      className: cn(className, 'rbc-row')\n    }, segments.reduce(function (row, _ref, li) {\n      var event = _ref.event,\n          left = _ref.left,\n          right = _ref.right,\n          span = _ref.span;\n      var key = '_lvl_' + li;\n      var gap = left - lastEnd;\n      var content = EventRowMixin.renderEvent(_this.props, event);\n      if (gap) row.push(EventRowMixin.renderSpan(slots, gap, key + \"_gap\"));\n      row.push(EventRowMixin.renderSpan(slots, span, key, content));\n      lastEnd = right + 1;\n      return row;\n    }, []));\n  };\n\n  return EventRow;\n}(React.Component);\n\nEventRow.propTypes = process.env.NODE_ENV !== \"production\" ? _extends({\n  segments: PropTypes.array\n}, EventRowMixin.propTypes) : {};\nEventRow.defaultProps = _extends({}, EventRowMixin.defaultProps);\n\nfunction endOfRange(dateRange, unit) {\n  if (unit === void 0) {\n    unit = 'day';\n  }\n\n  return {\n    first: dateRange[0],\n    last: dates.add(dateRange[dateRange.length - 1], 1, unit)\n  };\n}\n\nfunction eventSegments(event, range$$1, accessors) {\n  var _endOfRange = endOfRange(range$$1),\n      first = _endOfRange.first,\n      last = _endOfRange.last;\n\n  var slots = dates.diff(first, last, 'day');\n  var start = dates.max(dates.startOf(accessors.start(event), 'day'), first);\n  var end = dates.min(dates.ceil(accessors.end(event), 'day'), last);\n  var padding = findIndex(range$$1, function (x) {\n    return dates.eq(x, start, 'day');\n  });\n  var span = dates.diff(start, end, 'day');\n  span = Math.min(span, slots);\n  span = Math.max(span, 1);\n  return {\n    event: event,\n    span: span,\n    left: padding + 1,\n    right: Math.max(padding + span, 1)\n  };\n}\n\nfunction eventLevels(rowSegments, limit) {\n  if (limit === void 0) {\n    limit = Infinity;\n  }\n\n  var i,\n      j,\n      seg,\n      levels = [],\n      extra = [];\n\n  for (i = 0; i < rowSegments.length; i++) {\n    seg = rowSegments[i];\n\n    for (j = 0; j < levels.length; j++) {\n      if (!segsOverlap(seg, levels[j])) break;\n    }\n\n    if (j >= limit) {\n      extra.push(seg);\n    } else {\n      (levels[j] || (levels[j] = [])).push(seg);\n    }\n  }\n\n  for (i = 0; i < levels.length; i++) {\n    levels[i].sort(function (a, b) {\n      return a.left - b.left;\n    }); //eslint-disable-line\n  }\n\n  return {\n    levels: levels,\n    extra: extra\n  };\n}\n\nfunction inRange(e, start, end, accessors) {\n  var eStart = dates.startOf(accessors.start(e), 'day');\n  var eEnd = accessors.end(e);\n  var startsBeforeEnd = dates.lte(eStart, end, 'day'); // when the event is zero duration we need to handle a bit differently\n\n  var endsAfterStart = !dates.eq(eStart, eEnd, 'minutes') ? dates.gt(eEnd, start, 'minutes') : dates.gte(eEnd, start, 'minutes');\n  return startsBeforeEnd && endsAfterStart;\n}\n\nfunction segsOverlap(seg, otherSegs) {\n  return otherSegs.some(function (otherSeg) {\n    return otherSeg.left <= seg.right && otherSeg.right >= seg.left;\n  });\n}\n\nfunction sortEvents(evtA, evtB, accessors) {\n  var startSort = +dates.startOf(accessors.start(evtA), 'day') - +dates.startOf(accessors.start(evtB), 'day');\n  var durA = dates.diff(accessors.start(evtA), dates.ceil(accessors.end(evtA), 'day'), 'day');\n  var durB = dates.diff(accessors.start(evtB), dates.ceil(accessors.end(evtB), 'day'), 'day');\n  return startSort || // sort by start Day first\n  Math.max(durB, 1) - Math.max(durA, 1) || // events spanning multiple days go first\n  !!accessors.allDay(evtB) - !!accessors.allDay(evtA) || // then allDay single day events\n  +accessors.start(evtA) - +accessors.start(evtB); // then sort by start time\n}\n\nvar isSegmentInSlot = function isSegmentInSlot(seg, slot) {\n  return seg.left <= slot && seg.right >= slot;\n};\n\nvar eventsInSlot = function eventsInSlot(segments, slot) {\n  return segments.filter(function (seg) {\n    return isSegmentInSlot(seg, slot);\n  }).length;\n};\n\nvar EventEndingRow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(EventEndingRow, _React$Component);\n\n  function EventEndingRow() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = EventEndingRow.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        segments = _this$props.segments,\n        slots = _this$props.slotMetrics.slots;\n    var rowSegments = eventLevels(segments).levels[0];\n    var current = 1,\n        lastEnd = 1,\n        row = [];\n\n    while (current <= slots) {\n      var key = '_lvl_' + current;\n\n      var _ref = rowSegments.filter(function (seg) {\n        return isSegmentInSlot(seg, current);\n      })[0] || {},\n          event = _ref.event,\n          left = _ref.left,\n          right = _ref.right,\n          span = _ref.span; //eslint-disable-line\n\n\n      if (!event) {\n        current++;\n        continue;\n      }\n\n      var gap = Math.max(0, left - lastEnd);\n\n      if (this.canRenderSlotEvent(left, span)) {\n        var content = EventRowMixin.renderEvent(this.props, event);\n\n        if (gap) {\n          row.push(EventRowMixin.renderSpan(slots, gap, key + '_gap'));\n        }\n\n        row.push(EventRowMixin.renderSpan(slots, span, key, content));\n        lastEnd = current = right + 1;\n      } else {\n        if (gap) {\n          row.push(EventRowMixin.renderSpan(slots, gap, key + '_gap'));\n        }\n\n        row.push(EventRowMixin.renderSpan(slots, 1, key, this.renderShowMore(segments, current)));\n        lastEnd = current = current + 1;\n      }\n    }\n\n    return React.createElement(\"div\", {\n      className: \"rbc-row\"\n    }, row);\n  };\n\n  _proto.canRenderSlotEvent = function canRenderSlotEvent(slot, span) {\n    var segments = this.props.segments;\n    return range(slot, slot + span).every(function (s) {\n      var count = eventsInSlot(segments, s);\n      return count === 1;\n    });\n  };\n\n  _proto.renderShowMore = function renderShowMore(segments, slot) {\n    var _this = this;\n\n    var localizer = this.props.localizer;\n    var count = eventsInSlot(segments, slot);\n    return count ? React.createElement(\"a\", {\n      key: 'sm_' + slot,\n      href: \"#\",\n      className: 'rbc-show-more',\n      onClick: function onClick(e) {\n        return _this.showMore(slot, e);\n      }\n    }, localizer.messages.showMore(count)) : false;\n  };\n\n  _proto.showMore = function showMore(slot, e) {\n    e.preventDefault();\n    this.props.onShowMore(slot);\n  };\n\n  return EventEndingRow;\n}(React.Component);\n\nEventEndingRow.propTypes = process.env.NODE_ENV !== \"production\" ? _extends({\n  segments: PropTypes.array,\n  slots: PropTypes.number,\n  onShowMore: PropTypes.func\n}, EventRowMixin.propTypes) : {};\nEventEndingRow.defaultProps = _extends({}, EventRowMixin.defaultProps);\n\nvar isSegmentInSlot$1 = function isSegmentInSlot(seg, slot) {\n  return seg.left <= slot && seg.right >= slot;\n};\n\nvar isEqual = function isEqual(a, b) {\n  return a.range === b.range && a.events === b.events;\n};\n\nfunction getSlotMetrics() {\n  return memoize(function (options) {\n    var range$$1 = options.range,\n        events$$1 = options.events,\n        maxRows = options.maxRows,\n        minRows = options.minRows,\n        accessors = options.accessors;\n\n    var _endOfRange = endOfRange(range$$1),\n        first = _endOfRange.first,\n        last = _endOfRange.last;\n\n    var segments = events$$1.map(function (evt) {\n      return eventSegments(evt, range$$1, accessors);\n    });\n\n    var _eventLevels = eventLevels(segments, Math.max(maxRows - 1, 1)),\n        levels = _eventLevels.levels,\n        extra = _eventLevels.extra;\n\n    while (levels.length < minRows) {\n      levels.push([]);\n    }\n\n    return {\n      first: first,\n      last: last,\n      levels: levels,\n      extra: extra,\n      range: range$$1,\n      slots: range$$1.length,\n      clone: function clone(args) {\n        var metrics = getSlotMetrics();\n        return metrics(_extends({}, options, args));\n      },\n      getDateForSlot: function getDateForSlot(slotNumber) {\n        return range$$1[slotNumber];\n      },\n      getSlotForDate: function getSlotForDate(date) {\n        return range$$1.find(function (r) {\n          return dates.eq(r, date, 'day');\n        });\n      },\n      getEventsForSlot: function getEventsForSlot(slot) {\n        return segments.filter(function (seg) {\n          return isSegmentInSlot$1(seg, slot);\n        }).map(function (seg) {\n          return seg.event;\n        });\n      },\n      continuesPrior: function continuesPrior(event) {\n        return dates.lt(accessors.start(event), first, 'day');\n      },\n      continuesAfter: function continuesAfter(event) {\n        var eventEnd = accessors.end(event);\n        var singleDayDuration = dates.eq(accessors.start(event), eventEnd, 'minutes');\n        return singleDayDuration ? dates.gte(eventEnd, last, 'minutes') : dates.gt(eventEnd, last, 'minutes');\n      }\n    };\n  }, isEqual);\n}\n\nvar DateContentRow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(DateContentRow, _React$Component);\n\n  function DateContentRow() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _this.handleSelectSlot = function (slot) {\n      var _this$props = _this.props,\n          range$$1 = _this$props.range,\n          onSelectSlot = _this$props.onSelectSlot;\n      onSelectSlot(range$$1.slice(slot.start, slot.end + 1), slot);\n    };\n\n    _this.handleShowMore = function (slot) {\n      var _this$props2 = _this.props,\n          range$$1 = _this$props2.range,\n          onShowMore = _this$props2.onShowMore;\n\n      var metrics = _this.slotMetrics(_this.props);\n\n      var row = qsa(findDOMNode(_assertThisInitialized(_assertThisInitialized(_this))), '.rbc-row-bg')[0];\n      var cell;\n      if (row) cell = row.children[slot - 1];\n      var events$$1 = metrics.getEventsForSlot(slot);\n      onShowMore(events$$1, range$$1[slot - 1], cell, slot);\n    };\n\n    _this.createHeadingRef = function (r) {\n      _this.headingRow = r;\n    };\n\n    _this.createEventRef = function (r) {\n      _this.eventRow = r;\n    };\n\n    _this.getContainer = function () {\n      var container = _this.props.container;\n      return container ? container() : findDOMNode(_assertThisInitialized(_assertThisInitialized(_this)));\n    };\n\n    _this.renderHeadingCell = function (date, index) {\n      var _this$props3 = _this.props,\n          renderHeader = _this$props3.renderHeader,\n          getNow = _this$props3.getNow;\n      return renderHeader({\n        date: date,\n        key: \"header_\" + index,\n        className: cn('rbc-date-cell', dates.eq(date, getNow(), 'day') && 'rbc-now')\n      });\n    };\n\n    _this.renderDummy = function () {\n      var _this$props4 = _this.props,\n          className = _this$props4.className,\n          range$$1 = _this$props4.range,\n          renderHeader = _this$props4.renderHeader;\n      return React.createElement(\"div\", {\n        className: className\n      }, React.createElement(\"div\", {\n        className: \"rbc-row-content\"\n      }, renderHeader && React.createElement(\"div\", {\n        className: \"rbc-row\",\n        ref: _this.createHeadingRef\n      }, range$$1.map(_this.renderHeadingCell)), React.createElement(\"div\", {\n        className: \"rbc-row\",\n        ref: _this.createEventRef\n      }, React.createElement(\"div\", {\n        className: \"rbc-row-segment\"\n      }, React.createElement(\"div\", {\n        className: \"rbc-event\"\n      }, React.createElement(\"div\", {\n        className: \"rbc-event-content\"\n      }, \"\\xA0\"))))));\n    };\n\n    _this.slotMetrics = getSlotMetrics();\n    return _this;\n  }\n\n  var _proto = DateContentRow.prototype;\n\n  _proto.getRowLimit = function getRowLimit() {\n    var eventHeight = getHeight(this.eventRow);\n    var headingHeight = this.headingRow ? getHeight(this.headingRow) : 0;\n    var eventSpace = getHeight(findDOMNode(this)) - headingHeight;\n    return Math.max(Math.floor(eventSpace / eventHeight), 1);\n  };\n\n  _proto.render = function render() {\n    var _this$props5 = this.props,\n        date = _this$props5.date,\n        rtl = _this$props5.rtl,\n        range$$1 = _this$props5.range,\n        className = _this$props5.className,\n        selected = _this$props5.selected,\n        selectable = _this$props5.selectable,\n        renderForMeasure = _this$props5.renderForMeasure,\n        accessors = _this$props5.accessors,\n        getters = _this$props5.getters,\n        components = _this$props5.components,\n        getNow = _this$props5.getNow,\n        renderHeader = _this$props5.renderHeader,\n        onSelect = _this$props5.onSelect,\n        localizer = _this$props5.localizer,\n        onSelectStart = _this$props5.onSelectStart,\n        onSelectEnd = _this$props5.onSelectEnd,\n        onDoubleClick = _this$props5.onDoubleClick,\n        resourceId = _this$props5.resourceId,\n        longPressThreshold = _this$props5.longPressThreshold,\n        isAllDay = _this$props5.isAllDay;\n    if (renderForMeasure) return this.renderDummy();\n    var metrics = this.slotMetrics(this.props);\n    var levels = metrics.levels,\n        extra = metrics.extra;\n    var WeekWrapper = components.weekWrapper;\n    var eventRowProps = {\n      selected: selected,\n      accessors: accessors,\n      getters: getters,\n      localizer: localizer,\n      components: components,\n      onSelect: onSelect,\n      onDoubleClick: onDoubleClick,\n      resourceId: resourceId,\n      slotMetrics: metrics\n    };\n    return React.createElement(\"div\", {\n      className: className\n    }, React.createElement(BackgroundCells, {\n      date: date,\n      getNow: getNow,\n      rtl: rtl,\n      range: range$$1,\n      selectable: selectable,\n      container: this.getContainer,\n      getters: getters,\n      onSelectStart: onSelectStart,\n      onSelectEnd: onSelectEnd,\n      onSelectSlot: this.handleSelectSlot,\n      components: components,\n      longPressThreshold: longPressThreshold\n    }), React.createElement(\"div\", {\n      className: \"rbc-row-content\"\n    }, renderHeader && React.createElement(\"div\", {\n      className: \"rbc-row \",\n      ref: this.createHeadingRef\n    }, range$$1.map(this.renderHeadingCell)), React.createElement(WeekWrapper, _extends({\n      isAllDay: isAllDay\n    }, eventRowProps), levels.map(function (segs, idx) {\n      return React.createElement(EventRow, _extends({\n        key: idx,\n        segments: segs\n      }, eventRowProps));\n    }), !!extra.length && React.createElement(EventEndingRow, _extends({\n      segments: extra,\n      onShowMore: this.handleShowMore\n    }, eventRowProps)))));\n  };\n\n  return DateContentRow;\n}(React.Component);\n\nDateContentRow.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  date: PropTypes.instanceOf(Date),\n  events: PropTypes.array.isRequired,\n  range: PropTypes.array.isRequired,\n  rtl: PropTypes.bool,\n  resourceId: PropTypes.any,\n  renderForMeasure: PropTypes.bool,\n  renderHeader: PropTypes.func,\n  container: PropTypes.func,\n  selected: PropTypes.object,\n  selectable: PropTypes.oneOf([true, false, 'ignoreEvents']),\n  longPressThreshold: PropTypes.number,\n  onShowMore: PropTypes.func,\n  onSelectSlot: PropTypes.func,\n  onSelect: PropTypes.func,\n  onSelectEnd: PropTypes.func,\n  onSelectStart: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  dayPropGetter: PropTypes.func,\n  getNow: PropTypes.func.isRequired,\n  isAllDay: PropTypes.bool,\n  accessors: PropTypes.object.isRequired,\n  components: PropTypes.object.isRequired,\n  getters: PropTypes.object.isRequired,\n  localizer: PropTypes.object.isRequired,\n  minRows: PropTypes.number.isRequired,\n  maxRows: PropTypes.number.isRequired\n} : {};\nDateContentRow.defaultProps = {\n  minRows: 0,\n  maxRows: Infinity\n};\n\nvar Header = function Header(_ref) {\n  var label = _ref.label;\n  return React.createElement(\"span\", null, label);\n};\n\nHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  label: PropTypes.node\n} : {};\n\nvar DateHeader = function DateHeader(_ref) {\n  var label = _ref.label,\n      drilldownView = _ref.drilldownView,\n      onDrillDown = _ref.onDrillDown;\n\n  if (!drilldownView) {\n    return React.createElement(\"span\", null, label);\n  }\n\n  return React.createElement(\"a\", {\n    href: \"#\",\n    onClick: onDrillDown\n  }, label);\n};\n\nDateHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  label: PropTypes.node,\n  date: PropTypes.instanceOf(Date),\n  drilldownView: PropTypes.string,\n  onDrillDown: PropTypes.func,\n  isOffRange: PropTypes.bool\n} : {};\n\nvar eventsForWeek = function eventsForWeek(evts, start, end, accessors) {\n  return evts.filter(function (e) {\n    return inRange(e, start, end, accessors);\n  });\n};\n\nvar MonthView =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(MonthView, _React$Component);\n\n  function MonthView() {\n    var _this;\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;\n\n    _this.getContainer = function () {\n      return findDOMNode(_assertThisInitialized(_assertThisInitialized(_this)));\n    };\n\n    _this.renderWeek = function (week, weekIdx) {\n      var _this$props = _this.props,\n          events$$1 = _this$props.events,\n          components = _this$props.components,\n          selectable = _this$props.selectable,\n          getNow = _this$props.getNow,\n          selected = _this$props.selected,\n          date = _this$props.date,\n          localizer = _this$props.localizer,\n          longPressThreshold = _this$props.longPressThreshold,\n          accessors = _this$props.accessors,\n          getters = _this$props.getters;\n      var _this$state = _this.state,\n          needLimitMeasure = _this$state.needLimitMeasure,\n          rowLimit = _this$state.rowLimit;\n      events$$1 = eventsForWeek(events$$1, week[0], week[week.length - 1], accessors);\n      events$$1.sort(function (a, b) {\n        return sortEvents(a, b, accessors);\n      });\n      return React.createElement(DateContentRow, {\n        key: weekIdx,\n        ref: weekIdx === 0 ? 'slotRow' : undefined,\n        container: _this.getContainer,\n        className: \"rbc-month-row\",\n        getNow: getNow,\n        date: date,\n        range: week,\n        events: events$$1,\n        maxRows: rowLimit,\n        selected: selected,\n        selectable: selectable,\n        components: components,\n        accessors: accessors,\n        getters: getters,\n        localizer: localizer,\n        renderHeader: _this.readerDateHeading,\n        renderForMeasure: needLimitMeasure,\n        onShowMore: _this.handleShowMore,\n        onSelect: _this.handleSelectEvent,\n        onDoubleClick: _this.handleDoubleClickEvent,\n        onSelectSlot: _this.handleSelectSlot,\n        longPressThreshold: longPressThreshold,\n        rtl: _this.props.rtl\n      });\n    };\n\n    _this.readerDateHeading = function (_ref) {\n      var date = _ref.date,\n          className = _ref.className,\n          props = _objectWithoutPropertiesLoose(_ref, [\"date\", \"className\"]);\n\n      var _this$props2 = _this.props,\n          currentDate = _this$props2.date,\n          getDrilldownView = _this$props2.getDrilldownView,\n          localizer = _this$props2.localizer;\n      var isOffRange = dates.month(date) !== dates.month(currentDate);\n      var isCurrent = dates.eq(date, currentDate, 'day');\n      var drilldownView = getDrilldownView(date);\n      var label = localizer.format(date, 'dateFormat');\n      var DateHeaderComponent = _this.props.components.dateHeader || DateHeader;\n      return React.createElement(\"div\", _extends({}, props, {\n        className: cn(className, isOffRange && 'rbc-off-range', isCurrent && 'rbc-current')\n      }), React.createElement(DateHeaderComponent, {\n        label: label,\n        date: date,\n        drilldownView: drilldownView,\n        isOffRange: isOffRange,\n        onDrillDown: function onDrillDown(e) {\n          return _this.handleHeadingClick(date, drilldownView, e);\n        }\n      }));\n    };\n\n    _this.handleSelectSlot = function (range$$1, slotInfo) {\n      _this._pendingSelection = _this._pendingSelection.concat(range$$1);\n      clearTimeout(_this._selectTimer);\n      _this._selectTimer = setTimeout(function () {\n        return _this.selectDates(slotInfo);\n      });\n    };\n\n    _this.handleHeadingClick = function (date, view, e) {\n      e.preventDefault();\n\n      _this.clearSelection();\n\n      notify(_this.props.onDrillDown, [date, view]);\n    };\n\n    _this.handleSelectEvent = function () {\n      _this.clearSelection();\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      notify(_this.props.onSelectEvent, args);\n    };\n\n    _this.handleDoubleClickEvent = function () {\n      _this.clearSelection();\n\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      notify(_this.props.onDoubleClickEvent, args);\n    };\n\n    _this.handleShowMore = function (events$$1, date, cell, slot) {\n      var _this$props3 = _this.props,\n          popup = _this$props3.popup,\n          onDrillDown = _this$props3.onDrillDown,\n          onShowMore = _this$props3.onShowMore,\n          getDrilldownView = _this$props3.getDrilldownView; //cancel any pending selections so only the event click goes through.\n\n      _this.clearSelection();\n\n      if (popup) {\n        var position = getPosition(cell, findDOMNode(_assertThisInitialized(_assertThisInitialized(_this))));\n\n        _this.setState({\n          overlay: {\n            date: date,\n            events: events$$1,\n            position: position\n          }\n        });\n      } else {\n        notify(onDrillDown, [date, getDrilldownView(date) || views.DAY]);\n      }\n\n      notify(onShowMore, [events$$1, date, slot]);\n    };\n\n    _this._bgRows = [];\n    _this._pendingSelection = [];\n    _this.state = {\n      rowLimit: 5,\n      needLimitMeasure: true\n    };\n    return _this;\n  }\n\n  var _proto = MonthView.prototype;\n\n  _proto.componentWillReceiveProps = function componentWillReceiveProps(_ref2) {\n    var date = _ref2.date;\n    this.setState({\n      needLimitMeasure: !dates.eq(date, this.props.date)\n    });\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    var running;\n    if (this.state.needLimitMeasure) this.measureRowLimit(this.props);\n    window.addEventListener('resize', this._resizeListener = function () {\n      if (!running) {\n        raf(function () {\n          running = false;\n\n          _this2.setState({\n            needLimitMeasure: true\n          }); //eslint-disable-line\n\n        });\n      }\n    }, false);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    if (this.state.needLimitMeasure) this.measureRowLimit(this.props);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    window.removeEventListener('resize', this._resizeListener, false);\n  };\n\n  _proto.render = function render() {\n    var _this$props4 = this.props,\n        date = _this$props4.date,\n        localizer = _this$props4.localizer,\n        className = _this$props4.className,\n        month = dates.visibleDays(date, localizer),\n        weeks = chunk(month, 7);\n    this._weekCount = weeks.length;\n    return React.createElement(\"div\", {\n      className: cn('rbc-month-view', className)\n    }, React.createElement(\"div\", {\n      className: \"rbc-row rbc-month-header\"\n    }, this.renderHeaders(weeks[0])), weeks.map(this.renderWeek), this.props.popup && this.renderOverlay());\n  };\n\n  _proto.renderHeaders = function renderHeaders(row) {\n    var _this$props5 = this.props,\n        localizer = _this$props5.localizer,\n        components = _this$props5.components;\n    var first = row[0];\n    var last = row[row.length - 1];\n    var HeaderComponent = components.header || Header;\n    return dates.range(first, last, 'day').map(function (day, idx) {\n      return React.createElement(\"div\", {\n        key: 'header_' + idx,\n        className: \"rbc-header\"\n      }, React.createElement(HeaderComponent, {\n        date: day,\n        localizer: localizer,\n        label: localizer.format(day, 'weekdayFormat')\n      }));\n    });\n  };\n\n  _proto.renderOverlay = function renderOverlay() {\n    var _this3 = this;\n\n    var overlay = this.state && this.state.overlay || {};\n    var _this$props6 = this.props,\n        accessors = _this$props6.accessors,\n        localizer = _this$props6.localizer,\n        components = _this$props6.components,\n        getters = _this$props6.getters,\n        selected = _this$props6.selected;\n    return React.createElement(Overlay, {\n      rootClose: true,\n      placement: \"bottom\",\n      container: this,\n      show: !!overlay.position,\n      onHide: function onHide() {\n        return _this3.setState({\n          overlay: null\n        });\n      }\n    }, React.createElement(Popup, {\n      accessors: accessors,\n      getters: getters,\n      selected: selected,\n      components: components,\n      localizer: localizer,\n      position: overlay.position,\n      events: overlay.events,\n      slotStart: overlay.date,\n      slotEnd: overlay.end,\n      onSelect: this.handleSelectEvent,\n      onDoubleClick: this.handleDoubleClickEvent\n    }));\n  };\n\n  _proto.measureRowLimit = function measureRowLimit() {\n    this.setState({\n      needLimitMeasure: false,\n      rowLimit: this.refs.slotRow.getRowLimit()\n    });\n  };\n\n  _proto.selectDates = function selectDates(slotInfo) {\n    var slots = this._pendingSelection.slice();\n\n    this._pendingSelection = [];\n    slots.sort(function (a, b) {\n      return +a - +b;\n    });\n    notify(this.props.onSelectSlot, {\n      slots: slots,\n      start: slots[0],\n      end: slots[slots.length - 1],\n      action: slotInfo.action,\n      bounds: slotInfo.bounds,\n      box: slotInfo.box\n    });\n  };\n\n  _proto.clearSelection = function clearSelection() {\n    clearTimeout(this._selectTimer);\n    this._pendingSelection = [];\n  };\n\n  return MonthView;\n}(React.Component);\n\nMonthView.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  events: PropTypes.array.isRequired,\n  date: PropTypes.instanceOf(Date),\n  min: PropTypes.instanceOf(Date),\n  max: PropTypes.instanceOf(Date),\n  step: PropTypes.number,\n  getNow: PropTypes.func.isRequired,\n  scrollToTime: PropTypes.instanceOf(Date),\n  rtl: PropTypes.bool,\n  width: PropTypes.number,\n  accessors: PropTypes.object.isRequired,\n  components: PropTypes.object.isRequired,\n  getters: PropTypes.object.isRequired,\n  localizer: PropTypes.object.isRequired,\n  selected: PropTypes.object,\n  selectable: PropTypes.oneOf([true, false, 'ignoreEvents']),\n  longPressThreshold: PropTypes.number,\n  onNavigate: PropTypes.func,\n  onSelectSlot: PropTypes.func,\n  onSelectEvent: PropTypes.func,\n  onDoubleClickEvent: PropTypes.func,\n  onShowMore: PropTypes.func,\n  onDrillDown: PropTypes.func,\n  getDrilldownView: PropTypes.func.isRequired,\n  popup: PropTypes.bool,\n  popupOffset: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    x: PropTypes.number,\n    y: PropTypes.number\n  })])\n} : {};\n\nMonthView.range = function (date, _ref3) {\n  var localizer = _ref3.localizer;\n  var start = dates.firstVisibleDay(date, localizer);\n  var end = dates.lastVisibleDay(date, localizer);\n  return {\n    start: start,\n    end: end\n  };\n};\n\nMonthView.navigate = function (date, action) {\n  switch (action) {\n    case navigate.PREVIOUS:\n      return dates.add(date, -1, 'month');\n\n    case navigate.NEXT:\n      return dates.add(date, 1, 'month');\n\n    default:\n      return date;\n  }\n};\n\nMonthView.title = function (date, _ref4) {\n  var localizer = _ref4.localizer;\n  return localizer.format(date, 'monthHeaderFormat');\n};\n\nvar getDstOffset = function getDstOffset(start, end) {\n  return start.getTimezoneOffset() - end.getTimezoneOffset();\n};\n\nvar getKey = function getKey(min, max, step, slots) {\n  return \"\" + +dates.startOf(min, 'minutes') + (\"\" + +dates.startOf(max, 'minutes')) + (step + \"-\" + slots);\n};\n\nfunction getSlotMetrics$1(_ref) {\n  var start = _ref.min,\n      end = _ref.max,\n      step = _ref.step,\n      timeslots = _ref.timeslots;\n  var key = getKey(start, end, step, timeslots);\n  var totalMin = 1 + dates.diff(start, end, 'minutes') + getDstOffset(start, end);\n  var minutesFromMidnight = dates.diff(dates.startOf(start, 'day'), start, 'minutes');\n  var numGroups = Math.ceil(totalMin / (step * timeslots));\n  var numSlots = numGroups * timeslots;\n  var groups = new Array(numGroups);\n  var slots = new Array(numSlots); // Each slot date is created from \"zero\", instead of adding `step` to\n  // the previous one, in order to avoid DST oddities\n\n  for (var grp = 0; grp < numGroups; grp++) {\n    groups[grp] = new Array(timeslots);\n\n    for (var slot = 0; slot < timeslots; slot++) {\n      var slotIdx = grp * timeslots + slot;\n      var minFromStart = slotIdx * step; // A date with total minutes calculated from the start of the day\n\n      slots[slotIdx] = groups[grp][slot] = new Date(start.getFullYear(), start.getMonth(), start.getDate(), 0, minutesFromMidnight + minFromStart, 0, 0);\n    }\n  } // Necessary to be able to select up until the last timeslot in a day\n\n\n  var lastSlotMinFromStart = slots.length * step;\n  slots.push(new Date(start.getFullYear(), start.getMonth(), start.getDate(), 0, minutesFromMidnight + lastSlotMinFromStart, 0, 0));\n\n  function positionFromDate(date) {\n    var diff = dates.diff(start, date, 'minutes') + getDstOffset(start, date);\n    return Math.min(diff, totalMin);\n  }\n\n  return {\n    groups: groups,\n    update: function update(args) {\n      if (getKey(args) !== key) return getSlotMetrics$1(args);\n      return this;\n    },\n    dateIsInGroup: function dateIsInGroup(date, groupIndex) {\n      var nextGroup = groups[groupIndex + 1];\n      return dates.inRange(date, groups[groupIndex][0], nextGroup ? nextGroup[0] : end, 'minutes');\n    },\n    nextSlot: function nextSlot(slot) {\n      var next = slots[Math.min(slots.indexOf(slot) + 1, slots.length - 1)]; // in the case of the last slot we won't a long enough range so manually get it\n\n      if (next === slot) next = dates.add(slot, step, 'minutes');\n      return next;\n    },\n    closestSlotToPosition: function closestSlotToPosition(percent) {\n      var slot = Math.min(slots.length - 1, Math.max(0, Math.floor(percent * numSlots)));\n      return slots[slot];\n    },\n    closestSlotFromPoint: function closestSlotFromPoint(point, boundaryRect) {\n      var range$$1 = Math.abs(boundaryRect.top - boundaryRect.bottom);\n      return this.closestSlotToPosition((point.y - boundaryRect.top) / range$$1);\n    },\n    closestSlotFromDate: function closestSlotFromDate(date, offset) {\n      if (offset === void 0) {\n        offset = 0;\n      }\n\n      if (dates.lt(date, start, 'minutes')) return slots[0];\n      var diffMins = dates.diff(start, date, 'minutes');\n      return slots[(diffMins - diffMins % step) / step + offset];\n    },\n    startsBeforeDay: function startsBeforeDay(date) {\n      return dates.lt(date, start, 'day');\n    },\n    startsAfterDay: function startsAfterDay(date) {\n      return dates.gt(date, end, 'day');\n    },\n    startsBefore: function startsBefore(date) {\n      return dates.lt(dates.merge(start, date), start, 'minutes');\n    },\n    startsAfter: function startsAfter(date) {\n      return dates.gt(dates.merge(end, date), end, 'minutes');\n    },\n    getRange: function getRange(rangeStart, rangeEnd) {\n      rangeStart = dates.min(end, dates.max(start, rangeStart));\n      rangeEnd = dates.min(end, dates.max(start, rangeEnd));\n      var rangeStartMin = positionFromDate(rangeStart);\n      var rangeEndMin = positionFromDate(rangeEnd);\n      var top = rangeStartMin / (step * numSlots) * 100;\n      return {\n        top: top,\n        height: rangeEndMin / (step * numSlots) * 100 - top,\n        start: positionFromDate(rangeStart),\n        startDate: rangeStart,\n        end: positionFromDate(rangeEnd),\n        endDate: rangeEnd\n      };\n    }\n  };\n}\n\nvar Event =\n/*#__PURE__*/\nfunction () {\n  function Event(data, _ref) {\n    var accessors = _ref.accessors,\n        slotMetrics = _ref.slotMetrics;\n\n    var _slotMetrics$getRange = slotMetrics.getRange(accessors.start(data), accessors.end(data)),\n        start = _slotMetrics$getRange.start,\n        startDate = _slotMetrics$getRange.startDate,\n        end = _slotMetrics$getRange.end,\n        endDate = _slotMetrics$getRange.endDate,\n        top = _slotMetrics$getRange.top,\n        height = _slotMetrics$getRange.height;\n\n    this.start = start;\n    this.end = end;\n    this.startMs = +startDate;\n    this.endMs = +endDate;\n    this.top = top;\n    this.height = height;\n    this.data = data;\n  }\n  /**\n   * The event's width without any overlap.\n   */\n\n\n  _createClass(Event, [{\n    key: \"_width\",\n    get: function get() {\n      // The container event's width is determined by the maximum number of\n      // events in any of its rows.\n      if (this.rows) {\n        var columns = this.rows.reduce(function (max, row) {\n          return Math.max(max, row.leaves.length + 1);\n        }, // add itself\n        0) + 1; // add the container\n\n        return 100 / columns;\n      }\n\n      var availableWidth = 100 - this.container._width; // The row event's width is the space left by the container, divided\n      // among itself and its leaves.\n\n      if (this.leaves) {\n        return availableWidth / (this.leaves.length + 1);\n      } // The leaf event's width is determined by its row's width\n\n\n      return this.row._width;\n    }\n    /**\n     * The event's calculated width, possibly with extra width added for\n     * overlapping effect.\n     */\n\n  }, {\n    key: \"width\",\n    get: function get() {\n      var noOverlap = this._width;\n      var overlap = Math.min(100, this._width * 1.7); // Containers can always grow.\n\n      if (this.rows) {\n        return overlap;\n      } // Rows can grow if they have leaves.\n\n\n      if (this.leaves) {\n        return this.leaves.length > 0 ? overlap : noOverlap;\n      } // Leaves can grow unless they're the last item in a row.\n\n\n      var leaves = this.row.leaves;\n      var index = leaves.indexOf(this);\n      return index === leaves.length - 1 ? noOverlap : overlap;\n    }\n  }, {\n    key: \"xOffset\",\n    get: function get() {\n      // Containers have no offset.\n      if (this.rows) return 0; // Rows always start where their container ends.\n\n      if (this.leaves) return this.container._width; // Leaves are spread out evenly on the space left by its row.\n\n      var _this$row = this.row,\n          leaves = _this$row.leaves,\n          xOffset = _this$row.xOffset,\n          _width = _this$row._width;\n      var index = leaves.indexOf(this) + 1;\n      return xOffset + index * _width;\n    }\n  }]);\n\n  return Event;\n}();\n/**\n * Return true if event a and b is considered to be on the same row.\n */\n\n\nfunction onSameRow(a, b, minimumStartDifference) {\n  return (// Occupies the same start slot.\n    Math.abs(b.start - a.start) < minimumStartDifference || // A's start slot overlaps with b's end slot.\n    b.start > a.start && b.start < a.end\n  );\n}\n\nfunction sortByRender(events$$1) {\n  var sortedByTime = sortBy(events$$1, ['startMs', function (e) {\n    return -e.endMs;\n  }]);\n  var sorted = [];\n\n  while (sortedByTime.length > 0) {\n    var event = sortedByTime.shift();\n    sorted.push(event);\n\n    for (var i = 0; i < sortedByTime.length; i++) {\n      var test = sortedByTime[i]; // Still inside this event, look for next.\n\n      if (event.endMs > test.startMs) continue; // We've found the first event of the next event group.\n      // If that event is not right next to our current event, we have to\n      // move it here.\n\n      if (i > 0) {\n        var _event = sortedByTime.splice(i, 1)[0];\n        sorted.push(_event);\n      } // We've already found the next event group, so stop looking.\n\n\n      break;\n    }\n  }\n\n  return sorted;\n}\n\nfunction getStyledEvents(_ref2) {\n  var events$$1 = _ref2.events,\n      minimumStartDifference = _ref2.minimumStartDifference,\n      slotMetrics = _ref2.slotMetrics,\n      accessors = _ref2.accessors; // Create proxy events and order them so that we don't have\n  // to fiddle with z-indexes.\n\n  var proxies = events$$1.map(function (event) {\n    return new Event(event, {\n      slotMetrics: slotMetrics,\n      accessors: accessors\n    });\n  });\n  var eventsInRenderOrder = sortByRender(proxies); // Group overlapping events, while keeping order.\n  // Every event is always one of: container, row or leaf.\n  // Containers can contain rows, and rows can contain leaves.\n\n  var containerEvents = [];\n\n  var _loop = function _loop(i) {\n    var event = eventsInRenderOrder[i]; // Check if this event can go into a container event.\n\n    var container = containerEvents.find(function (c) {\n      return c.end > event.start || Math.abs(event.start - c.start) < minimumStartDifference;\n    }); // Couldn't find a container — that means this event is a container.\n\n    if (!container) {\n      event.rows = [];\n      containerEvents.push(event);\n      return \"continue\";\n    } // Found a container for the event.\n\n\n    event.container = container; // Check if the event can be placed in an existing row.\n    // Start looking from behind.\n\n    var row = null;\n\n    for (var j = container.rows.length - 1; !row && j >= 0; j--) {\n      if (onSameRow(container.rows[j], event, minimumStartDifference)) {\n        row = container.rows[j];\n      }\n    }\n\n    if (row) {\n      // Found a row, so add it.\n      row.leaves.push(event);\n      event.row = row;\n    } else {\n      // Couldn't find a row – that means this event is a row.\n      event.leaves = [];\n      container.rows.push(event);\n    }\n  };\n\n  for (var i = 0; i < eventsInRenderOrder.length; i++) {\n    var _ret = _loop(i);\n\n    if (_ret === \"continue\") continue;\n  } // Return the original events, along with their styles.\n\n\n  return eventsInRenderOrder.map(function (event) {\n    return {\n      event: event.data,\n      style: {\n        top: event.top,\n        height: event.height,\n        width: event.width,\n        xOffset: event.xOffset\n      }\n    };\n  });\n}\n\nfunction NoopWrapper(props) {\n  return props.children;\n}\n\nvar TimeSlotGroup =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(TimeSlotGroup, _Component);\n\n  function TimeSlotGroup() {\n    return _Component.apply(this, arguments) || this;\n  }\n\n  var _proto = TimeSlotGroup.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        renderSlot = _this$props.renderSlot,\n        resource = _this$props.resource,\n        group = _this$props.group,\n        getters = _this$props.getters,\n        _this$props$component = _this$props.components;\n    _this$props$component = _this$props$component === void 0 ? {} : _this$props$component;\n    var _this$props$component2 = _this$props$component.timeSlotWrapper,\n        Wrapper = _this$props$component2 === void 0 ? NoopWrapper : _this$props$component2;\n    return React.createElement(\"div\", {\n      className: \"rbc-timeslot-group\"\n    }, group.map(function (value, idx) {\n      var slotProps = getters ? getters.slotProp(value, resource) : {};\n      return React.createElement(Wrapper, {\n        key: idx,\n        value: value,\n        resource: resource\n      }, React.createElement(\"div\", _extends({}, slotProps, {\n        className: cn('rbc-time-slot', slotProps.className)\n      }), renderSlot && renderSlot(value, idx)));\n    }));\n  };\n\n  return TimeSlotGroup;\n}(Component);\n\nTimeSlotGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  renderSlot: PropTypes.func,\n  group: PropTypes.array.isRequired,\n  resource: PropTypes.any,\n  components: PropTypes.object,\n  getters: PropTypes.object\n} : {};\n/* eslint-disable react/prop-types */\n\nfunction TimeGridEvent(props) {\n  var _extends2;\n\n  var style = props.style,\n      className = props.className,\n      event = props.event,\n      accessors = props.accessors,\n      isRtl = props.isRtl,\n      selected = props.selected,\n      label = props.label,\n      continuesEarlier = props.continuesEarlier,\n      continuesLater = props.continuesLater,\n      getters = props.getters,\n      onClick = props.onClick,\n      onDoubleClick = props.onDoubleClick,\n      _props$components = props.components,\n      Event = _props$components.event,\n      EventWrapper = _props$components.eventWrapper;\n  var title = accessors.title(event);\n  var tooltip = accessors.tooltip(event);\n  var end = accessors.end(event);\n  var start = accessors.start(event);\n  var userProps = getters.eventProp(event, start, end, selected);\n  var height = style.height,\n      top = style.top,\n      width = style.width,\n      xOffset = style.xOffset;\n  var inner = [React.createElement(\"div\", {\n    key: \"1\",\n    className: \"rbc-event-label\"\n  }, label), React.createElement(\"div\", {\n    key: \"2\",\n    className: \"rbc-event-content\"\n  }, Event ? React.createElement(Event, {\n    event: event,\n    title: title\n  }) : title)];\n  return React.createElement(EventWrapper, _extends({\n    type: \"time\"\n  }, props), React.createElement(\"div\", {\n    onClick: onClick,\n    onDoubleClick: onDoubleClick,\n    style: _extends({}, userProps.style, (_extends2 = {\n      top: top + \"%\",\n      height: height + \"%\"\n    }, _extends2[isRtl ? 'right' : 'left'] = Math.max(0, xOffset) + \"%\", _extends2.width = width + \"%\", _extends2)),\n    title: tooltip ? (typeof label === 'string' ? label + ': ' : '') + tooltip : undefined,\n    className: cn('rbc-event', className, userProps.className, {\n      'rbc-selected': selected,\n      'rbc-event-continues-earlier': continuesEarlier,\n      'rbc-event-continues-later': continuesLater\n    })\n  }, inner));\n}\n\nvar DayColumn =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(DayColumn, _React$Component);\n\n  function DayColumn() {\n    var _this;\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;\n    _this.state = {\n      selecting: false,\n      timeIndicatorPosition: null\n    };\n    _this.intervalTriggered = false;\n\n    _this.renderEvents = function () {\n      var _this$props = _this.props,\n          events$$1 = _this$props.events,\n          isRtl = _this$props.rtl,\n          selected = _this$props.selected,\n          accessors = _this$props.accessors,\n          localizer = _this$props.localizer,\n          getters = _this$props.getters,\n          components = _this$props.components,\n          step = _this$props.step,\n          timeslots = _this$props.timeslots;\n\n      var _assertThisInitialize = _assertThisInitialized(_assertThisInitialized(_this)),\n          slotMetrics = _assertThisInitialize.slotMetrics;\n\n      var messages = localizer.messages;\n      var styledEvents = getStyledEvents({\n        events: events$$1,\n        accessors: accessors,\n        slotMetrics: slotMetrics,\n        minimumStartDifference: Math.ceil(step * timeslots / 2)\n      });\n      return styledEvents.map(function (_ref, idx) {\n        var event = _ref.event,\n            style = _ref.style;\n        var end = accessors.end(event);\n        var start = accessors.start(event);\n        var format = 'eventTimeRangeFormat';\n        var label;\n        var startsBeforeDay = slotMetrics.startsBeforeDay(start);\n        var startsAfterDay = slotMetrics.startsAfterDay(end);\n        if (startsBeforeDay) format = 'eventTimeRangeEndFormat';else if (startsAfterDay) format = 'eventTimeRangeStartFormat';\n        if (startsBeforeDay && startsAfterDay) label = messages.allDay;else label = localizer.format({\n          start: start,\n          end: end\n        }, format);\n        var continuesEarlier = startsBeforeDay || slotMetrics.startsBefore(start);\n        var continuesLater = startsAfterDay || slotMetrics.startsAfter(end);\n        return React.createElement(TimeGridEvent, {\n          style: style,\n          event: event,\n          label: label,\n          key: 'evt_' + idx,\n          getters: getters,\n          isRtl: isRtl,\n          components: components,\n          continuesEarlier: continuesEarlier,\n          continuesLater: continuesLater,\n          accessors: accessors,\n          selected: isSelected(event, selected),\n          onClick: function onClick(e) {\n            return _this._select(event, e);\n          },\n          onDoubleClick: function onDoubleClick(e) {\n            return _this._doubleClick(event, e);\n          }\n        });\n      });\n    };\n\n    _this._selectable = function () {\n      var node = findDOMNode(_assertThisInitialized(_assertThisInitialized(_this)));\n      var selector = _this._selector = new Selection(function () {\n        return findDOMNode(_assertThisInitialized(_assertThisInitialized(_this)));\n      }, {\n        longPressThreshold: _this.props.longPressThreshold\n      });\n\n      var maybeSelect = function maybeSelect(box) {\n        var onSelecting = _this.props.onSelecting;\n        var current = _this.state || {};\n        var state = selectionState(box);\n        var start = state.startDate,\n            end = state.endDate;\n\n        if (onSelecting) {\n          if (dates.eq(current.startDate, start, 'minutes') && dates.eq(current.endDate, end, 'minutes') || onSelecting({\n            start: start,\n            end: end\n          }) === false) return;\n        }\n\n        if (_this.state.start !== state.start || _this.state.end !== state.end || _this.state.selecting !== state.selecting) {\n          _this.setState(state);\n        }\n      };\n\n      var selectionState = function selectionState(point) {\n        var currentSlot = _this.slotMetrics.closestSlotFromPoint(point, getBoundsForNode(node));\n\n        if (!_this.state.selecting) _this._initialSlot = currentSlot;\n        var initialSlot = _this._initialSlot;\n        if (initialSlot === currentSlot) currentSlot = _this.slotMetrics.nextSlot(initialSlot);\n\n        var selectRange = _this.slotMetrics.getRange(dates.min(initialSlot, currentSlot), dates.max(initialSlot, currentSlot));\n\n        return _extends({}, selectRange, {\n          selecting: true,\n          top: selectRange.top + \"%\",\n          height: selectRange.height + \"%\"\n        });\n      };\n\n      var selectorClicksHandler = function selectorClicksHandler(box, actionType) {\n        if (!isEvent(findDOMNode(_assertThisInitialized(_assertThisInitialized(_this))), box)) {\n          var _selectionState = selectionState(box),\n              startDate = _selectionState.startDate,\n              endDate = _selectionState.endDate;\n\n          _this._selectSlot({\n            startDate: startDate,\n            endDate: endDate,\n            action: actionType,\n            box: box\n          });\n        }\n\n        _this.setState({\n          selecting: false\n        });\n      };\n\n      selector.on('selecting', maybeSelect);\n      selector.on('selectStart', maybeSelect);\n      selector.on('beforeSelect', function (box) {\n        if (_this.props.selectable !== 'ignoreEvents') return;\n        return !isEvent(findDOMNode(_assertThisInitialized(_assertThisInitialized(_this))), box);\n      });\n      selector.on('click', function (box) {\n        return selectorClicksHandler(box, 'click');\n      });\n      selector.on('doubleClick', function (box) {\n        return selectorClicksHandler(box, 'doubleClick');\n      });\n      selector.on('select', function (bounds) {\n        if (_this.state.selecting) {\n          _this._selectSlot(_extends({}, _this.state, {\n            action: 'select',\n            bounds: bounds\n          }));\n\n          _this.setState({\n            selecting: false\n          });\n        }\n      });\n      selector.on('reset', function () {\n        if (_this.state.selecting) {\n          _this.setState({\n            selecting: false\n          });\n        }\n      });\n    };\n\n    _this._teardownSelectable = function () {\n      if (!_this._selector) return;\n\n      _this._selector.teardown();\n\n      _this._selector = null;\n    };\n\n    _this._selectSlot = function (_ref2) {\n      var startDate = _ref2.startDate,\n          endDate = _ref2.endDate,\n          action = _ref2.action,\n          bounds = _ref2.bounds,\n          box = _ref2.box;\n      var current = startDate,\n          slots = [];\n\n      while (dates.lte(current, endDate)) {\n        slots.push(current);\n        current = dates.add(current, _this.props.step, 'minutes');\n      }\n\n      notify(_this.props.onSelectSlot, {\n        slots: slots,\n        start: startDate,\n        end: endDate,\n        resourceId: _this.props.resource,\n        action: action,\n        bounds: bounds,\n        box: box\n      });\n    };\n\n    _this._select = function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      notify(_this.props.onSelectEvent, args);\n    };\n\n    _this._doubleClick = function () {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      notify(_this.props.onDoubleClickEvent, args);\n    };\n\n    _this.slotMetrics = getSlotMetrics$1(_this.props);\n    return _this;\n  }\n\n  var _proto = DayColumn.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.props.selectable && this._selectable();\n\n    if (this.props.isNow) {\n      this.setTimeIndicatorPositionUpdateInterval();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this._teardownSelectable();\n\n    this.clearTimeIndicatorInterval();\n  };\n\n  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (nextProps.selectable && !this.props.selectable) this._selectable();\n    if (!nextProps.selectable && this.props.selectable) this._teardownSelectable();\n    this.slotMetrics = this.slotMetrics.update(nextProps);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    var getNowChanged = !dates.eq(prevProps.getNow(), this.props.getNow(), 'minutes');\n\n    if (prevProps.isNow !== this.props.isNow || getNowChanged) {\n      this.clearTimeIndicatorInterval();\n\n      if (this.props.isNow) {\n        var tail = !getNowChanged && dates.eq(prevProps.date, this.props.date, 'minutes') && prevState.timeIndicatorPosition === this.state.timeIndicatorPosition;\n        this.setTimeIndicatorPositionUpdateInterval(tail);\n      }\n    }\n  };\n  /**\n   * @param tail {Boolean} - whether `positionTimeIndicator` call should be\n   *   deferred or called upon setting interval (`true` - if deferred);\n   */\n\n\n  _proto.setTimeIndicatorPositionUpdateInterval = function setTimeIndicatorPositionUpdateInterval(tail) {\n    var _this2 = this;\n\n    if (tail === void 0) {\n      tail = false;\n    }\n\n    if (!this.intervalTriggered && !tail) {\n      this.positionTimeIndicator();\n    }\n\n    this._timeIndicatorTimeout = window.setTimeout(function () {\n      _this2.intervalTriggered = true;\n\n      _this2.positionTimeIndicator();\n\n      _this2.setTimeIndicatorPositionUpdateInterval();\n    }, 60000);\n  };\n\n  _proto.clearTimeIndicatorInterval = function clearTimeIndicatorInterval() {\n    this.intervalTriggered = false;\n    window.clearTimeout(this._timeIndicatorTimeout);\n  };\n\n  _proto.positionTimeIndicator = function positionTimeIndicator() {\n    var _this$props2 = this.props,\n        min = _this$props2.min,\n        max = _this$props2.max,\n        getNow = _this$props2.getNow;\n    var current = getNow();\n\n    if (current >= min && current <= max) {\n      var _this$slotMetrics$get = this.slotMetrics.getRange(current, current),\n          top = _this$slotMetrics$get.top;\n\n      this.setState({\n        timeIndicatorPosition: top\n      });\n    } else {\n      this.clearTimeIndicatorInterval();\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props3 = this.props,\n        max = _this$props3.max,\n        rtl = _this$props3.rtl,\n        isNow = _this$props3.isNow,\n        resource = _this$props3.resource,\n        accessors = _this$props3.accessors,\n        localizer = _this$props3.localizer,\n        _this$props3$getters = _this$props3.getters,\n        dayProp = _this$props3$getters.dayProp,\n        getters = _objectWithoutPropertiesLoose(_this$props3$getters, [\"dayProp\"]),\n        _this$props3$componen = _this$props3.components,\n        EventContainer = _this$props3$componen.eventContainerWrapper,\n        components = _objectWithoutPropertiesLoose(_this$props3$componen, [\"eventContainerWrapper\"]);\n\n    var slotMetrics = this.slotMetrics;\n    var _this$state = this.state,\n        selecting = _this$state.selecting,\n        top = _this$state.top,\n        height = _this$state.height,\n        startDate = _this$state.startDate,\n        endDate = _this$state.endDate;\n    var selectDates = {\n      start: startDate,\n      end: endDate\n    };\n\n    var _dayProp = dayProp(max),\n        className = _dayProp.className,\n        style = _dayProp.style;\n\n    return React.createElement(\"div\", {\n      style: style,\n      className: cn(className, 'rbc-day-slot', 'rbc-time-column', isNow && 'rbc-now', isNow && 'rbc-today', // WHY\n      selecting && 'rbc-slot-selecting')\n    }, slotMetrics.groups.map(function (grp, idx) {\n      return React.createElement(TimeSlotGroup, {\n        key: idx,\n        group: grp,\n        resource: resource,\n        getters: getters,\n        components: components\n      });\n    }), React.createElement(EventContainer, {\n      localizer: localizer,\n      resource: resource,\n      accessors: accessors,\n      getters: getters,\n      components: components,\n      slotMetrics: slotMetrics\n    }, React.createElement(\"div\", {\n      className: cn('rbc-events-container', rtl && 'rtl')\n    }, this.renderEvents())), selecting && React.createElement(\"div\", {\n      className: \"rbc-slot-selection\",\n      style: {\n        top: top,\n        height: height\n      }\n    }, React.createElement(\"span\", null, localizer.format(selectDates, 'selectRangeFormat'))), isNow && React.createElement(\"div\", {\n      className: \"rbc-current-time-indicator\",\n      style: {\n        top: this.state.timeIndicatorPosition + \"%\"\n      }\n    }));\n  };\n\n  return DayColumn;\n}(React.Component);\n\nDayColumn.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  events: PropTypes.array.isRequired,\n  step: PropTypes.number.isRequired,\n  date: PropTypes.instanceOf(Date).isRequired,\n  min: PropTypes.instanceOf(Date).isRequired,\n  max: PropTypes.instanceOf(Date).isRequired,\n  getNow: PropTypes.func.isRequired,\n  isNow: PropTypes.bool,\n  rtl: PropTypes.bool,\n  accessors: PropTypes.object.isRequired,\n  components: PropTypes.object.isRequired,\n  getters: PropTypes.object.isRequired,\n  localizer: PropTypes.object.isRequired,\n  showMultiDayTimes: PropTypes.bool,\n  culture: PropTypes.string,\n  timeslots: PropTypes.number,\n  selected: PropTypes.object,\n  selectable: PropTypes.oneOf([true, false, 'ignoreEvents']),\n  eventOffset: PropTypes.number,\n  longPressThreshold: PropTypes.number,\n  onSelecting: PropTypes.func,\n  onSelectSlot: PropTypes.func.isRequired,\n  onSelectEvent: PropTypes.func.isRequired,\n  onDoubleClickEvent: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  dragThroughEvents: PropTypes.bool,\n  resource: PropTypes.any\n} : {};\nDayColumn.defaultProps = {\n  dragThroughEvents: true,\n  timeslots: 2\n};\n\nvar TimeGutter =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(TimeGutter, _Component);\n\n  function TimeGutter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _this.renderSlot = function (value, idx) {\n      if (idx !== 0) return null;\n      var _this$props = _this.props,\n          localizer = _this$props.localizer,\n          getNow = _this$props.getNow;\n\n      var isNow = _this.slotMetrics.dateIsInGroup(getNow(), idx);\n\n      return React.createElement(\"span\", {\n        className: cn('rbc-label', isNow && 'rbc-now')\n      }, localizer.format(value, 'timeGutterFormat'));\n    };\n\n    var _this$props2 = _this.props,\n        min = _this$props2.min,\n        max = _this$props2.max,\n        timeslots = _this$props2.timeslots,\n        step = _this$props2.step;\n    _this.slotMetrics = getSlotMetrics$1({\n      min: min,\n      max: max,\n      timeslots: timeslots,\n      step: step\n    });\n    return _this;\n  }\n\n  var _proto = TimeGutter.prototype;\n\n  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var min = nextProps.min,\n        max = nextProps.max,\n        timeslots = nextProps.timeslots,\n        step = nextProps.step;\n    this.slotMetrics = this.slotMetrics.update({\n      min: min,\n      max: max,\n      timeslots: timeslots,\n      step: step\n    });\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props3 = this.props,\n        resource = _this$props3.resource,\n        components = _this$props3.components;\n    return React.createElement(\"div\", {\n      className: \"rbc-time-gutter rbc-time-column\"\n    }, this.slotMetrics.groups.map(function (grp, idx) {\n      return React.createElement(TimeSlotGroup, {\n        key: idx,\n        group: grp,\n        resource: resource,\n        components: components,\n        renderSlot: _this2.renderSlot\n      });\n    }));\n  };\n\n  return TimeGutter;\n}(Component);\n\nTimeGutter.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  min: PropTypes.instanceOf(Date).isRequired,\n  max: PropTypes.instanceOf(Date).isRequired,\n  timeslots: PropTypes.number.isRequired,\n  step: PropTypes.number.isRequired,\n  getNow: PropTypes.func.isRequired,\n  components: PropTypes.object.isRequired,\n  localizer: PropTypes.object.isRequired,\n  resource: PropTypes.string\n} : {};\n\nvar ResourceHeader = function ResourceHeader(_ref) {\n  var label = _ref.label;\n  return React.createElement(React.Fragment, null, label);\n};\n\nResourceHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  label: PropTypes.node,\n  index: PropTypes.number,\n  resource: PropTypes.object\n} : {};\n\nvar TimeGridHeader =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(TimeGridHeader, _React$Component);\n\n  function TimeGridHeader() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _this.handleHeaderClick = function (date, view, e) {\n      e.preventDefault();\n      notify(_this.props.onDrillDown, [date, view]);\n    };\n\n    _this.renderRow = function (resource) {\n      var _this$props = _this.props,\n          events$$1 = _this$props.events,\n          rtl = _this$props.rtl,\n          selectable = _this$props.selectable,\n          getNow = _this$props.getNow,\n          range$$1 = _this$props.range,\n          getters = _this$props.getters,\n          localizer = _this$props.localizer,\n          accessors = _this$props.accessors,\n          components = _this$props.components;\n      var resourceId = accessors.resourceId(resource);\n      var eventsToDisplay = resource ? events$$1.filter(function (event) {\n        return accessors.resource(event) === resourceId;\n      }) : events$$1;\n      return React.createElement(DateContentRow, {\n        isAllDay: true,\n        rtl: rtl,\n        getNow: getNow,\n        minRows: 2,\n        range: range$$1,\n        events: eventsToDisplay,\n        resourceId: resourceId,\n        className: \"rbc-allday-cell\",\n        selectable: selectable,\n        selected: _this.props.selected,\n        components: components,\n        accessors: accessors,\n        getters: getters,\n        localizer: localizer,\n        onSelect: _this.props.onSelectEvent,\n        onDoubleClick: _this.props.onDoubleClickEvent,\n        onSelectSlot: _this.props.onSelectSlot,\n        longPressThreshold: _this.props.longPressThreshold\n      });\n    };\n\n    return _this;\n  }\n\n  var _proto = TimeGridHeader.prototype;\n\n  _proto.renderHeaderCells = function renderHeaderCells(range$$1) {\n    var _this2 = this;\n\n    var _this$props2 = this.props,\n        localizer = _this$props2.localizer,\n        getDrilldownView = _this$props2.getDrilldownView,\n        getNow = _this$props2.getNow,\n        dayProp = _this$props2.getters.dayProp,\n        _this$props2$componen = _this$props2.components.header,\n        HeaderComponent = _this$props2$componen === void 0 ? Header : _this$props2$componen;\n    var today = getNow();\n    return range$$1.map(function (date, i) {\n      var drilldownView = getDrilldownView(date);\n      var label = localizer.format(date, 'dayFormat');\n\n      var _dayProp = dayProp(date),\n          className = _dayProp.className,\n          style = _dayProp.style;\n\n      var header = React.createElement(HeaderComponent, {\n        date: date,\n        label: label,\n        localizer: localizer\n      });\n      return React.createElement(\"div\", {\n        key: i,\n        style: style,\n        className: cn('rbc-header', className, dates.eq(date, today, 'day') && 'rbc-today')\n      }, drilldownView ? React.createElement(\"a\", {\n        href: \"#\",\n        onClick: function onClick(e) {\n          return _this2.handleHeaderClick(date, drilldownView, e);\n        }\n      }, header) : React.createElement(\"span\", null, header));\n    });\n  };\n\n  _proto.render = function render() {\n    var _this3 = this;\n\n    var _this$props3 = this.props,\n        width = _this$props3.width,\n        rtl = _this$props3.rtl,\n        resources = _this$props3.resources,\n        range$$1 = _this$props3.range,\n        events$$1 = _this$props3.events,\n        getNow = _this$props3.getNow,\n        accessors = _this$props3.accessors,\n        selectable = _this$props3.selectable,\n        components = _this$props3.components,\n        getters = _this$props3.getters,\n        scrollRef = _this$props3.scrollRef,\n        localizer = _this$props3.localizer,\n        isOverflowing = _this$props3.isOverflowing,\n        _this$props3$componen = _this$props3.components,\n        TimeGutterHeader = _this$props3$componen.timeGutterHeader,\n        _this$props3$componen2 = _this$props3$componen.resourceHeader,\n        ResourceHeaderComponent = _this$props3$componen2 === void 0 ? ResourceHeader : _this$props3$componen2;\n    var style = {};\n\n    if (isOverflowing) {\n      style[rtl ? 'marginLeft' : 'marginRight'] = scrollbarSize() + \"px\";\n    }\n\n    var groupedEvents = resources.groupEvents(events$$1);\n    return React.createElement(\"div\", {\n      style: style,\n      ref: scrollRef,\n      className: cn('rbc-time-header', isOverflowing && 'rbc-overflowing')\n    }, React.createElement(\"div\", {\n      className: \"rbc-label rbc-time-header-gutter\",\n      style: {\n        width: width,\n        minWidth: width,\n        maxWidth: width\n      }\n    }, TimeGutterHeader && React.createElement(TimeGutterHeader, null)), resources.map(function (_ref, idx) {\n      var id = _ref[0],\n          resource = _ref[1];\n      return React.createElement(\"div\", {\n        className: \"rbc-time-header-content\",\n        key: id || idx\n      }, resource && React.createElement(\"div\", {\n        className: \"rbc-row rbc-row-resource\",\n        key: \"resource_\" + idx\n      }, React.createElement(\"div\", {\n        className: \"rbc-header\"\n      }, React.createElement(ResourceHeaderComponent, {\n        index: idx,\n        label: accessors.resourceTitle(resource),\n        resource: resource\n      }))), React.createElement(\"div\", {\n        className: \"rbc-row rbc-time-header-cell\" + (range$$1.length <= 1 ? ' rbc-time-header-cell-single-day' : '')\n      }, _this3.renderHeaderCells(range$$1)), React.createElement(DateContentRow, {\n        isAllDay: true,\n        rtl: rtl,\n        getNow: getNow,\n        minRows: 2,\n        range: range$$1,\n        events: groupedEvents.get(id) || [],\n        resourceId: resource && id,\n        className: \"rbc-allday-cell\",\n        selectable: selectable,\n        selected: _this3.props.selected,\n        components: components,\n        accessors: accessors,\n        getters: getters,\n        localizer: localizer,\n        onSelect: _this3.props.onSelectEvent,\n        onDoubleClick: _this3.props.onDoubleClickEvent,\n        onSelectSlot: _this3.props.onSelectSlot,\n        longPressThreshold: _this3.props.longPressThreshold\n      }));\n    }));\n  };\n\n  return TimeGridHeader;\n}(React.Component);\n\nTimeGridHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  range: PropTypes.array.isRequired,\n  events: PropTypes.array.isRequired,\n  resources: PropTypes.object,\n  getNow: PropTypes.func.isRequired,\n  isOverflowing: PropTypes.bool,\n  rtl: PropTypes.bool,\n  width: PropTypes.number,\n  localizer: PropTypes.object.isRequired,\n  accessors: PropTypes.object.isRequired,\n  components: PropTypes.object.isRequired,\n  getters: PropTypes.object.isRequired,\n  selected: PropTypes.object,\n  selectable: PropTypes.oneOf([true, false, 'ignoreEvents']),\n  longPressThreshold: PropTypes.number,\n  onSelectSlot: PropTypes.func,\n  onSelectEvent: PropTypes.func,\n  onDoubleClickEvent: PropTypes.func,\n  onDrillDown: PropTypes.func,\n  getDrilldownView: PropTypes.func.isRequired,\n  scrollRef: PropTypes.any\n} : {};\nvar NONE = {};\n\nfunction Resources(resources, accessors) {\n  return {\n    map: function map(fn) {\n      if (!resources) return [fn([NONE, null], 0)];\n      return resources.map(function (resource, idx) {\n        return fn([accessors.resourceId(resource), resource], idx);\n      });\n    },\n    groupEvents: function groupEvents(events$$1) {\n      var eventsByResource = new Map();\n\n      if (!resources) {\n        // Return all events if resources are not provided\n        eventsByResource.set(NONE, events$$1);\n        return eventsByResource;\n      }\n\n      events$$1.forEach(function (event) {\n        var id = accessors.resource(event) || NONE;\n        var resourceEvents = eventsByResource.get(id) || [];\n        resourceEvents.push(event);\n        eventsByResource.set(id, resourceEvents);\n      });\n      return eventsByResource;\n    }\n  };\n}\n\nvar TimeGrid =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(TimeGrid, _Component);\n\n  function TimeGrid(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n\n    _this.handleScroll = function (e) {\n      if (_this.scrollRef.current) {\n        _this.scrollRef.current.scrollLeft = e.target.scrollLeft;\n      }\n    };\n\n    _this.handleResize = function () {\n      raf.cancel(_this.rafHandle);\n      _this.rafHandle = raf(_this.checkOverflow);\n    };\n\n    _this.gutterRef = function (ref) {\n      _this.gutter = ref && findDOMNode(ref);\n    };\n\n    _this.handleSelectAlldayEvent = function () {\n      //cancel any pending selections so only the event click goes through.\n      _this.clearSelection();\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      notify(_this.props.onSelectEvent, args);\n    };\n\n    _this.handleSelectAllDaySlot = function (slots, slotInfo) {\n      var onSelectSlot = _this.props.onSelectSlot;\n      notify(onSelectSlot, {\n        slots: slots,\n        start: slots[0],\n        end: slots[slots.length - 1],\n        action: slotInfo.action\n      });\n    };\n\n    _this.checkOverflow = function () {\n      if (_this._updatingOverflow) return;\n      var isOverflowing = _this.refs.content.scrollHeight > _this.refs.content.clientHeight;\n\n      if (_this.state.isOverflowing !== isOverflowing) {\n        _this._updatingOverflow = true;\n\n        _this.setState({\n          isOverflowing: isOverflowing\n        }, function () {\n          _this._updatingOverflow = false;\n        });\n      }\n    };\n\n    _this.memoizedResources = memoize(function (resources, accessors) {\n      return Resources(resources, accessors);\n    });\n    _this.state = {\n      gutterWidth: undefined,\n      isOverflowing: null\n    };\n    _this.scrollRef = React.createRef();\n    return _this;\n  }\n\n  var _proto = TimeGrid.prototype;\n\n  _proto.componentWillMount = function componentWillMount() {\n    this.calculateScroll();\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.checkOverflow();\n\n    if (this.props.width == null) {\n      this.measureGutter();\n    }\n\n    this.applyScroll();\n    window.addEventListener('resize', this.handleResize);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    window.removeEventListener('resize', this.handleResize);\n    raf.cancel(this.rafHandle);\n\n    if (this.measureGutterAnimationFrameRequest) {\n      window.cancelAnimationFrame(this.measureGutterAnimationFrameRequest);\n    }\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    if (this.props.width == null) {\n      this.measureGutter();\n    }\n\n    this.applyScroll(); //this.checkOverflow()\n  };\n\n  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var _this$props = this.props,\n        range$$1 = _this$props.range,\n        scrollToTime = _this$props.scrollToTime; // When paginating, reset scroll\n\n    if (!dates.eq(nextProps.range[0], range$$1[0], 'minute') || !dates.eq(nextProps.scrollToTime, scrollToTime, 'minute')) {\n      this.calculateScroll(nextProps);\n    }\n  };\n\n  _proto.renderEvents = function renderEvents(range$$1, events$$1, now) {\n    var _this2 = this;\n\n    var _this$props2 = this.props,\n        min = _this$props2.min,\n        max = _this$props2.max,\n        components = _this$props2.components,\n        accessors = _this$props2.accessors,\n        localizer = _this$props2.localizer;\n    var resources = this.memoizedResources(this.props.resources, accessors);\n    var groupedEvents = resources.groupEvents(events$$1);\n    return resources.map(function (_ref, i) {\n      var id = _ref[0],\n          resource = _ref[1];\n      return range$$1.map(function (date, jj) {\n        var daysEvents = (groupedEvents.get(id) || []).filter(function (event) {\n          return dates.inRange(date, accessors.start(event), accessors.end(event), 'day');\n        });\n        return React.createElement(DayColumn, _extends({}, _this2.props, {\n          localizer: localizer,\n          min: dates.merge(date, min),\n          max: dates.merge(date, max),\n          resource: resource && id,\n          components: components,\n          isNow: dates.eq(date, now, 'day'),\n          key: i + '-' + jj,\n          date: date,\n          events: daysEvents\n        }));\n      });\n    });\n  };\n\n  _proto.render = function render() {\n    var _this$props3 = this.props,\n        events$$1 = _this$props3.events,\n        range$$1 = _this$props3.range,\n        width = _this$props3.width,\n        selected = _this$props3.selected,\n        getNow = _this$props3.getNow,\n        resources = _this$props3.resources,\n        components = _this$props3.components,\n        accessors = _this$props3.accessors,\n        getters = _this$props3.getters,\n        localizer = _this$props3.localizer,\n        min = _this$props3.min,\n        max = _this$props3.max,\n        showMultiDayTimes = _this$props3.showMultiDayTimes,\n        longPressThreshold = _this$props3.longPressThreshold;\n    width = width || this.state.gutterWidth;\n    var start = range$$1[0],\n        end = range$$1[range$$1.length - 1];\n    this.slots = range$$1.length;\n    var allDayEvents = [],\n        rangeEvents = [];\n    events$$1.forEach(function (event) {\n      if (inRange(event, start, end, accessors)) {\n        var eStart = accessors.start(event),\n            eEnd = accessors.end(event);\n\n        if (accessors.allDay(event) || dates.isJustDate(eStart) && dates.isJustDate(eEnd) || !showMultiDayTimes && !dates.eq(eStart, eEnd, 'day')) {\n          allDayEvents.push(event);\n        } else {\n          rangeEvents.push(event);\n        }\n      }\n    });\n    allDayEvents.sort(function (a, b) {\n      return sortEvents(a, b, accessors);\n    });\n    return React.createElement(\"div\", {\n      className: cn('rbc-time-view', resources && 'rbc-time-view-resources')\n    }, React.createElement(TimeGridHeader, {\n      range: range$$1,\n      events: allDayEvents,\n      width: width,\n      getNow: getNow,\n      localizer: localizer,\n      selected: selected,\n      resources: this.memoizedResources(resources, accessors),\n      selectable: this.props.selectable,\n      accessors: accessors,\n      getters: getters,\n      components: components,\n      scrollRef: this.scrollRef,\n      isOverflowing: this.state.isOverflowing,\n      longPressThreshold: longPressThreshold,\n      onSelectSlot: this.handleSelectAllDaySlot,\n      onSelectEvent: this.handleSelectAlldayEvent,\n      onDoubleClickEvent: this.props.onDoubleClickEvent,\n      onDrillDown: this.props.onDrillDown,\n      getDrilldownView: this.props.getDrilldownView\n    }), React.createElement(\"div\", {\n      ref: \"content\",\n      className: \"rbc-time-content\",\n      onScroll: this.handleScroll\n    }, React.createElement(TimeGutter, {\n      date: start,\n      ref: this.gutterRef,\n      localizer: localizer,\n      min: dates.merge(start, min),\n      max: dates.merge(start, max),\n      step: this.props.step,\n      getNow: this.props.getNow,\n      timeslots: this.props.timeslots,\n      components: components,\n      className: \"rbc-time-gutter\"\n    }), this.renderEvents(range$$1, rangeEvents, getNow())));\n  };\n\n  _proto.clearSelection = function clearSelection() {\n    clearTimeout(this._selectTimer);\n    this._pendingSelection = [];\n  };\n\n  _proto.measureGutter = function measureGutter() {\n    var _this3 = this;\n\n    if (this.measureGutterAnimationFrameRequest) {\n      window.cancelAnimationFrame(this.measureGutterAnimationFrameRequest);\n    }\n\n    this.measureGutterAnimationFrameRequest = window.requestAnimationFrame(function () {\n      var width = getWidth(_this3.gutter);\n\n      if (width && _this3.state.gutterWidth !== width) {\n        _this3.setState({\n          gutterWidth: width\n        });\n      }\n    });\n  };\n\n  _proto.applyScroll = function applyScroll() {\n    if (this._scrollRatio) {\n      var content = this.refs.content;\n      content.scrollTop = content.scrollHeight * this._scrollRatio; // Only do this once\n\n      this._scrollRatio = null;\n    }\n  };\n\n  _proto.calculateScroll = function calculateScroll(props) {\n    if (props === void 0) {\n      props = this.props;\n    }\n\n    var _props = props,\n        min = _props.min,\n        max = _props.max,\n        scrollToTime = _props.scrollToTime;\n    var diffMillis = scrollToTime - dates.startOf(scrollToTime, 'day');\n    var totalMillis = dates.diff(max, min);\n    this._scrollRatio = diffMillis / totalMillis;\n  };\n\n  return TimeGrid;\n}(Component);\n\nTimeGrid.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  events: PropTypes.array.isRequired,\n  resources: PropTypes.array,\n  step: PropTypes.number,\n  timeslots: PropTypes.number,\n  range: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  min: PropTypes.instanceOf(Date),\n  max: PropTypes.instanceOf(Date),\n  getNow: PropTypes.func.isRequired,\n  scrollToTime: PropTypes.instanceOf(Date),\n  showMultiDayTimes: PropTypes.bool,\n  rtl: PropTypes.bool,\n  width: PropTypes.number,\n  accessors: PropTypes.object.isRequired,\n  components: PropTypes.object.isRequired,\n  getters: PropTypes.object.isRequired,\n  localizer: PropTypes.object.isRequired,\n  selected: PropTypes.object,\n  selectable: PropTypes.oneOf([true, false, 'ignoreEvents']),\n  longPressThreshold: PropTypes.number,\n  onNavigate: PropTypes.func,\n  onSelectSlot: PropTypes.func,\n  onSelectEnd: PropTypes.func,\n  onSelectStart: PropTypes.func,\n  onSelectEvent: PropTypes.func,\n  onDoubleClickEvent: PropTypes.func,\n  onDrillDown: PropTypes.func,\n  getDrilldownView: PropTypes.func.isRequired\n} : {};\nTimeGrid.defaultProps = {\n  step: 30,\n  timeslots: 2,\n  min: dates.startOf(new Date(), 'day'),\n  max: dates.endOf(new Date(), 'day'),\n  scrollToTime: dates.startOf(new Date(), 'day')\n};\n\nvar Day =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Day, _React$Component);\n\n  function Day() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Day.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        date = _this$props.date,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"date\"]);\n\n    var range$$1 = Day.range(date);\n    return React.createElement(TimeGrid, _extends({}, props, {\n      range: range$$1,\n      eventOffset: 10\n    }));\n  };\n\n  return Day;\n}(React.Component);\n\nDay.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  date: PropTypes.instanceOf(Date).isRequired\n} : {};\n\nDay.range = function (date) {\n  return [dates.startOf(date, 'day')];\n};\n\nDay.navigate = function (date, action) {\n  switch (action) {\n    case navigate.PREVIOUS:\n      return dates.add(date, -1, 'day');\n\n    case navigate.NEXT:\n      return dates.add(date, 1, 'day');\n\n    default:\n      return date;\n  }\n};\n\nDay.title = function (date, _ref) {\n  var localizer = _ref.localizer;\n  return localizer.format(date, 'dayHeaderFormat');\n};\n\nvar Week =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Week, _React$Component);\n\n  function Week() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Week.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        date = _this$props.date,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"date\"]);\n\n    var range$$1 = Week.range(date, this.props);\n    return React.createElement(TimeGrid, _extends({}, props, {\n      range: range$$1,\n      eventOffset: 15\n    }));\n  };\n\n  return Week;\n}(React.Component);\n\nWeek.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  date: PropTypes.instanceOf(Date).isRequired\n} : {};\nWeek.defaultProps = TimeGrid.defaultProps;\n\nWeek.navigate = function (date, action) {\n  switch (action) {\n    case navigate.PREVIOUS:\n      return dates.add(date, -1, 'week');\n\n    case navigate.NEXT:\n      return dates.add(date, 1, 'week');\n\n    default:\n      return date;\n  }\n};\n\nWeek.range = function (date, _ref) {\n  var localizer = _ref.localizer;\n  var firstOfWeek = localizer.startOfWeek();\n  var start = dates.startOf(date, 'week', firstOfWeek);\n  var end = dates.endOf(date, 'week', firstOfWeek);\n  return dates.range(start, end);\n};\n\nWeek.title = function (date, _ref2) {\n  var localizer = _ref2.localizer;\n\n  var _Week$range = Week.range(date, {\n    localizer: localizer\n  }),\n      start = _Week$range[0],\n      rest = _Week$range.slice(1);\n\n  return localizer.format({\n    start: start,\n    end: rest.pop()\n  }, 'dayRangeHeaderFormat');\n};\n\nfunction workWeekRange(date, options) {\n  return Week.range(date, options).filter(function (d) {\n    return [6, 0].indexOf(d.getDay()) === -1;\n  });\n}\n\nvar WorkWeek =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(WorkWeek, _React$Component);\n\n  function WorkWeek() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = WorkWeek.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        date = _this$props.date,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"date\"]);\n\n    var range$$1 = workWeekRange(date, this.props);\n    return React.createElement(TimeGrid, _extends({}, props, {\n      range: range$$1,\n      eventOffset: 15\n    }));\n  };\n\n  return WorkWeek;\n}(React.Component);\n\nWorkWeek.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  date: PropTypes.instanceOf(Date).isRequired\n} : {};\nWorkWeek.defaultProps = TimeGrid.defaultProps;\nWorkWeek.range = workWeekRange;\nWorkWeek.navigate = Week.navigate;\n\nWorkWeek.title = function (date, _ref) {\n  var localizer = _ref.localizer;\n\n  var _workWeekRange = workWeekRange(date, {\n    localizer: localizer\n  }),\n      start = _workWeekRange[0],\n      rest = _workWeekRange.slice(1);\n\n  return localizer.format({\n    start: start,\n    end: rest.pop()\n  }, 'dayRangeHeaderFormat');\n};\n\nvar Agenda =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Agenda, _React$Component);\n\n  function Agenda() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _this.renderDay = function (day, events$$1, dayKey) {\n      var _this$props = _this.props,\n          selected = _this$props.selected,\n          getters = _this$props.getters,\n          accessors = _this$props.accessors,\n          localizer = _this$props.localizer,\n          _this$props$component = _this$props.components,\n          Event = _this$props$component.event,\n          AgendaDate = _this$props$component.date;\n      events$$1 = events$$1.filter(function (e) {\n        return inRange(e, dates.startOf(day, 'day'), dates.endOf(day, 'day'), accessors);\n      });\n      return events$$1.map(function (event, idx) {\n        var title = accessors.title(event);\n        var end = accessors.end(event);\n        var start = accessors.start(event);\n        var userProps = getters.eventProp(event, start, end, isSelected(event, selected));\n        var dateLabel = idx === 0 && localizer.format(day, 'agendaDateFormat');\n        var first = idx === 0 ? React.createElement(\"td\", {\n          rowSpan: events$$1.length,\n          className: \"rbc-agenda-date-cell\"\n        }, AgendaDate ? React.createElement(AgendaDate, {\n          day: day,\n          label: dateLabel\n        }) : dateLabel) : false;\n        return React.createElement(\"tr\", {\n          key: dayKey + '_' + idx,\n          className: userProps.className,\n          style: userProps.style\n        }, first, React.createElement(\"td\", {\n          className: \"rbc-agenda-time-cell\"\n        }, _this.timeRangeLabel(day, event)), React.createElement(\"td\", {\n          className: \"rbc-agenda-event-cell\"\n        }, Event ? React.createElement(Event, {\n          event: event,\n          title: title\n        }) : title));\n      }, []);\n    };\n\n    _this.timeRangeLabel = function (day, event) {\n      var _this$props2 = _this.props,\n          accessors = _this$props2.accessors,\n          localizer = _this$props2.localizer,\n          components = _this$props2.components;\n      var labelClass = '',\n          TimeComponent = components.time,\n          label = localizer.messages.allDay;\n      var end = accessors.end(event);\n      var start = accessors.start(event);\n\n      if (!accessors.allDay(event)) {\n        if (dates.eq(start, end, 'day')) {\n          label = localizer.format({\n            start: start,\n            end: end\n          }, 'agendaTimeRangeFormat');\n        } else if (dates.eq(day, start, 'day')) {\n          label = localizer.format(start, 'agendaTimeFormat');\n        } else if (dates.eq(day, end, 'day')) {\n          label = localizer.format(end, 'agendaTimeFormat');\n        }\n      }\n\n      if (dates.gt(day, start, 'day')) labelClass = 'rbc-continues-prior';\n      if (dates.lt(day, end, 'day')) labelClass += ' rbc-continues-after';\n      return React.createElement(\"span\", {\n        className: labelClass.trim()\n      }, TimeComponent ? React.createElement(TimeComponent, {\n        event: event,\n        day: day,\n        label: label\n      }) : label);\n    };\n\n    _this._adjustHeader = function () {\n      if (!_this.refs.tbody) return;\n      var header = _this.refs.header;\n      var firstRow = _this.refs.tbody.firstChild;\n      if (!firstRow) return;\n      var isOverflowing = _this.refs.content.scrollHeight > _this.refs.content.clientHeight;\n      var widths = _this._widths || [];\n      _this._widths = [getWidth(firstRow.children[0]), getWidth(firstRow.children[1])];\n\n      if (widths[0] !== _this._widths[0] || widths[1] !== _this._widths[1]) {\n        _this.refs.dateCol.style.width = _this._widths[0] + 'px';\n        _this.refs.timeCol.style.width = _this._widths[1] + 'px';\n      }\n\n      if (isOverflowing) {\n        classes.addClass(header, 'rbc-header-overflowing');\n        header.style.marginRight = scrollbarSize() + 'px';\n      } else {\n        classes.removeClass(header, 'rbc-header-overflowing');\n      }\n    };\n\n    return _this;\n  }\n\n  var _proto = Agenda.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this._adjustHeader();\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    this._adjustHeader();\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props3 = this.props,\n        length = _this$props3.length,\n        date = _this$props3.date,\n        events$$1 = _this$props3.events,\n        accessors = _this$props3.accessors,\n        localizer = _this$props3.localizer;\n    var messages = localizer.messages;\n    var end = dates.add(date, length, 'day');\n    var range$$1 = dates.range(date, end, 'day');\n    events$$1 = events$$1.filter(function (event) {\n      return inRange(event, date, end, accessors);\n    });\n    events$$1.sort(function (a, b) {\n      return +accessors.start(a) - +accessors.start(b);\n    });\n    return React.createElement(\"div\", {\n      className: \"rbc-agenda-view\"\n    }, events$$1.length !== 0 ? React.createElement(React.Fragment, null, React.createElement(\"table\", {\n      ref: \"header\",\n      className: \"rbc-agenda-table\"\n    }, React.createElement(\"thead\", null, React.createElement(\"tr\", null, React.createElement(\"th\", {\n      className: \"rbc-header\",\n      ref: \"dateCol\"\n    }, messages.date), React.createElement(\"th\", {\n      className: \"rbc-header\",\n      ref: \"timeCol\"\n    }, messages.time), React.createElement(\"th\", {\n      className: \"rbc-header\"\n    }, messages.event)))), React.createElement(\"div\", {\n      className: \"rbc-agenda-content\",\n      ref: \"content\"\n    }, React.createElement(\"table\", {\n      className: \"rbc-agenda-table\"\n    }, React.createElement(\"tbody\", {\n      ref: \"tbody\"\n    }, range$$1.map(function (day, idx) {\n      return _this2.renderDay(day, events$$1, idx);\n    }))))) : React.createElement(\"span\", {\n      className: \"rbc-agenda-empty\"\n    }, messages.noEventsInRange));\n  };\n\n  return Agenda;\n}(React.Component);\n\nAgenda.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  events: PropTypes.array,\n  date: PropTypes.instanceOf(Date),\n  length: PropTypes.number.isRequired,\n  selected: PropTypes.object,\n  accessors: PropTypes.object.isRequired,\n  components: PropTypes.object.isRequired,\n  getters: PropTypes.object.isRequired,\n  localizer: PropTypes.object.isRequired\n} : {};\nAgenda.defaultProps = {\n  length: 30\n};\n\nAgenda.range = function (start, _ref) {\n  var _ref$length = _ref.length,\n      length = _ref$length === void 0 ? Agenda.defaultProps.length : _ref$length;\n  var end = dates.add(start, length, 'day');\n  return {\n    start: start,\n    end: end\n  };\n};\n\nAgenda.navigate = function (date, action, _ref2) {\n  var _ref2$length = _ref2.length,\n      length = _ref2$length === void 0 ? Agenda.defaultProps.length : _ref2$length;\n\n  switch (action) {\n    case navigate.PREVIOUS:\n      return dates.add(date, -length, 'day');\n\n    case navigate.NEXT:\n      return dates.add(date, length, 'day');\n\n    default:\n      return date;\n  }\n};\n\nAgenda.title = function (start, _ref3) {\n  var _ref3$length = _ref3.length,\n      length = _ref3$length === void 0 ? Agenda.defaultProps.length : _ref3$length,\n      localizer = _ref3.localizer;\n  var end = dates.add(start, length, 'day');\n  return localizer.format({\n    start: start,\n    end: end\n  }, 'agendaHeaderFormat');\n};\n\nvar _VIEWS;\n\nvar VIEWS = (_VIEWS = {}, _VIEWS[views.MONTH] = MonthView, _VIEWS[views.WEEK] = Week, _VIEWS[views.WORK_WEEK] = WorkWeek, _VIEWS[views.DAY] = Day, _VIEWS[views.AGENDA] = Agenda, _VIEWS);\n\nfunction moveDate(View, _ref) {\n  var action = _ref.action,\n      date = _ref.date,\n      today = _ref.today,\n      props = _objectWithoutPropertiesLoose(_ref, [\"action\", \"date\", \"today\"]);\n\n  View = typeof View === 'string' ? VIEWS[View] : View;\n\n  switch (action) {\n    case navigate.TODAY:\n      date = today || new Date();\n      break;\n\n    case navigate.DATE:\n      break;\n\n    default:\n      !(View && typeof View.navigate === 'function') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Calendar View components must implement a static `.navigate(date, action)` method.s') : invariant(false) : void 0;\n      date = View.navigate(date, action, props);\n  }\n\n  return date;\n}\n\nvar Toolbar =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Toolbar, _React$Component);\n\n  function Toolbar() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _this.navigate = function (action) {\n      _this.props.onNavigate(action);\n    };\n\n    _this.view = function (view) {\n      _this.props.onView(view);\n    };\n\n    return _this;\n  }\n\n  var _proto = Toolbar.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        messages = _this$props.localizer.messages,\n        label = _this$props.label;\n    return React.createElement(\"div\", {\n      className: \"rbc-toolbar\"\n    }, React.createElement(\"span\", {\n      className: \"rbc-btn-group\"\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.navigate.bind(null, navigate.TODAY)\n    }, messages.today), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.navigate.bind(null, navigate.PREVIOUS)\n    }, messages.previous), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.navigate.bind(null, navigate.NEXT)\n    }, messages.next)), React.createElement(\"span\", {\n      className: \"rbc-toolbar-label\"\n    }, label), React.createElement(\"span\", {\n      className: \"rbc-btn-group\"\n    }, this.viewNamesGroup(messages)));\n  };\n\n  _proto.viewNamesGroup = function viewNamesGroup(messages) {\n    var _this2 = this;\n\n    var viewNames = this.props.views;\n    var view = this.props.view;\n\n    if (viewNames.length > 1) {\n      return viewNames.map(function (name) {\n        return React.createElement(\"button\", {\n          type: \"button\",\n          key: name,\n          className: cn({\n            'rbc-active': view === name\n          }),\n          onClick: _this2.view.bind(null, name)\n        }, messages[name]);\n      });\n    }\n  };\n\n  return Toolbar;\n}(React.Component);\n\nToolbar.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  view: PropTypes.string.isRequired,\n  views: PropTypes.arrayOf(PropTypes.string).isRequired,\n  label: PropTypes.node.isRequired,\n  localizer: PropTypes.object,\n  onNavigate: PropTypes.func.isRequired,\n  onView: PropTypes.func.isRequired\n} : {};\n/**\n * Retrieve via an accessor-like property\n *\n *    accessor(obj, 'name')   // => retrieves obj['name']\n *    accessor(data, func)    // => retrieves func(data)\n *    ... otherwise null\n */\n\nfunction accessor$1(data, field) {\n  var value = null;\n  if (typeof field === 'function') value = field(data);else if (typeof field === 'string' && typeof data === 'object' && data != null && field in data) value = data[field];\n  return value;\n}\n\nvar wrapAccessor = function wrapAccessor(acc) {\n  return function (data) {\n    return accessor$1(data, acc);\n  };\n};\n\nfunction viewNames$1(_views) {\n  return !Array.isArray(_views) ? Object.keys(_views) : _views;\n}\n\nfunction isValidView(view, _ref) {\n  var _views = _ref.views;\n  var names = viewNames$1(_views);\n  return names.indexOf(view) !== -1;\n}\n/**\n * react-big-calendar is a full featured Calendar component for managing events and dates. It uses\n * modern `flexbox` for layout, making it super responsive and performant. Leaving most of the layout heavy lifting\n * to the browser. __note:__ The default styles use `height: 100%` which means your container must set an explicit\n * height (feel free to adjust the styles to suit your specific needs).\n *\n * Big Calendar is unopiniated about editing and moving events, preferring to let you implement it in a way that makes\n * the most sense to your app. It also tries not to be prescriptive about your event data structures, just tell it\n * how to find the start and end datetimes and you can pass it whatever you want.\n *\n * One thing to note is that, `react-big-calendar` treats event start/end dates as an _exclusive_ range.\n * which means that the event spans up to, but not including, the end date. In the case\n * of displaying events on whole days, end dates are rounded _up_ to the next day. So an\n * event ending on `Apr 8th 12:00:00 am` will not appear on the 8th, whereas one ending\n * on `Apr 8th 12:01:00 am` will. If you want _inclusive_ ranges consider providing a\n * function `endAccessor` that returns the end date + 1 day for those events that end at midnight.\n */\n\n\nvar Calendar =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Calendar, _React$Component);\n\n  function Calendar() {\n    var _this;\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;\n\n    _this.getViews = function () {\n      var views$$1 = _this.props.views;\n\n      if (Array.isArray(views$$1)) {\n        return transform(views$$1, function (obj, name) {\n          return obj[name] = VIEWS[name];\n        }, {});\n      }\n\n      if (typeof views$$1 === 'object') {\n        return mapValues(views$$1, function (value, key) {\n          if (value === true) {\n            return VIEWS[key];\n          }\n\n          return value;\n        });\n      }\n\n      return VIEWS;\n    };\n\n    _this.getView = function () {\n      var views$$1 = _this.getViews();\n\n      return views$$1[_this.props.view];\n    };\n\n    _this.getDrilldownView = function (date) {\n      var _this$props = _this.props,\n          view = _this$props.view,\n          drilldownView = _this$props.drilldownView,\n          getDrilldownView = _this$props.getDrilldownView;\n      if (!getDrilldownView) return drilldownView;\n      return getDrilldownView(date, view, Object.keys(_this.getViews()));\n    };\n\n    _this.handleRangeChange = function (date, viewComponent, view) {\n      var _this$props2 = _this.props,\n          onRangeChange = _this$props2.onRangeChange,\n          localizer = _this$props2.localizer;\n\n      if (onRangeChange) {\n        if (viewComponent.range) {\n          onRangeChange(viewComponent.range(date, {\n            localizer: localizer\n          }), view);\n        } else {\n          process.env.NODE_ENV !== \"production\" ? warning(true, 'onRangeChange prop not supported for this view') : void 0;\n        }\n      }\n    };\n\n    _this.handleNavigate = function (action, newDate) {\n      var _this$props3 = _this.props,\n          view = _this$props3.view,\n          date = _this$props3.date,\n          getNow = _this$props3.getNow,\n          onNavigate = _this$props3.onNavigate,\n          props = _objectWithoutPropertiesLoose(_this$props3, [\"view\", \"date\", \"getNow\", \"onNavigate\"]);\n\n      var ViewComponent = _this.getView();\n\n      var today = getNow();\n      date = moveDate(ViewComponent, _extends({}, props, {\n        action: action,\n        date: newDate || date || today,\n        today: today\n      }));\n      onNavigate(date, view, action);\n\n      _this.handleRangeChange(date, ViewComponent);\n    };\n\n    _this.handleViewChange = function (view) {\n      if (view !== _this.props.view && isValidView(view, _this.props)) {\n        _this.props.onView(view);\n      }\n\n      var views$$1 = _this.getViews();\n\n      _this.handleRangeChange(_this.props.date || _this.props.getNow(), views$$1[view], view);\n    };\n\n    _this.handleSelectEvent = function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      notify(_this.props.onSelectEvent, args);\n    };\n\n    _this.handleDoubleClickEvent = function () {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      notify(_this.props.onDoubleClickEvent, args);\n    };\n\n    _this.handleSelectSlot = function (slotInfo) {\n      notify(_this.props.onSelectSlot, slotInfo);\n    };\n\n    _this.handleDrillDown = function (date, view) {\n      var onDrillDown = _this.props.onDrillDown;\n\n      if (onDrillDown) {\n        onDrillDown(date, view, _this.drilldownView);\n        return;\n      }\n\n      if (view) _this.handleViewChange(view);\n\n      _this.handleNavigate(navigate.DATE, date);\n    };\n\n    _this.state = {\n      context: _this.getContext(_this.props)\n    };\n    return _this;\n  }\n\n  var _proto = Calendar.prototype;\n\n  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    this.setState({\n      context: this.getContext(nextProps)\n    });\n  };\n\n  _proto.getContext = function getContext(_ref2) {\n    var startAccessor = _ref2.startAccessor,\n        endAccessor = _ref2.endAccessor,\n        allDayAccessor = _ref2.allDayAccessor,\n        tooltipAccessor = _ref2.tooltipAccessor,\n        titleAccessor = _ref2.titleAccessor,\n        resourceAccessor = _ref2.resourceAccessor,\n        resourceIdAccessor = _ref2.resourceIdAccessor,\n        resourceTitleAccessor = _ref2.resourceTitleAccessor,\n        eventPropGetter = _ref2.eventPropGetter,\n        slotPropGetter = _ref2.slotPropGetter,\n        dayPropGetter = _ref2.dayPropGetter,\n        view = _ref2.view,\n        views$$1 = _ref2.views,\n        localizer = _ref2.localizer,\n        culture = _ref2.culture,\n        _ref2$messages = _ref2.messages,\n        messages$$1 = _ref2$messages === void 0 ? {} : _ref2$messages,\n        _ref2$components = _ref2.components,\n        components = _ref2$components === void 0 ? {} : _ref2$components,\n        _ref2$formats = _ref2.formats,\n        formats = _ref2$formats === void 0 ? {} : _ref2$formats;\n    var names = viewNames$1(views$$1);\n    var msgs = messages(messages$$1);\n    return {\n      viewNames: names,\n      localizer: mergeWithDefaults(localizer, culture, formats, msgs),\n      getters: {\n        eventProp: function eventProp() {\n          return eventPropGetter && eventPropGetter.apply(void 0, arguments) || {};\n        },\n        slotProp: function slotProp() {\n          return slotPropGetter && slotPropGetter.apply(void 0, arguments) || {};\n        },\n        dayProp: function dayProp() {\n          return dayPropGetter && dayPropGetter.apply(void 0, arguments) || {};\n        }\n      },\n      components: defaults(components[view] || {}, omit(components, names), {\n        eventWrapper: NoopWrapper,\n        eventContainerWrapper: NoopWrapper,\n        dayWrapper: NoopWrapper,\n        dateCellWrapper: NoopWrapper,\n        weekWrapper: NoopWrapper,\n        timeSlotWrapper: NoopWrapper\n      }),\n      accessors: {\n        start: wrapAccessor(startAccessor),\n        end: wrapAccessor(endAccessor),\n        allDay: wrapAccessor(allDayAccessor),\n        tooltip: wrapAccessor(tooltipAccessor),\n        title: wrapAccessor(titleAccessor),\n        resource: wrapAccessor(resourceAccessor),\n        resourceId: wrapAccessor(resourceIdAccessor),\n        resourceTitle: wrapAccessor(resourceTitleAccessor)\n      }\n    };\n  };\n\n  _proto.render = function render() {\n    var _this$props4 = this.props,\n        view = _this$props4.view,\n        toolbar = _this$props4.toolbar,\n        events$$1 = _this$props4.events,\n        style = _this$props4.style,\n        className = _this$props4.className,\n        elementProps = _this$props4.elementProps,\n        current = _this$props4.date,\n        getNow = _this$props4.getNow,\n        length = _this$props4.length,\n        showMultiDayTimes = _this$props4.showMultiDayTimes,\n        onShowMore = _this$props4.onShowMore,\n        _0 = _this$props4.components,\n        _1 = _this$props4.formats,\n        _2 = _this$props4.messages,\n        _3 = _this$props4.culture,\n        props = _objectWithoutPropertiesLoose(_this$props4, [\"view\", \"toolbar\", \"events\", \"style\", \"className\", \"elementProps\", \"date\", \"getNow\", \"length\", \"showMultiDayTimes\", \"onShowMore\", \"components\", \"formats\", \"messages\", \"culture\"]);\n\n    current = current || getNow();\n    var View = this.getView();\n    var _this$state$context = this.state.context,\n        accessors = _this$state$context.accessors,\n        components = _this$state$context.components,\n        getters = _this$state$context.getters,\n        localizer = _this$state$context.localizer,\n        viewNames = _this$state$context.viewNames;\n    var CalToolbar = components.toolbar || Toolbar;\n    var label = View.title(current, {\n      localizer: localizer,\n      length: length\n    });\n    return React.createElement(\"div\", _extends({}, elementProps, {\n      className: cn(className, 'rbc-calendar', props.rtl && 'rbc-is-rtl'),\n      style: style\n    }), toolbar && React.createElement(CalToolbar, {\n      date: current,\n      view: view,\n      views: viewNames,\n      label: label,\n      onView: this.handleViewChange,\n      onNavigate: this.handleNavigate,\n      localizer: localizer\n    }), React.createElement(View, _extends({\n      ref: \"view\"\n    }, props, {\n      events: events$$1,\n      date: current,\n      getNow: getNow,\n      length: length,\n      localizer: localizer,\n      getters: getters,\n      components: components,\n      accessors: accessors,\n      showMultiDayTimes: showMultiDayTimes,\n      getDrilldownView: this.getDrilldownView,\n      onNavigate: this.handleNavigate,\n      onDrillDown: this.handleDrillDown,\n      onSelectEvent: this.handleSelectEvent,\n      onDoubleClickEvent: this.handleDoubleClickEvent,\n      onSelectSlot: this.handleSelectSlot,\n      onShowMore: onShowMore\n    })));\n  };\n  /**\n   *\n   * @param date\n   * @param viewComponent\n   * @param {'month'|'week'|'work_week'|'day'|'agenda'} [view] - optional\n   * parameter. It appears when range change on view changing. It could be handy\n   * when you need to have both: range and view type at once, i.e. for manage rbc\n   * state via url\n   */\n\n\n  return Calendar;\n}(React.Component);\n\nCalendar.defaultProps = {\n  elementProps: {},\n  popup: false,\n  toolbar: true,\n  view: views.MONTH,\n  views: [views.MONTH, views.WEEK, views.DAY, views.AGENDA],\n  step: 30,\n  length: 30,\n  drilldownView: views.DAY,\n  titleAccessor: 'title',\n  tooltipAccessor: 'title',\n  allDayAccessor: 'allDay',\n  startAccessor: 'start',\n  endAccessor: 'end',\n  resourceAccessor: 'resourceId',\n  resourceIdAccessor: 'id',\n  resourceTitleAccessor: 'title',\n  longPressThreshold: 250,\n  getNow: function getNow() {\n    return new Date();\n  }\n};\nCalendar.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  localizer: PropTypes.object.isRequired,\n\n  /**\n   * Props passed to main calendar `<div>`.\n   *\n   */\n  elementProps: PropTypes.object,\n\n  /**\n   * The current date value of the calendar. Determines the visible view range.\n   * If `date` is omitted then the result of `getNow` is used; otherwise the\n   * current date is used.\n   *\n   * @controllable onNavigate\n   */\n  date: PropTypes.instanceOf(Date),\n\n  /**\n   * The current view of the calendar.\n   *\n   * @default 'month'\n   * @controllable onView\n   */\n  view: PropTypes.string,\n\n  /**\n   * The initial view set for the Calendar.\n   * @type Calendar.Views ('month'|'week'|'work_week'|'day'|'agenda')\n   * @default 'month'\n   */\n  defaultView: PropTypes.string,\n\n  /**\n   * An array of event objects to display on the calendar. Events objects\n   * can be any shape, as long as the Calendar knows how to retrieve the\n   * following details of the event:\n   *\n   *  - start time\n   *  - end time\n   *  - title\n   *  - whether its an \"all day\" event or not\n   *  - any resource the event may be related to\n   *\n   * Each of these properties can be customized or generated dynamically by\n   * setting the various \"accessor\" props. Without any configuration the default\n   * event should look like:\n   *\n   * ```js\n   * Event {\n   *   title: string,\n   *   start: Date,\n   *   end: Date,\n   *   allDay?: boolean\n   *   resource?: any,\n   * }\n   * ```\n   */\n  events: PropTypes.arrayOf(PropTypes.object),\n\n  /**\n   * Accessor for the event title, used to display event information. Should\n   * resolve to a `renderable` value.\n   *\n   * ```js\n   * string | (event: Object) => string\n   * ```\n   *\n   * @type {(func|string)}\n   */\n  titleAccessor: accessor,\n\n  /**\n   * Accessor for the event tooltip. Should\n   * resolve to a `renderable` value. Removes the tooltip if null.\n   *\n   * ```js\n   * string | (event: Object) => string\n   * ```\n   *\n   * @type {(func|string)}\n   */\n  tooltipAccessor: accessor,\n\n  /**\n   * Determines whether the event should be considered an \"all day\" event and ignore time.\n   * Must resolve to a `boolean` value.\n   *\n   * ```js\n   * string | (event: Object) => boolean\n   * ```\n   *\n   * @type {(func|string)}\n   */\n  allDayAccessor: accessor,\n\n  /**\n   * The start date/time of the event. Must resolve to a JavaScript `Date` object.\n   *\n   * ```js\n   * string | (event: Object) => Date\n   * ```\n   *\n   * @type {(func|string)}\n   */\n  startAccessor: accessor,\n\n  /**\n   * The end date/time of the event. Must resolve to a JavaScript `Date` object.\n   *\n   * ```js\n   * string | (event: Object) => Date\n   * ```\n   *\n   * @type {(func|string)}\n   */\n  endAccessor: accessor,\n\n  /**\n   * Returns the id of the `resource` that the event is a member of. This\n   * id should match at least one resource in the `resources` array.\n   *\n   * ```js\n   * string | (event: Object) => Date\n   * ```\n   *\n   * @type {(func|string)}\n   */\n  resourceAccessor: accessor,\n\n  /**\n   * An array of resource objects that map events to a specific resource.\n   * Resource objects, like events, can be any shape or have any properties,\n   * but should be uniquly identifiable via the `resourceIdAccessor`, as\n   * well as a \"title\" or name as provided by the `resourceTitleAccessor` prop.\n   */\n  resources: PropTypes.arrayOf(PropTypes.object),\n\n  /**\n   * Provides a unique identifier for each resource in the `resources` array\n   *\n   * ```js\n   * string | (resource: Object) => any\n   * ```\n   *\n   * @type {(func|string)}\n   */\n  resourceIdAccessor: accessor,\n\n  /**\n   * Provides a human readable name for the resource object, used in headers.\n   *\n   * ```js\n   * string | (resource: Object) => any\n   * ```\n   *\n   * @type {(func|string)}\n   */\n  resourceTitleAccessor: accessor,\n\n  /**\n   * Determines the current date/time which is highlighted in the views.\n   *\n   * The value affects which day is shaded and which time is shown as\n   * the current time. It also affects the date used by the Today button in\n   * the toolbar.\n   *\n   * Providing a value here can be useful when you are implementing time zones\n   * using the `startAccessor` and `endAccessor` properties.\n   *\n   * @type {func}\n   * @default () => new Date()\n   */\n  getNow: PropTypes.func,\n\n  /**\n   * Callback fired when the `date` value changes.\n   *\n   * @controllable date\n   */\n  onNavigate: PropTypes.func,\n\n  /**\n   * Callback fired when the `view` value changes.\n   *\n   * @controllable view\n   */\n  onView: PropTypes.func,\n\n  /**\n   * Callback fired when date header, or the truncated events links are clicked\n   *\n   */\n  onDrillDown: PropTypes.func,\n\n  /**\n   *\n   * ```js\n   * (dates: Date[] | { start: Date; end: Date }, view?: 'month'|'week'|'work_week'|'day'|'agenda') => void\n   * ```\n   *\n   * Callback fired when the visible date range changes. Returns an Array of dates\n   * or an object with start and end dates for BUILTIN views. Optionally new `view`\n   * will be returned when callback called after view change.\n   *\n   * Custom views may return something different.\n   */\n  onRangeChange: PropTypes.func,\n\n  /**\n   * A callback fired when a date selection is made. Only fires when `selectable` is `true`.\n   *\n   * ```js\n   * (\n   *   slotInfo: {\n   *     start: Date,\n   *     end: Date,\n   *     slots: Array<Date>,\n   *     action: \"select\" | \"click\" | \"doubleClick\",\n   *     bounds: ?{ // For \"select\" action\n   *       x: number,\n   *       y: number,\n   *       top: number,\n   *       right: number,\n   *       left: number,\n   *       bottom: number,\n   *     },\n   *     box: ?{ // For \"click\" or \"doubleClick\" actions\n   *       clientX: number,\n   *       clientY: number,\n   *       x: number,\n   *       y: number,\n   *     },\n   *   }\n   * ) => any\n   * ```\n   */\n  onSelectSlot: PropTypes.func,\n\n  /**\n   * Callback fired when a calendar event is selected.\n   *\n   * ```js\n   * (event: Object, e: SyntheticEvent) => any\n   * ```\n   *\n   * @controllable selected\n   */\n  onSelectEvent: PropTypes.func,\n\n  /**\n   * Callback fired when a calendar event is clicked twice.\n   *\n   * ```js\n   * (event: Object, e: SyntheticEvent) => void\n   * ```\n   */\n  onDoubleClickEvent: PropTypes.func,\n\n  /**\n   * Callback fired when dragging a selection in the Time views.\n   *\n   * Returning `false` from the handler will prevent a selection.\n   *\n   * ```js\n   * (range: { start: Date, end: Date }) => ?boolean\n   * ```\n   */\n  onSelecting: PropTypes.func,\n\n  /**\n   * Callback fired when a +{count} more is clicked\n   *\n   * ```js\n   * (events: Object, date: Date) => any\n   * ```\n   */\n  onShowMore: PropTypes.func,\n\n  /**\n   * The selected event, if any.\n   */\n  selected: PropTypes.object,\n\n  /**\n   * An array of built-in view names to allow the calendar to display.\n   * accepts either an array of builtin view names,\n   *\n   * ```jsx\n   * views={['month', 'day', 'agenda']}\n   * ```\n   * or an object hash of the view name and the component (or boolean for builtin).\n   *\n   * ```jsx\n   * views={{\n   *   month: true,\n   *   week: false,\n   *   myweek: WorkWeekViewComponent,\n   * }}\n   * ```\n   *\n   * Custom views can be any React component, that implements the following\n   * interface:\n   *\n   * ```js\n   * interface View {\n   *   static title(date: Date, { formats: DateFormat[], culture: string?, ...props }): string\n   *   static navigate(date: Date, action: 'PREV' | 'NEXT' | 'DATE'): Date\n   * }\n   * ```\n   *\n   * @type Calendar.Views ('month'|'week'|'work_week'|'day'|'agenda')\n   * @View\n   ['month', 'week', 'day', 'agenda']\n   */\n  views: views$1,\n\n  /**\n   * The string name of the destination view for drill-down actions, such\n   * as clicking a date header, or the truncated events links. If\n   * `getDrilldownView` is also specified it will be used instead.\n   *\n   * Set to `null` to disable drill-down actions.\n   *\n   * ```js\n   * <BigCalendar\n   *   drilldownView=\"agenda\"\n   * />\n   * ```\n   */\n  drilldownView: PropTypes.string,\n\n  /**\n   * Functionally equivalent to `drilldownView`, but accepts a function\n   * that can return a view name. It's useful for customizing the drill-down\n   * actions depending on the target date and triggering view.\n   *\n   * Return `null` to disable drill-down actions.\n   *\n   * ```js\n   * <BigCalendar\n   *   getDrilldownView={(targetDate, currentViewName, configuredViewNames) =>\n   *     if (currentViewName === 'month' && configuredViewNames.includes('week'))\n   *       return 'week'\n   *\n   *     return null;\n   *   }}\n   * />\n   * ```\n   */\n  getDrilldownView: PropTypes.func,\n\n  /**\n   * Determines the end date from date prop in the agenda view\n   * date prop + length (in number of days) = end date\n   */\n  length: PropTypes.number,\n\n  /**\n   * Determines whether the toolbar is displayed\n   */\n  toolbar: PropTypes.bool,\n\n  /**\n   * Show truncated events in an overlay when you click the \"+_x_ more\" link.\n   */\n  popup: PropTypes.bool,\n\n  /**\n   * Distance in pixels, from the edges of the viewport, the \"show more\" overlay should be positioned.\n   *\n   * ```jsx\n   * <BigCalendar popupOffset={30}/>\n   * <BigCalendar popupOffset={{x: 30, y: 20}}/>\n   * ```\n   */\n  popupOffset: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    x: PropTypes.number,\n    y: PropTypes.number\n  })]),\n\n  /**\n   * Allows mouse selection of ranges of dates/times.\n   *\n   * The 'ignoreEvents' option prevents selection code from running when a\n   * drag begins over an event. Useful when you want custom event click or drag\n   * logic\n   */\n  selectable: PropTypes.oneOf([true, false, 'ignoreEvents']),\n\n  /**\n   * Specifies the number of miliseconds the user must press and hold on the screen for a touch\n   * to be considered a \"long press.\" Long presses are used for time slot selection on touch\n   * devices.\n   *\n   * @type {number}\n   * @default 250\n   */\n  longPressThreshold: PropTypes.number,\n\n  /**\n   * Determines the selectable time increments in week and day views\n   */\n  step: PropTypes.number,\n\n  /**\n   * The number of slots per \"section\" in the time grid views. Adjust with `step`\n   * to change the default of 1 hour long groups, with 30 minute slots.\n   */\n  timeslots: PropTypes.number,\n\n  /**\n   *Switch the calendar to a `right-to-left` read direction.\n   */\n  rtl: PropTypes.bool,\n\n  /**\n   * Optionally provide a function that returns an object of className or style props\n   * to be applied to the the event node.\n   *\n   * ```js\n   * (\n   * \tevent: Object,\n   * \tstart: Date,\n   * \tend: Date,\n   * \tisSelected: boolean\n   * ) => { className?: string, style?: Object }\n   * ```\n   */\n  eventPropGetter: PropTypes.func,\n\n  /**\n   * Optionally provide a function that returns an object of className or style props\n   * to be applied to the the time-slot node. Caution! Styles that change layout or\n   * position may break the calendar in unexpected ways.\n   *\n   * ```js\n   * (date: Date, resourceId: (number|string)) => { className?: string, style?: Object }\n   * ```\n   */\n  slotPropGetter: PropTypes.func,\n\n  /**\n   * Optionally provide a function that returns an object of className or style props\n   * to be applied to the the day background. Caution! Styles that change layout or\n   * position may break the calendar in unexpected ways.\n   *\n   * ```js\n   * (date: Date) => { className?: string, style?: Object }\n   * ```\n   */\n  dayPropGetter: PropTypes.func,\n\n  /**\n   * Support to show multi-day events with specific start and end times in the\n   * main time grid (rather than in the all day header).\n   *\n   * **Note: This may cause calendars with several events to look very busy in\n   * the week and day views.**\n   */\n  showMultiDayTimes: PropTypes.bool,\n\n  /**\n   * Constrains the minimum _time_ of the Day and Week views.\n   */\n  min: PropTypes.instanceOf(Date),\n\n  /**\n   * Constrains the maximum _time_ of the Day and Week views.\n   */\n  max: PropTypes.instanceOf(Date),\n\n  /**\n   * Determines how far down the scroll pane is initially scrolled down.\n   */\n  scrollToTime: PropTypes.instanceOf(Date),\n\n  /**\n   * Specify a specific culture code for the Calendar.\n   *\n   * **Note: it's generally better to handle this globally via your i18n library.**\n   */\n  culture: PropTypes.string,\n\n  /**\n   * Localizer specific formats, tell the Calendar how to format and display dates.\n   *\n   * `format` types are dependent on the configured localizer; both Moment and Globalize\n   * accept strings of tokens according to their own specification, such as: `'DD mm yyyy'`.\n   *\n   * ```jsx\n   * let formats = {\n   *   dateFormat: 'dd',\n   *\n   *   dayFormat: (date, , localizer) =>\n   *     localizer.format(date, 'DDD', culture),\n   *\n   *   dayRangeHeaderFormat: ({ start, end }, culture, localizer) =>\n   *     localizer.format(start, { date: 'short' }, culture) + ' — ' +\n   *     localizer.format(end, { date: 'short' }, culture)\n   * }\n   *\n   * <Calendar formats={formats} />\n   * ```\n   *\n   * All localizers accept a function of\n   * the form `(date: Date, culture: ?string, localizer: Localizer) -> string`\n   */\n  formats: PropTypes.shape({\n    /**\n     * Format for the day of the month heading in the Month view.\n     * e.g. \"01\", \"02\", \"03\", etc\n     */\n    dateFormat: dateFormat,\n\n    /**\n     * A day of the week format for Week and Day headings,\n     * e.g. \"Wed 01/04\"\n     *\n     */\n    dayFormat: dateFormat,\n\n    /**\n     * Week day name format for the Month week day headings,\n     * e.g: \"Sun\", \"Mon\", \"Tue\", etc\n     *\n     */\n    weekdayFormat: dateFormat,\n\n    /**\n     * The timestamp cell formats in Week and Time views, e.g. \"4:00 AM\"\n     */\n    timeGutterFormat: dateFormat,\n\n    /**\n     * Toolbar header format for the Month view, e.g \"2015 April\"\n     *\n     */\n    monthHeaderFormat: dateFormat,\n\n    /**\n     * Toolbar header format for the Week views, e.g. \"Mar 29 - Apr 04\"\n     */\n    dayRangeHeaderFormat: dateRangeFormat,\n\n    /**\n     * Toolbar header format for the Day view, e.g. \"Wednesday Apr 01\"\n     */\n    dayHeaderFormat: dateFormat,\n\n    /**\n     * Toolbar header format for the Agenda view, e.g. \"4/1/2015 — 5/1/2015\"\n     */\n    agendaHeaderFormat: dateRangeFormat,\n\n    /**\n     * A time range format for selecting time slots, e.g \"8:00am — 2:00pm\"\n     */\n    selectRangeFormat: dateRangeFormat,\n    agendaDateFormat: dateFormat,\n    agendaTimeFormat: dateFormat,\n    agendaTimeRangeFormat: dateRangeFormat,\n\n    /**\n     * Time range displayed on events.\n     */\n    eventTimeRangeFormat: dateRangeFormat,\n\n    /**\n     * An optional event time range for events that continue onto another day\n     */\n    eventTimeRangeStartFormat: dateFormat,\n\n    /**\n     * An optional event time range for events that continue from another day\n     */\n    eventTimeRangeEndFormat: dateFormat\n  }),\n\n  /**\n   * Customize how different sections of the calendar render by providing custom Components.\n   * In particular the `Event` component can be specified for the entire calendar, or you can\n   * provide an individual component for each view type.\n   *\n   * ```jsx\n   * let components = {\n   *   event: MyEvent, // used by each view (Month, Day, Week)\n   *   eventWrapper: MyEventWrapper,\n   *   eventContainerWrapper: MyEventContainerWrapper,\n   *   dayWrapper: MyDayWrapper,\n   *   dateCellWrapper: MyDateCellWrapper,\n   *   timeSlotWrapper: MyTimeSlotWrapper,\n   *   timeGutterHeader: MyTimeGutterWrapper,\n   *   toolbar: MyToolbar,\n   *   agenda: {\n   *   \t event: MyAgendaEvent // with the agenda view use a different component to render events\n   *     time: MyAgendaTime,\n   *     date: MyAgendaDate,\n   *   },\n   *   day: {\n   *     header: MyDayHeader,\n   *     event: MyDayEvent,\n   *   },\n   *   week: {\n   *     header: MyWeekHeader,\n   *     event: MyWeekEvent,\n   *   },\n   *   month: {\n   *     header: MyMonthHeader,\n   *     dateHeader: MyMonthDateHeader,\n   *     event: MyMonthEvent,\n   *   }\n   * }\n   * <Calendar components={components} />\n   * ```\n   */\n  components: PropTypes.shape({\n    event: elementType,\n    eventWrapper: elementType,\n    eventContainerWrapper: elementType,\n    dayWrapper: elementType,\n    dateCellWrapper: elementType,\n    timeSlotWrapper: elementType,\n    timeGutterHeader: elementType,\n    toolbar: elementType,\n    agenda: PropTypes.shape({\n      date: elementType,\n      time: elementType,\n      event: elementType\n    }),\n    day: PropTypes.shape({\n      header: elementType,\n      event: elementType\n    }),\n    week: PropTypes.shape({\n      header: elementType,\n      event: elementType\n    }),\n    month: PropTypes.shape({\n      header: elementType,\n      dateHeader: elementType,\n      event: elementType\n    })\n  }),\n\n  /**\n   * String messages used throughout the component, override to provide localizations\n   */\n  messages: PropTypes.shape({\n    allDay: PropTypes.node,\n    previous: PropTypes.node,\n    next: PropTypes.node,\n    today: PropTypes.node,\n    month: PropTypes.node,\n    week: PropTypes.node,\n    day: PropTypes.node,\n    agenda: PropTypes.node,\n    date: PropTypes.node,\n    time: PropTypes.node,\n    event: PropTypes.node,\n    noEventsInRange: PropTypes.node,\n    showMore: PropTypes.func\n  })\n} : {};\nvar Calendar$1 = uncontrollable(Calendar, {\n  view: 'onView',\n  date: 'onNavigate',\n  selected: 'onSelectEvent'\n});\n\nvar dateRangeFormat$1 = function dateRangeFormat(_ref, culture, local) {\n  var start = _ref.start,\n      end = _ref.end;\n  return local.format(start, 'L', culture) + ' — ' + local.format(end, 'L', culture);\n};\n\nvar timeRangeFormat = function timeRangeFormat(_ref2, culture, local) {\n  var start = _ref2.start,\n      end = _ref2.end;\n  return local.format(start, 'LT', culture) + ' — ' + local.format(end, 'LT', culture);\n};\n\nvar timeRangeStartFormat = function timeRangeStartFormat(_ref3, culture, local) {\n  var start = _ref3.start;\n  return local.format(start, 'LT', culture) + ' — ';\n};\n\nvar timeRangeEndFormat = function timeRangeEndFormat(_ref4, culture, local) {\n  var end = _ref4.end;\n  return ' — ' + local.format(end, 'LT', culture);\n};\n\nvar weekRangeFormat = function weekRangeFormat(_ref5, culture, local) {\n  var start = _ref5.start,\n      end = _ref5.end;\n  return local.format(start, 'MMMM DD', culture) + ' - ' + local.format(end, dates.eq(start, end, 'month') ? 'DD' : 'MMMM DD', culture);\n};\n\nvar formats = {\n  dateFormat: 'DD',\n  dayFormat: 'DD ddd',\n  weekdayFormat: 'ddd',\n  selectRangeFormat: timeRangeFormat,\n  eventTimeRangeFormat: timeRangeFormat,\n  eventTimeRangeStartFormat: timeRangeStartFormat,\n  eventTimeRangeEndFormat: timeRangeEndFormat,\n  timeGutterFormat: 'LT',\n  monthHeaderFormat: 'MMMM YYYY',\n  dayHeaderFormat: 'dddd MMM DD',\n  dayRangeHeaderFormat: weekRangeFormat,\n  agendaHeaderFormat: dateRangeFormat$1,\n  agendaDateFormat: 'ddd MMM DD',\n  agendaTimeFormat: 'LT',\n  agendaTimeRangeFormat: timeRangeFormat\n};\n\nfunction momentLocalizer(moment) {\n  var locale = function locale(m, c) {\n    return c ? m.locale(c) : m;\n  };\n\n  return new DateLocalizer({\n    formats: formats,\n    firstOfWeek: function firstOfWeek(culture) {\n      var data = culture ? moment.localeData(culture) : moment.localeData();\n      return data ? data.firstDayOfWeek() : 0;\n    },\n    format: function format(value, _format, culture) {\n      return locale(moment(value), culture).format(_format);\n    }\n  });\n}\n\nvar dateRangeFormat$2 = function dateRangeFormat(_ref, culture, local) {\n  var start = _ref.start,\n      end = _ref.end;\n  return local.format(start, 'd', culture) + ' — ' + local.format(end, 'd', culture);\n};\n\nvar timeRangeFormat$1 = function timeRangeFormat(_ref2, culture, local) {\n  var start = _ref2.start,\n      end = _ref2.end;\n  return local.format(start, 't', culture) + ' — ' + local.format(end, 't', culture);\n};\n\nvar timeRangeStartFormat$1 = function timeRangeStartFormat(_ref3, culture, local) {\n  var start = _ref3.start;\n  return local.format(start, 't', culture) + ' — ';\n};\n\nvar timeRangeEndFormat$1 = function timeRangeEndFormat(_ref4, culture, local) {\n  var end = _ref4.end;\n  return ' — ' + local.format(end, 't', culture);\n};\n\nvar weekRangeFormat$1 = function weekRangeFormat(_ref5, culture, local) {\n  var start = _ref5.start,\n      end = _ref5.end;\n  return local.format(start, 'MMM dd', culture) + ' - ' + local.format(end, dates.eq(start, end, 'month') ? 'dd' : 'MMM dd', culture);\n};\n\nvar formats$1 = {\n  dateFormat: 'dd',\n  dayFormat: 'ddd dd/MM',\n  weekdayFormat: 'ddd',\n  selectRangeFormat: timeRangeFormat$1,\n  eventTimeRangeFormat: timeRangeFormat$1,\n  eventTimeRangeStartFormat: timeRangeStartFormat$1,\n  eventTimeRangeEndFormat: timeRangeEndFormat$1,\n  timeGutterFormat: 't',\n  monthHeaderFormat: 'Y',\n  dayHeaderFormat: 'dddd MMM dd',\n  dayRangeHeaderFormat: weekRangeFormat$1,\n  agendaHeaderFormat: dateRangeFormat$2,\n  agendaDateFormat: 'ddd MMM dd',\n  agendaTimeFormat: 't',\n  agendaTimeRangeFormat: timeRangeFormat$1\n};\n\nfunction oldGlobalize(globalize) {\n  function getCulture(culture) {\n    return culture ? globalize.findClosestCulture(culture) : globalize.culture();\n  }\n\n  function firstOfWeek(culture) {\n    culture = getCulture(culture);\n    return culture && culture.calendar.firstDay || 0;\n  }\n\n  return new DateLocalizer({\n    firstOfWeek: firstOfWeek,\n    formats: formats$1,\n    format: function format(value, _format, culture) {\n      return globalize.format(value, _format, culture);\n    }\n  });\n}\n\nvar dateRangeFormat$3 = function dateRangeFormat(_ref, culture, local) {\n  var start = _ref.start,\n      end = _ref.end;\n  return local.format(start, {\n    date: 'short'\n  }, culture) + ' — ' + local.format(end, {\n    date: 'short'\n  }, culture);\n};\n\nvar timeRangeFormat$2 = function timeRangeFormat(_ref2, culture, local) {\n  var start = _ref2.start,\n      end = _ref2.end;\n  return local.format(start, {\n    time: 'short'\n  }, culture) + ' — ' + local.format(end, {\n    time: 'short'\n  }, culture);\n};\n\nvar timeRangeStartFormat$2 = function timeRangeStartFormat(_ref3, culture, local) {\n  var start = _ref3.start;\n  return local.format(start, {\n    time: 'short'\n  }, culture) + ' — ';\n};\n\nvar timeRangeEndFormat$2 = function timeRangeEndFormat(_ref4, culture, local) {\n  var end = _ref4.end;\n  return ' — ' + local.format(end, {\n    time: 'short'\n  }, culture);\n};\n\nvar weekRangeFormat$2 = function weekRangeFormat(_ref5, culture, local) {\n  var start = _ref5.start,\n      end = _ref5.end;\n  return local.format(start, 'MMM dd', culture) + ' — ' + local.format(end, dates.eq(start, end, 'month') ? 'dd' : 'MMM dd', culture);\n};\n\nvar formats$2 = {\n  dateFormat: 'dd',\n  dayFormat: 'eee dd/MM',\n  weekdayFormat: 'eee',\n  selectRangeFormat: timeRangeFormat$2,\n  eventTimeRangeFormat: timeRangeFormat$2,\n  eventTimeRangeStartFormat: timeRangeStartFormat$2,\n  eventTimeRangeEndFormat: timeRangeEndFormat$2,\n  timeGutterFormat: {\n    time: 'short'\n  },\n  monthHeaderFormat: 'MMMM yyyy',\n  dayHeaderFormat: 'eeee MMM dd',\n  dayRangeHeaderFormat: weekRangeFormat$2,\n  agendaHeaderFormat: dateRangeFormat$3,\n  agendaDateFormat: 'eee MMM dd',\n  agendaTimeFormat: {\n    time: 'short'\n  },\n  agendaTimeRangeFormat: timeRangeFormat$2\n};\n\nfunction globalizeLocalizer(globalize) {\n  var locale = function locale(culture) {\n    return culture ? globalize(culture) : globalize;\n  }; // return the first day of the week from the locale data. Defaults to 'world'\n  // territory if no territory is derivable from CLDR.\n  // Failing to use CLDR supplemental (not loaded?), revert to the original\n  // method of getting first day of week.\n\n\n  function firstOfWeek(culture) {\n    try {\n      var days = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\n      var cldr = locale(culture).cldr;\n      var territory = cldr.attributes.territory;\n      var weekData = cldr.get('supplemental').weekData;\n      var firstDay = weekData.firstDay[territory || '001'];\n      return days.indexOf(firstDay);\n    } catch (e) {\n      process.env.NODE_ENV !== \"production\" ? warning(true, \"Failed to accurately determine first day of the week.\\n            Is supplemental data loaded into CLDR?\") : void 0; // maybe cldr supplemental is not loaded? revert to original method\n\n      var date = new Date(); //cldr-data doesn't seem to be zero based\n\n      var localeDay = Math.max(parseInt(locale(culture).formatDate(date, {\n        raw: 'e'\n      }), 10) - 1, 0);\n      return Math.abs(date.getDay() - localeDay);\n    }\n  }\n\n  if (!globalize.load) return oldGlobalize(globalize);\n  return new DateLocalizer({\n    firstOfWeek: firstOfWeek,\n    formats: formats$2,\n    format: function format(value, _format, culture) {\n      _format = typeof _format === 'string' ? {\n        raw: _format\n      } : _format;\n      return locale(culture).formatDate(value, _format);\n    }\n  });\n}\n\n_extends(Calendar$1, {\n  globalizeLocalizer: globalizeLocalizer,\n  momentLocalizer: momentLocalizer,\n  Views: views,\n  Navigate: navigate,\n  move: moveDate,\n  components: {\n    eventWrapper: NoopWrapper,\n    dayWrapper: NoopWrapper,\n    dateCellWrapper: NoopWrapper\n  }\n});\n\nexport default Calendar$1;","map":null,"metadata":{},"sourceType":"module"}