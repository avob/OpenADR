{"ast":null,"code":"import { createStore, compose, applyMiddleware } from 'redux';\nimport reduxImmutableStateInvariant from 'redux-immutable-state-invariant';\nimport thunk from 'redux-thunk';\nimport createHistory from 'history/createBrowserHistory'; // 'routerMiddleware': the new way of storing route changes with redux middleware since rrV4.\n\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport swaggerMiddleware from './swaggerMiddleware';\nimport swagger from 'swagger-client';\nimport rootReducer from '../reducers'; // publicPath env\n\nvar publicPath = process.env.PUBLIC_URL;\nexport var history = createHistory({\n  basename: publicPath\n});\nvar connectRouterHistory = connectRouter(history);\nexport var config = {\n  vtnSwaggerUrl: 'https://vtn.oadr.com:8181/testvtn/v2/api-docs',\n  isConnectionPending: true,\n  isConnected: false\n};\n\nfunction configureSwaggerMiddleware() {\n  swagger.http.withCredentials = true;\n  var swaggerOpts = {\n    url: config.vtnSwaggerUrl\n  };\n  return swaggerMiddleware(swaggerOpts, config);\n}\n\nfunction configureStoreProd(initialState) {\n  var reactRouterMiddleware = routerMiddleware(history);\n  var middlewares = [thunk, reactRouterMiddleware, configureSwaggerMiddleware(config)];\n  return createStore(connectRouterHistory(rootReducer), initialState, compose(applyMiddleware.apply(void 0, middlewares)));\n}\n\nfunction configureStoreDev(initialState) {\n  var reactRouterMiddleware = routerMiddleware(history);\n  var middlewares = [reduxImmutableStateInvariant(), thunk, reactRouterMiddleware, configureSwaggerMiddleware()];\n  var composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; // add support for Redux dev tools\n\n  var store = createStore(connectRouterHistory(rootReducer), initialState, composeEnhancers(applyMiddleware.apply(void 0, middlewares)));\n\n  if (module.hot) {\n    // Enable Webpack hot module replacement for reducers\n    module.hot.accept('../reducers', function () {\n      var nextRootReducer = require('../reducers').default; // eslint-disable-line global-require\n\n\n      store.replaceReducer(connectRouterHistory(nextRootReducer));\n    });\n  }\n\n  return store;\n}\n\nvar configureStore = process.env.NODE_ENV === 'production' ? configureStoreProd : configureStoreDev;\nexport default configureStore;","map":{"version":3,"sources":["/home/bzanni/Documents/github/OpenADR/OpenADRServerVTN20b/frontend/src/store/configureStore.js"],"names":["createStore","compose","applyMiddleware","reduxImmutableStateInvariant","thunk","createHistory","connectRouter","routerMiddleware","swaggerMiddleware","swagger","rootReducer","publicPath","process","env","PUBLIC_URL","history","basename","connectRouterHistory","config","vtnSwaggerUrl","isConnectionPending","isConnected","configureSwaggerMiddleware","http","withCredentials","swaggerOpts","url","configureStoreProd","initialState","reactRouterMiddleware","middlewares","configureStoreDev","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","module","hot","accept","nextRootReducer","require","default","replaceReducer","configureStore","NODE_ENV"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,OAAOC,4BAAP,MAAyC,iCAAzC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,aAAP,MAA0B,8BAA1B,C,CACA;;AACA,SAASC,aAAT,EAAwBC,gBAAxB,QAAgD,wBAAhD;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,WAAP,MAAwB,aAAxB,C,CACA;;AACA,IAAMC,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYC,UAA/B;AAEA,OAAO,IAAMC,OAAO,GAAGV,aAAa,CAAC;AACnCW,EAAAA,QAAQ,EAAEL;AADyB,CAAD,CAA7B;AAGP,IAAMM,oBAAoB,GAAGX,aAAa,CAAES,OAAF,CAA1C;AAEA,OAAO,IAAIG,MAAM,GAAG;AAClBC,EAAAA,aAAa,EAAE,+CADG;AAElBC,EAAAA,mBAAmB,EAAE,IAFH;AAGlBC,EAAAA,WAAW,EAAE;AAHK,CAAb;;AAMP,SAASC,0BAAT,GAAsC;AAEpCb,EAAAA,OAAO,CAACc,IAAR,CAAaC,eAAb,GAA+B,IAA/B;AACA,MAAMC,WAAW,GAAG;AAClBC,IAAAA,GAAG,EAAER,MAAM,CAACC;AADM,GAApB;AAGA,SAAOX,iBAAiB,CAAEiB,WAAF,EAAeP,MAAf,CAAxB;AACD;;AAED,SAASS,kBAAT,CAA6BC,YAA7B,EAA4C;AAC1C,MAAMC,qBAAqB,GAAGtB,gBAAgB,CAAEQ,OAAF,CAA9C;AAGA,MAAMe,WAAW,GAAG,CAClB1B,KADkB,EAElByB,qBAFkB,EAGlBP,0BAA0B,CAACJ,MAAD,CAHR,CAApB;AAMA,SAAOlB,WAAW,CAChBiB,oBAAoB,CAAEP,WAAF,CADJ,EAEhBkB,YAFgB,EAGhB3B,OAAO,CAAEC,eAAe,MAAf,SAAoB4B,WAApB,CAAF,CAHS,CAAlB;AAKD;;AAED,SAASC,iBAAT,CAA4BH,YAA5B,EAA2C;AACzC,MAAMC,qBAAqB,GAAGtB,gBAAgB,CAAEQ,OAAF,CAA9C;AACA,MAAMe,WAAW,GAAG,CAClB3B,4BAA4B,EADV,EAElBC,KAFkB,EAGlByB,qBAHkB,EAIlBP,0BAA0B,EAJR,CAApB;AAOA,MAAMU,gBAAgB,GAAGC,MAAM,CAACC,oCAAP,IAA+CjC,OAAxE,CATyC,CASwC;;AACjF,MAAMkC,KAAK,GAAGnC,WAAW,CACvBiB,oBAAoB,CAAEP,WAAF,CADG,EAEvBkB,YAFuB,EAGvBI,gBAAgB,CAAE9B,eAAe,MAAf,SAAoB4B,WAApB,CAAF,CAHO,CAAzB;;AAMA,MAAKM,MAAM,CAACC,GAAZ,EAAkB;AAChB;AACAD,IAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAmB,aAAnB,EAAkC,YAAM;AACtC,UAAMC,eAAe,GAAGC,OAAO,CAAE,aAAF,CAAP,CAAyBC,OAAjD,CADsC,CACoB;;;AAC1DN,MAAAA,KAAK,CAACO,cAAN,CAAsBzB,oBAAoB,CAAEsB,eAAF,CAA1C;AACD,KAHD;AAID;;AAED,SAAOJ,KAAP;AACD;;AAED,IAAMQ,cAAc,GAAG/B,OAAO,CAACC,GAAR,CAAY+B,QAAZ,KAAyB,YAAzB,GAAwCjB,kBAAxC,GAA6DI,iBAApF;AAEA,eAAeY,cAAf","sourcesContent":["import { createStore, compose, applyMiddleware } from 'redux';\nimport reduxImmutableStateInvariant from 'redux-immutable-state-invariant';\nimport thunk from 'redux-thunk';\nimport createHistory from 'history/createBrowserHistory';\n// 'routerMiddleware': the new way of storing route changes with redux middleware since rrV4.\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport swaggerMiddleware from './swaggerMiddleware'\nimport swagger from 'swagger-client'\nimport rootReducer from '../reducers';\n// publicPath env\nconst publicPath = process.env.PUBLIC_URL;\n\nexport const history = createHistory({\n  basename: publicPath\n});\nconst connectRouterHistory = connectRouter( history );\n\nexport var config = {\n  vtnSwaggerUrl: 'https://vtn.oadr.com:8181/testvtn/v2/api-docs',\n  isConnectionPending: true,\n  isConnected: false\n};\n\nfunction configureSwaggerMiddleware() {\n\n  swagger.http.withCredentials = true\n  const swaggerOpts = {\n    url: config.vtnSwaggerUrl\n  };\n  return swaggerMiddleware( swaggerOpts, config );\n}\n\nfunction configureStoreProd( initialState ) {\n  const reactRouterMiddleware = routerMiddleware( history );\n\n\n  const middlewares = [\n    thunk,\n    reactRouterMiddleware,\n    configureSwaggerMiddleware(config),\n  ];\n\n  return createStore(\n    connectRouterHistory( rootReducer ),\n    initialState,\n    compose( applyMiddleware( ...middlewares ) )\n  );\n}\n\nfunction configureStoreDev( initialState ) {\n  const reactRouterMiddleware = routerMiddleware( history );\n  const middlewares = [\n    reduxImmutableStateInvariant(),\n    thunk,\n    reactRouterMiddleware,\n    configureSwaggerMiddleware(),\n  ];\n\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; // add support for Redux dev tools\n  const store = createStore(\n    connectRouterHistory( rootReducer ),\n    initialState,\n    composeEnhancers( applyMiddleware( ...middlewares ) )\n  );\n\n  if ( module.hot ) {\n    // Enable Webpack hot module replacement for reducers\n    module.hot.accept( '../reducers', () => {\n      const nextRootReducer = require( '../reducers' ).default; // eslint-disable-line global-require\n      store.replaceReducer( connectRouterHistory( nextRootReducer ) );\n    } );\n  }\n\n  return store;\n}\n\nconst configureStore = process.env.NODE_ENV === 'production' ? configureStoreProd : configureStoreDev;\n\nexport default configureStore;\n\n\n"]},"metadata":{},"sourceType":"module"}