{"ast":null,"code":"import _classCallCheck from \"/home/bzanni/Documents/github/OpenADR/OpenADRServerVTN20b/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/home/bzanni/Documents/github/OpenADR/OpenADRServerVTN20b/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bzanni/Documents/github/OpenADR/OpenADRServerVTN20b/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/bzanni/Documents/github/OpenADR/OpenADRServerVTN20b/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/bzanni/Documents/github/OpenADR/OpenADRServerVTN20b/frontend/src/components/Event/EventCalendarView/EventCalendarMonthView.js\";\nimport React from 'react';\nimport BigCalendar from 'react-big-calendar';\nimport TimeGrid from 'react-big-calendar/lib/TimeGrid';\nimport MonthView from 'react-big-calendar/lib/Month';\nimport moment from 'moment';\n\nvar EventCalendarMonthView =\n/*#__PURE__*/\nfunction (_MonthView) {\n  _inherits(EventCalendarMonthView, _MonthView);\n\n  function EventCalendarMonthView() {\n    _classCallCheck(this, EventCalendarMonthView);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(EventCalendarMonthView).apply(this, arguments));\n  }\n\n  return EventCalendarMonthView;\n}(MonthView); // var getRange = (date) => {\n//     return {\n//       start:start.toDate(),\n//       end:end.toDate()\n//     }\n// }\n\n\nEventCalendarMonthView.range = function (date) {\n  var start = moment(date).startOf('month');\n  var end = moment(date).endOf('month');\n  var current = moment(start.toDate());\n  var range = [];\n\n  while (current.toDate().getTime() < end.toDate().getTime()) {\n    range.push(current.toDate());\n    current.add(1, 'day');\n  }\n\n  return range;\n};\n\nEventCalendarMonthView.navigate = function (date, action) {\n  var d = moment(new Date(date));\n\n  switch (action) {\n    case BigCalendar.Navigate.PREVIOUS:\n      d.add(-1, 'month');\n      return d.toDate();\n\n    case BigCalendar.Navigate.NEXT:\n      d.add(1, 'month');\n      return d.toDate();\n\n    case BigCalendar.Navigate.TODAY:\n      date = new Date();\n      return date;\n\n    default:\n      return date;\n  }\n};\n\nEventCalendarMonthView.title = function (date) {\n  return React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    style: {\n      paddingTop: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, moment(date).format(\"YYYY MMMM\")), React.createElement(\"span\", {\n    className: \"rbc-btn-group\",\n    style: {\n      float: \"right\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    className: EventCalendarMonthView.color === \"status\" ? \"rbc-active\" : \"\",\n    onClick: function onClick(e) {\n      EventCalendarMonthView.onColorChange(\"status\");\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Color Status\"), React.createElement(\"button\", {\n    type: \"button\",\n    className: EventCalendarMonthView.color === \"market\" ? \"rbc-active\" : \"\",\n    onClick: function onClick(e) {\n      EventCalendarMonthView.onColorChange(\"market\");\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Color Market\")));\n};\n\nexport default EventCalendarMonthView;","map":{"version":3,"sources":["/home/bzanni/Documents/github/OpenADR/OpenADRServerVTN20b/frontend/src/components/Event/EventCalendarView/EventCalendarMonthView.js"],"names":["React","BigCalendar","TimeGrid","MonthView","moment","EventCalendarMonthView","range","date","start","startOf","end","endOf","current","toDate","getTime","push","add","navigate","action","d","Date","Navigate","PREVIOUS","NEXT","TODAY","title","paddingTop","format","float","color","e","onColorChange"],"mappings":"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","sourcesContent":["import React from 'react';\nimport BigCalendar from 'react-big-calendar'\n\nimport TimeGrid from 'react-big-calendar/lib/TimeGrid'\nimport MonthView from 'react-big-calendar/lib/Month'\nimport moment from 'moment'\n\n\nclass EventCalendarMonthView extends MonthView {\n\n}\n\n// var getRange = (date) => {\n   \n//     return {\n//       start:start.toDate(),\n//       end:end.toDate()\n//     }\n\n// }\n\nEventCalendarMonthView.range = date => {\n\n\n  let start = moment(date).startOf('month');\n  let end = moment(date).endOf('month');\n\n  let current = moment(start.toDate());\n  let range = []\n\n  while (current.toDate().getTime() < end.toDate().getTime()) {\n    range.push(current.toDate())\n    current.add(1, 'day')\n  }\n\n  return range;\n}\n\nEventCalendarMonthView.navigate = (date, action) => {\n  let d = moment(new Date(date));\n  switch (action) {\n    case BigCalendar.Navigate.PREVIOUS:\n      d.add(-1, 'month')\n      return d.toDate();\n\n    case BigCalendar.Navigate.NEXT:\n      d.add(1, 'month');\n      return d.toDate();\n\n    case BigCalendar.Navigate.TODAY:\n      date = new Date();     \n      return date;\n\n    default:\n      return date\n  }\n}\n\n\n\nEventCalendarMonthView.title = date => {\n  return (\n    <span>\n      <span style={{paddingTop:10}}>{moment(date).format( \"YYYY MMMM\")}</span>\n      <span className=\"rbc-btn-group\" style={{float:\"right\"}} >\n        <button type=\"button\" className={(EventCalendarMonthView.color === \"status\") ? \"rbc-active\" : \"\"} onClick={(e) => {EventCalendarMonthView.onColorChange(\"status\")}}>Color Status</button>\n        <button type=\"button\" className={(EventCalendarMonthView.color  === \"market\") ? \"rbc-active\" : \"\"} onClick={(e) => {EventCalendarMonthView.onColorChange(\"market\")}}>Color Market</button>\n      </span>   \n    </span>\n    );\n}\n\nexport default EventCalendarMonthView;"]},"metadata":{},"sourceType":"module"}