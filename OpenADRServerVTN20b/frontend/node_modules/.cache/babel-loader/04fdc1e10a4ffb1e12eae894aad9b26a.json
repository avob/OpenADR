{"ast":null,"code":"/*!\r\n * https://github.com/Starcounter-Jack/JSON-Patch\r\n * (c) 2017 Joachim Wester\r\n * MIT license\r\n */\nvar helpers_1 = require('./helpers');\n\nvar core_1 = require('./core');\n/* export all core functions */\n\n\nvar core_2 = require('./core');\n\nexports.applyOperation = core_2.applyOperation;\nexports.applyPatch = core_2.applyPatch;\nexports.applyReducer = core_2.applyReducer;\nexports.getValueByPointer = core_2.getValueByPointer;\nexports.validate = core_2.validate;\nexports.validator = core_2.validator;\n/* export some helpers */\n\nvar helpers_2 = require('./helpers');\n\nexports.JsonPatchError = helpers_2.PatchError;\nexports.deepClone = helpers_2._deepClone;\nexports.escapePathComponent = helpers_2.escapePathComponent;\nexports.unescapePathComponent = helpers_2.unescapePathComponent;\nvar beforeDict = new WeakMap();\n\nvar Mirror = function () {\n  function Mirror(obj) {\n    this.observers = new Map();\n    this.obj = obj;\n  }\n\n  return Mirror;\n}();\n\nvar ObserverInfo = function () {\n  function ObserverInfo(callback, observer) {\n    this.callback = callback;\n    this.observer = observer;\n  }\n\n  return ObserverInfo;\n}();\n\nfunction getMirror(obj) {\n  return beforeDict.get(obj);\n}\n\nfunction getObserverFromMirror(mirror, callback) {\n  return mirror.observers.get(callback);\n}\n\nfunction removeObserverFromMirror(mirror, observer) {\n  mirror.observers.delete(observer.callback);\n}\n/**\r\n * Detach an observer from an object\r\n */\n\n\nfunction unobserve(root, observer) {\n  observer.unobserve();\n}\n\nexports.unobserve = unobserve;\n/**\r\n * Observes changes made to an object, which can then be retrieved using generate\r\n */\n\nfunction observe(obj, callback) {\n  var patches = [];\n  var observer;\n  var mirror = getMirror(obj);\n\n  if (!mirror) {\n    mirror = new Mirror(obj);\n    beforeDict.set(obj, mirror);\n  } else {\n    var observerInfo = getObserverFromMirror(mirror, callback);\n    observer = observerInfo && observerInfo.observer;\n  }\n\n  if (observer) {\n    return observer;\n  }\n\n  observer = {};\n  mirror.value = helpers_1._deepClone(obj);\n\n  if (callback) {\n    observer.callback = callback;\n    observer.next = null;\n\n    var dirtyCheck = function dirtyCheck() {\n      generate(observer);\n    };\n\n    var fastCheck = function fastCheck() {\n      clearTimeout(observer.next);\n      observer.next = setTimeout(dirtyCheck);\n    };\n\n    if (typeof window !== 'undefined') {\n      if (window.addEventListener) {\n        window.addEventListener('mouseup', fastCheck);\n        window.addEventListener('keyup', fastCheck);\n        window.addEventListener('mousedown', fastCheck);\n        window.addEventListener('keydown', fastCheck);\n        window.addEventListener('change', fastCheck);\n      } else {\n        document.documentElement.attachEvent('onmouseup', fastCheck);\n        document.documentElement.attachEvent('onkeyup', fastCheck);\n        document.documentElement.attachEvent('onmousedown', fastCheck);\n        document.documentElement.attachEvent('onkeydown', fastCheck);\n        document.documentElement.attachEvent('onchange', fastCheck);\n      }\n    }\n  }\n\n  observer.patches = patches;\n  observer.object = obj;\n\n  observer.unobserve = function () {\n    generate(observer);\n    clearTimeout(observer.next);\n    removeObserverFromMirror(mirror, observer);\n\n    if (typeof window !== 'undefined') {\n      if (window.removeEventListener) {\n        window.removeEventListener('mouseup', fastCheck);\n        window.removeEventListener('keyup', fastCheck);\n        window.removeEventListener('mousedown', fastCheck);\n        window.removeEventListener('keydown', fastCheck);\n      } else {\n        document.documentElement.detachEvent('onmouseup', fastCheck);\n        document.documentElement.detachEvent('onkeyup', fastCheck);\n        document.documentElement.detachEvent('onmousedown', fastCheck);\n        document.documentElement.detachEvent('onkeydown', fastCheck);\n      }\n    }\n  };\n\n  mirror.observers.set(callback, new ObserverInfo(callback, observer));\n  return observer;\n}\n\nexports.observe = observe;\n/**\r\n * Generate an array of patches from an observer\r\n */\n\nfunction generate(observer) {\n  var mirror = beforeDict.get(observer.object);\n\n  _generate(mirror.value, observer.object, observer.patches, \"\");\n\n  if (observer.patches.length) {\n    core_1.applyPatch(mirror.value, observer.patches);\n  }\n\n  var temp = observer.patches;\n\n  if (temp.length > 0) {\n    observer.patches = [];\n\n    if (observer.callback) {\n      observer.callback(temp);\n    }\n  }\n\n  return temp;\n}\n\nexports.generate = generate; // Dirty check if obj is different from mirror, generate patches and update mirror\n\nfunction _generate(mirror, obj, patches, path) {\n  if (obj === mirror) {\n    return;\n  }\n\n  if (typeof obj.toJSON === \"function\") {\n    obj = obj.toJSON();\n  }\n\n  var newKeys = helpers_1._objectKeys(obj);\n\n  var oldKeys = helpers_1._objectKeys(mirror);\n\n  var changed = false;\n  var deleted = false; //if ever \"move\" operation is implemented here, make sure this test runs OK: \"should not generate the same patch twice (move)\"\n\n  for (var t = oldKeys.length - 1; t >= 0; t--) {\n    var key = oldKeys[t];\n    var oldVal = mirror[key];\n\n    if (helpers_1.hasOwnProperty(obj, key) && !(obj[key] === undefined && oldVal !== undefined && Array.isArray(obj) === false)) {\n      var newVal = obj[key];\n\n      if (typeof oldVal == \"object\" && oldVal != null && typeof newVal == \"object\" && newVal != null) {\n        _generate(oldVal, newVal, patches, path + \"/\" + helpers_1.escapePathComponent(key));\n      } else {\n        if (oldVal !== newVal) {\n          changed = true;\n          patches.push({\n            op: \"replace\",\n            path: path + \"/\" + helpers_1.escapePathComponent(key),\n            value: helpers_1._deepClone(newVal)\n          });\n        }\n      }\n    } else if (Array.isArray(mirror) === Array.isArray(obj)) {\n      patches.push({\n        op: \"remove\",\n        path: path + \"/\" + helpers_1.escapePathComponent(key)\n      });\n      deleted = true; // property has been deleted\n    } else {\n      patches.push({\n        op: \"replace\",\n        path: path,\n        value: obj\n      });\n      changed = true;\n    }\n  }\n\n  if (!deleted && newKeys.length == oldKeys.length) {\n    return;\n  }\n\n  for (var t = 0; t < newKeys.length; t++) {\n    var key = newKeys[t];\n\n    if (!helpers_1.hasOwnProperty(mirror, key) && obj[key] !== undefined) {\n      patches.push({\n        op: \"add\",\n        path: path + \"/\" + helpers_1.escapePathComponent(key),\n        value: helpers_1._deepClone(obj[key])\n      });\n    }\n  }\n}\n/**\r\n * Create an array of patches from the differences in two objects\r\n */\n\n\nfunction compare(tree1, tree2) {\n  var patches = [];\n\n  _generate(tree1, tree2, patches, '');\n\n  return patches;\n}\n\nexports.compare = compare;","map":null,"metadata":{},"sourceType":"script"}