{"ast":null,"code":"import * as types from '../constants/actionTypes';\nimport objectAssign from 'object-assign';\nimport initialState from './initialState'; // IMPORTANT: Note that with Redux, state should NEVER be changed.\n// State is considered immutable. Instead,\n// create a copy of the state passed and set new values on the copy.\n// Note that I'm using Object.assign to create a copy of current state\n// and update values on the copy.\n\nexport default function accountReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState.account;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var newState;\n\n  switch (action.type) {\n    case types.LOAD_ACCOUNT_USER:\n      return state;\n\n    case types.LOAD_ACCOUNT_USER_SUCCESS:\n      newState = objectAssign({}, state, {\n        user: action.payload\n      });\n      return newState;\n\n    case types.LOAD_ACCOUNT_USER_ERROR:\n      return state;\n\n    case types.LOAD_ACCOUNT_APP:\n      return state;\n\n    case types.LOAD_ACCOUNT_APP_SUCCESS:\n      newState = objectAssign({}, state, {\n        app: action.payload\n      });\n      return newState;\n\n    case types.LOAD_ACCOUNT_APP_ERROR:\n      return state;\n\n    case types.LOCATION_CHANGE:\n      if (action.payload.location.pathname.includes(\"/account\")) {\n        return state;\n      } else {\n        return initialState.account;\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/bzanni/Documents/github/OpenADR/OpenADRServerVTN20b/frontend/src/reducers/accountReducer.js"],"names":["types","objectAssign","initialState","accountReducer","state","account","action","newState","type","LOAD_ACCOUNT_USER","LOAD_ACCOUNT_USER_SUCCESS","user","payload","LOAD_ACCOUNT_USER_ERROR","LOAD_ACCOUNT_APP","LOAD_ACCOUNT_APP_SUCCESS","app","LOAD_ACCOUNT_APP_ERROR","LOCATION_CHANGE","location","pathname","includes"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,0BAAvB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,cAAT,GAAgE;AAAA,MAAvCC,KAAuC,uEAA/BF,YAAY,CAACG,OAAkB;AAAA,MAATC,MAAS;AAC7E,MAAIC,QAAJ;;AAEA,UAAQD,MAAM,CAACE,IAAf;AAEC,SAAKR,KAAK,CAACS,iBAAX;AACG,aAAOL,KAAP;;AAEF,SAAKJ,KAAK,CAACU,yBAAX;AACEH,MAAAA,QAAQ,GAAGN,YAAY,CAAE,EAAF,EAAMG,KAAN,EAAa;AAClCO,QAAAA,IAAI,EAAEL,MAAM,CAACM;AADqB,OAAb,CAAvB;AAGA,aAAOL,QAAP;;AAEF,SAAKP,KAAK,CAACa,uBAAX;AACE,aAAOT,KAAP;;AAED,SAAKJ,KAAK,CAACc,gBAAX;AACC,aAAOV,KAAP;;AAEF,SAAKJ,KAAK,CAACe,wBAAX;AACER,MAAAA,QAAQ,GAAGN,YAAY,CAAE,EAAF,EAAMG,KAAN,EAAa;AAClCY,QAAAA,GAAG,EAAEV,MAAM,CAACM;AADsB,OAAb,CAAvB;AAGA,aAAOL,QAAP;;AAEF,SAAKP,KAAK,CAACiB,sBAAX;AACE,aAAOb,KAAP;;AAEF,SAAKJ,KAAK,CAACkB,eAAX;AACE,UAAGZ,MAAM,CAACM,OAAP,CAAeO,QAAf,CAAwBC,QAAxB,CAAiCC,QAAjC,CAA0C,UAA1C,CAAH,EAAyD;AACvD,eAAOjB,KAAP;AACD,OAFD,MAGK;AACH,eAAOF,YAAY,CAACG,OAApB;AACD;;AAEH;AACE,aAAOD,KAAP;AAnCJ;AAqCD","sourcesContent":["import * as types from '../constants/actionTypes';\nimport objectAssign from 'object-assign';\nimport initialState from './initialState';\n\n// IMPORTANT: Note that with Redux, state should NEVER be changed.\n// State is considered immutable. Instead,\n// create a copy of the state passed and set new values on the copy.\n// Note that I'm using Object.assign to create a copy of current state\n// and update values on the copy.\nexport default function accountReducer( state = initialState.account, action ) {\n  let newState;\n\n  switch (action.type) {\n\n  \tcase types.LOAD_ACCOUNT_USER:\n      return state;\n\n    case types.LOAD_ACCOUNT_USER_SUCCESS:\n      newState = objectAssign( {}, state, {\n        user: action.payload\n      } );\n      return newState;\n\n    case types.LOAD_ACCOUNT_USER_ERROR:\n      return state;\n\n     case types.LOAD_ACCOUNT_APP:\n      return state;\n\n    case types.LOAD_ACCOUNT_APP_SUCCESS:\n      newState = objectAssign( {}, state, {\n        app: action.payload\n      } );\n      return newState;\n\n    case types.LOAD_ACCOUNT_APP_ERROR:\n      return state;\n\n    case types.LOCATION_CHANGE:\n      if(action.payload.location.pathname.includes(\"/account\")){\n        return state;\n      }\n      else {\n        return initialState.account;\n      }\n\n    default:\n      return state;\n  }\n}"]},"metadata":{},"sourceType":"module"}