{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactDom = require(\"react-dom\");\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _dates = _interopRequireDefault(require(\"./utils/dates\"));\n\nvar _chunk = _interopRequireDefault(require(\"lodash/chunk\"));\n\nvar _constants = require(\"./utils/constants\");\n\nvar _helpers = require(\"./utils/helpers\");\n\nvar _position = _interopRequireDefault(require(\"dom-helpers/query/position\"));\n\nvar _requestAnimationFrame = _interopRequireDefault(require(\"dom-helpers/util/requestAnimationFrame\"));\n\nvar _Popup = _interopRequireDefault(require(\"./Popup\"));\n\nvar _Overlay = _interopRequireDefault(require(\"react-overlays/lib/Overlay\"));\n\nvar _DateContentRow = _interopRequireDefault(require(\"./DateContentRow\"));\n\nvar _Header = _interopRequireDefault(require(\"./Header\"));\n\nvar _DateHeader = _interopRequireDefault(require(\"./DateHeader\"));\n\nvar _eventLevels = require(\"./utils/eventLevels\");\n\nvar eventsForWeek = function eventsForWeek(evts, start, end, accessors) {\n  return evts.filter(function (e) {\n    return (0, _eventLevels.inRange)(e, start, end, accessors);\n  });\n};\n\nvar MonthView =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(MonthView, _React$Component);\n\n  function MonthView() {\n    var _this;\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;\n\n    _this.getContainer = function () {\n      return (0, _reactDom.findDOMNode)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));\n    };\n\n    _this.renderWeek = function (week, weekIdx) {\n      var _this$props = _this.props,\n          events = _this$props.events,\n          components = _this$props.components,\n          selectable = _this$props.selectable,\n          getNow = _this$props.getNow,\n          selected = _this$props.selected,\n          date = _this$props.date,\n          localizer = _this$props.localizer,\n          longPressThreshold = _this$props.longPressThreshold,\n          accessors = _this$props.accessors,\n          getters = _this$props.getters;\n      var _this$state = _this.state,\n          needLimitMeasure = _this$state.needLimitMeasure,\n          rowLimit = _this$state.rowLimit;\n      events = eventsForWeek(events, week[0], week[week.length - 1], accessors);\n      events.sort(function (a, b) {\n        return (0, _eventLevels.sortEvents)(a, b, accessors);\n      });\n      return _react.default.createElement(_DateContentRow.default, {\n        key: weekIdx,\n        ref: weekIdx === 0 ? 'slotRow' : undefined,\n        container: _this.getContainer,\n        className: \"rbc-month-row\",\n        getNow: getNow,\n        date: date,\n        range: week,\n        events: events,\n        maxRows: rowLimit,\n        selected: selected,\n        selectable: selectable,\n        components: components,\n        accessors: accessors,\n        getters: getters,\n        localizer: localizer,\n        renderHeader: _this.readerDateHeading,\n        renderForMeasure: needLimitMeasure,\n        onShowMore: _this.handleShowMore,\n        onSelect: _this.handleSelectEvent,\n        onDoubleClick: _this.handleDoubleClickEvent,\n        onSelectSlot: _this.handleSelectSlot,\n        longPressThreshold: longPressThreshold,\n        rtl: _this.props.rtl\n      });\n    };\n\n    _this.readerDateHeading = function (_ref) {\n      var date = _ref.date,\n          className = _ref.className,\n          props = (0, _objectWithoutPropertiesLoose2.default)(_ref, [\"date\", \"className\"]);\n      var _this$props2 = _this.props,\n          currentDate = _this$props2.date,\n          getDrilldownView = _this$props2.getDrilldownView,\n          localizer = _this$props2.localizer;\n\n      var isOffRange = _dates.default.month(date) !== _dates.default.month(currentDate);\n\n      var isCurrent = _dates.default.eq(date, currentDate, 'day');\n\n      var drilldownView = getDrilldownView(date);\n      var label = localizer.format(date, 'dateFormat');\n      var DateHeaderComponent = _this.props.components.dateHeader || _DateHeader.default;\n      return _react.default.createElement(\"div\", (0, _extends2.default)({}, props, {\n        className: (0, _classnames.default)(className, isOffRange && 'rbc-off-range', isCurrent && 'rbc-current')\n      }), _react.default.createElement(DateHeaderComponent, {\n        label: label,\n        date: date,\n        drilldownView: drilldownView,\n        isOffRange: isOffRange,\n        onDrillDown: function onDrillDown(e) {\n          return _this.handleHeadingClick(date, drilldownView, e);\n        }\n      }));\n    };\n\n    _this.handleSelectSlot = function (range, slotInfo) {\n      _this._pendingSelection = _this._pendingSelection.concat(range);\n      clearTimeout(_this._selectTimer);\n      _this._selectTimer = setTimeout(function () {\n        return _this.selectDates(slotInfo);\n      });\n    };\n\n    _this.handleHeadingClick = function (date, view, e) {\n      e.preventDefault();\n\n      _this.clearSelection();\n\n      (0, _helpers.notify)(_this.props.onDrillDown, [date, view]);\n    };\n\n    _this.handleSelectEvent = function () {\n      _this.clearSelection();\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      (0, _helpers.notify)(_this.props.onSelectEvent, args);\n    };\n\n    _this.handleDoubleClickEvent = function () {\n      _this.clearSelection();\n\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      (0, _helpers.notify)(_this.props.onDoubleClickEvent, args);\n    };\n\n    _this.handleShowMore = function (events, date, cell, slot) {\n      var _this$props3 = _this.props,\n          popup = _this$props3.popup,\n          onDrillDown = _this$props3.onDrillDown,\n          onShowMore = _this$props3.onShowMore,\n          getDrilldownView = _this$props3.getDrilldownView; //cancel any pending selections so only the event click goes through.\n\n      _this.clearSelection();\n\n      if (popup) {\n        var position = (0, _position.default)(cell, (0, _reactDom.findDOMNode)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this))));\n\n        _this.setState({\n          overlay: {\n            date: date,\n            events: events,\n            position: position\n          }\n        });\n      } else {\n        (0, _helpers.notify)(onDrillDown, [date, getDrilldownView(date) || _constants.views.DAY]);\n      }\n\n      (0, _helpers.notify)(onShowMore, [events, date, slot]);\n    };\n\n    _this._bgRows = [];\n    _this._pendingSelection = [];\n    _this.state = {\n      rowLimit: 5,\n      needLimitMeasure: true\n    };\n    return _this;\n  }\n\n  var _proto = MonthView.prototype;\n\n  _proto.componentWillReceiveProps = function componentWillReceiveProps(_ref2) {\n    var date = _ref2.date;\n    this.setState({\n      needLimitMeasure: !_dates.default.eq(date, this.props.date)\n    });\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    var running;\n    if (this.state.needLimitMeasure) this.measureRowLimit(this.props);\n    window.addEventListener('resize', this._resizeListener = function () {\n      if (!running) {\n        (0, _requestAnimationFrame.default)(function () {\n          running = false;\n\n          _this2.setState({\n            needLimitMeasure: true\n          }); //eslint-disable-line\n\n        });\n      }\n    }, false);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    if (this.state.needLimitMeasure) this.measureRowLimit(this.props);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    window.removeEventListener('resize', this._resizeListener, false);\n  };\n\n  _proto.render = function render() {\n    var _this$props4 = this.props,\n        date = _this$props4.date,\n        localizer = _this$props4.localizer,\n        className = _this$props4.className,\n        month = _dates.default.visibleDays(date, localizer),\n        weeks = (0, _chunk.default)(month, 7);\n\n    this._weekCount = weeks.length;\n    return _react.default.createElement(\"div\", {\n      className: (0, _classnames.default)('rbc-month-view', className)\n    }, _react.default.createElement(\"div\", {\n      className: \"rbc-row rbc-month-header\"\n    }, this.renderHeaders(weeks[0])), weeks.map(this.renderWeek), this.props.popup && this.renderOverlay());\n  };\n\n  _proto.renderHeaders = function renderHeaders(row) {\n    var _this$props5 = this.props,\n        localizer = _this$props5.localizer,\n        components = _this$props5.components;\n    var first = row[0];\n    var last = row[row.length - 1];\n    var HeaderComponent = components.header || _Header.default;\n    return _dates.default.range(first, last, 'day').map(function (day, idx) {\n      return _react.default.createElement(\"div\", {\n        key: 'header_' + idx,\n        className: \"rbc-header\"\n      }, _react.default.createElement(HeaderComponent, {\n        date: day,\n        localizer: localizer,\n        label: localizer.format(day, 'weekdayFormat')\n      }));\n    });\n  };\n\n  _proto.renderOverlay = function renderOverlay() {\n    var _this3 = this;\n\n    var overlay = this.state && this.state.overlay || {};\n    var _this$props6 = this.props,\n        accessors = _this$props6.accessors,\n        localizer = _this$props6.localizer,\n        components = _this$props6.components,\n        getters = _this$props6.getters,\n        selected = _this$props6.selected;\n    return _react.default.createElement(_Overlay.default, {\n      rootClose: true,\n      placement: \"bottom\",\n      container: this,\n      show: !!overlay.position,\n      onHide: function onHide() {\n        return _this3.setState({\n          overlay: null\n        });\n      }\n    }, _react.default.createElement(_Popup.default, {\n      accessors: accessors,\n      getters: getters,\n      selected: selected,\n      components: components,\n      localizer: localizer,\n      position: overlay.position,\n      events: overlay.events,\n      slotStart: overlay.date,\n      slotEnd: overlay.end,\n      onSelect: this.handleSelectEvent,\n      onDoubleClick: this.handleDoubleClickEvent\n    }));\n  };\n\n  _proto.measureRowLimit = function measureRowLimit() {\n    this.setState({\n      needLimitMeasure: false,\n      rowLimit: this.refs.slotRow.getRowLimit()\n    });\n  };\n\n  _proto.selectDates = function selectDates(slotInfo) {\n    var slots = this._pendingSelection.slice();\n\n    this._pendingSelection = [];\n    slots.sort(function (a, b) {\n      return +a - +b;\n    });\n    (0, _helpers.notify)(this.props.onSelectSlot, {\n      slots: slots,\n      start: slots[0],\n      end: slots[slots.length - 1],\n      action: slotInfo.action,\n      bounds: slotInfo.bounds,\n      box: slotInfo.box\n    });\n  };\n\n  _proto.clearSelection = function clearSelection() {\n    clearTimeout(this._selectTimer);\n    this._pendingSelection = [];\n  };\n\n  return MonthView;\n}(_react.default.Component);\n\nMonthView.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  events: _propTypes.default.array.isRequired,\n  date: _propTypes.default.instanceOf(Date),\n  min: _propTypes.default.instanceOf(Date),\n  max: _propTypes.default.instanceOf(Date),\n  step: _propTypes.default.number,\n  getNow: _propTypes.default.func.isRequired,\n  scrollToTime: _propTypes.default.instanceOf(Date),\n  rtl: _propTypes.default.bool,\n  width: _propTypes.default.number,\n  accessors: _propTypes.default.object.isRequired,\n  components: _propTypes.default.object.isRequired,\n  getters: _propTypes.default.object.isRequired,\n  localizer: _propTypes.default.object.isRequired,\n  selected: _propTypes.default.object,\n  selectable: _propTypes.default.oneOf([true, false, 'ignoreEvents']),\n  longPressThreshold: _propTypes.default.number,\n  onNavigate: _propTypes.default.func,\n  onSelectSlot: _propTypes.default.func,\n  onSelectEvent: _propTypes.default.func,\n  onDoubleClickEvent: _propTypes.default.func,\n  onShowMore: _propTypes.default.func,\n  onDrillDown: _propTypes.default.func,\n  getDrilldownView: _propTypes.default.func.isRequired,\n  popup: _propTypes.default.bool,\n  popupOffset: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({\n    x: _propTypes.default.number,\n    y: _propTypes.default.number\n  })])\n} : {};\n\nMonthView.range = function (date, _ref3) {\n  var localizer = _ref3.localizer;\n\n  var start = _dates.default.firstVisibleDay(date, localizer);\n\n  var end = _dates.default.lastVisibleDay(date, localizer);\n\n  return {\n    start: start,\n    end: end\n  };\n};\n\nMonthView.navigate = function (date, action) {\n  switch (action) {\n    case _constants.navigate.PREVIOUS:\n      return _dates.default.add(date, -1, 'month');\n\n    case _constants.navigate.NEXT:\n      return _dates.default.add(date, 1, 'month');\n\n    default:\n      return date;\n  }\n};\n\nMonthView.title = function (date, _ref4) {\n  var localizer = _ref4.localizer;\n  return localizer.format(date, 'monthHeaderFormat');\n};\n\nvar _default = MonthView;\nexports.default = _default;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}