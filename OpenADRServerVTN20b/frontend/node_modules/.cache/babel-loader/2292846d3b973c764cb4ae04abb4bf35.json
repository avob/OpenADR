{"ast":null,"code":"'use strict';\n\nvar common = require('../common');\n\nvar Type = require('../type');\n\nfunction isHexCode(c) {\n  return 0x30\n  /* 0 */\n  <= c && c <= 0x39\n  /* 9 */\n  || 0x41\n  /* A */\n  <= c && c <= 0x46\n  /* F */\n  || 0x61\n  /* a */\n  <= c && c <= 0x66\n  /* f */\n  ;\n}\n\nfunction isOctCode(c) {\n  return 0x30\n  /* 0 */\n  <= c && c <= 0x37\n  /* 7 */\n  ;\n}\n\nfunction isDecCode(c) {\n  return 0x30\n  /* 0 */\n  <= c && c <= 0x39\n  /* 9 */\n  ;\n}\n\nfunction resolveYamlInteger(data) {\n  if (data === null) return false;\n  var max = data.length,\n      index = 0,\n      hasDigits = false,\n      ch;\n  if (!max) return false;\n  ch = data[index]; // sign\n\n  if (ch === '-' || ch === '+') {\n    ch = data[++index];\n  }\n\n  if (ch === '0') {\n    // 0\n    if (index + 1 === max) return true;\n    ch = data[++index]; // base 2, base 8, base 16\n\n    if (ch === 'b') {\n      // base 2\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (ch !== '0' && ch !== '1') return false;\n        hasDigits = true;\n      }\n\n      return hasDigits && ch !== '_';\n    }\n\n    if (ch === 'x') {\n      // base 16\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (!isHexCode(data.charCodeAt(index))) return false;\n        hasDigits = true;\n      }\n\n      return hasDigits && ch !== '_';\n    } // base 8\n\n\n    for (; index < max; index++) {\n      ch = data[index];\n      if (ch === '_') continue;\n      if (!isOctCode(data.charCodeAt(index))) return false;\n      hasDigits = true;\n    }\n\n    return hasDigits && ch !== '_';\n  } // base 10 (except 0) or base 60\n  // value should not start with `_`;\n\n\n  if (ch === '_') return false;\n\n  for (; index < max; index++) {\n    ch = data[index];\n    if (ch === '_') continue;\n    if (ch === ':') break;\n\n    if (!isDecCode(data.charCodeAt(index))) {\n      return false;\n    }\n\n    hasDigits = true;\n  } // Should have digits and should not end with `_`\n\n\n  if (!hasDigits || ch === '_') return false; // if !base60 - done;\n\n  if (ch !== ':') return true; // base60 almost not used, no needs to optimize\n\n  return /^(:[0-5]?[0-9])+$/.test(data.slice(index));\n}\n\nfunction constructYamlInteger(data) {\n  var value = data,\n      sign = 1,\n      ch,\n      base,\n      digits = [];\n\n  if (value.indexOf('_') !== -1) {\n    value = value.replace(/_/g, '');\n  }\n\n  ch = value[0];\n\n  if (ch === '-' || ch === '+') {\n    if (ch === '-') sign = -1;\n    value = value.slice(1);\n    ch = value[0];\n  }\n\n  if (value === '0') return 0;\n\n  if (ch === '0') {\n    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);\n    if (value[1] === 'x') return sign * parseInt(value, 16);\n    return sign * parseInt(value, 8);\n  }\n\n  if (value.indexOf(':') !== -1) {\n    value.split(':').forEach(function (v) {\n      digits.unshift(parseInt(v, 10));\n    });\n    value = 0;\n    base = 1;\n    digits.forEach(function (d) {\n      value += d * base;\n      base *= 60;\n    });\n    return sign * value;\n  }\n\n  return sign * parseInt(value, 10);\n}\n\nfunction isInteger(object) {\n  return Object.prototype.toString.call(object) === '[object Number]' && object % 1 === 0 && !common.isNegativeZero(object);\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:int', {\n  kind: 'scalar',\n  resolve: resolveYamlInteger,\n  construct: constructYamlInteger,\n  predicate: isInteger,\n  represent: {\n    binary: function binary(obj) {\n      return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1);\n    },\n    octal: function octal(obj) {\n      return obj >= 0 ? '0' + obj.toString(8) : '-0' + obj.toString(8).slice(1);\n    },\n    decimal: function decimal(obj) {\n      return obj.toString(10);\n    },\n\n    /* eslint-disable max-len */\n    hexadecimal: function hexadecimal(obj) {\n      return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() : '-0x' + obj.toString(16).toUpperCase().slice(1);\n    }\n  },\n  defaultStyle: 'decimal',\n  styleAliases: {\n    binary: [2, 'bin'],\n    octal: [8, 'oct'],\n    decimal: [10, 'dec'],\n    hexadecimal: [16, 'hex']\n  }\n});","map":null,"metadata":{},"sourceType":"script"}