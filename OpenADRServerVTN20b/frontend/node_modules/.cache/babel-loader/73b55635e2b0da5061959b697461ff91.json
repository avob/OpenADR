{"ast":null,"code":"import * as types from '../constants/actionTypes';\nimport objectAssign from 'object-assign';\nimport initialState from './initialState'; // IMPORTANT: Note that with Redux, state should NEVER be changed.\n// State is considered immutable. Instead,\n// create a copy of the state passed and set new values on the copy.\n// Note that I'm using Object.assign to create a copy of current state\n// and update values on the copy.\n\nexport default function eventReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState.event;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var newState;\n\n  switch (action.type) {\n    // EVENT\n    case types.LOAD_EVENT:\n      return state;\n\n    case types.LOAD_EVENT_SUCCESS:\n      newState = objectAssign({}, state, {\n        event: action.payload\n      });\n      return newState;\n\n    case types.LOAD_EVENT_ERROR:\n      return state;\n\n    case types.SEARCH_EVENT:\n      return state;\n\n    case types.SEARCH_EVENT_SUCCESS:\n      newState = objectAssign({}, state, {\n        event: action.payload\n      });\n      return newState;\n\n    case types.SEARCH_EVENT_ERROR:\n      return state;\n\n    case types.DELETE_EVENT:\n      return state;\n\n    case types.DELETE_EVENT_SUCCESS:\n      return state;\n\n    case types.DELETE_EVENT_ERROR:\n      return state;\n    // MARKET CONTEXT\n\n    case types.LOAD_MARKET_CONTEXT:\n      return state;\n\n    case types.LOAD_MARKET_CONTEXT_SUCCESS:\n      newState = objectAssign({}, state, {\n        marketContext: action.payload\n      });\n      return newState;\n\n    case types.LOAD_MARKET_CONTEXT_ERROR:\n      return state;\n    // VEN\n\n    case types.SEARCH_VEN:\n      return state;\n\n    case types.SEARCH_VEN_SUCCESS:\n      newState = objectAssign({}, state, {\n        ven: action.payload\n      });\n      return newState;\n\n    case types.SEARCH_VEN_ERROR:\n      return state;\n\n    case types.LOCATION_CHANGE:\n      if (action.payload.location.pathname.includes(\"/event\")) {\n        return state;\n      } else {\n        return initialState.event;\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/bzanni/Documents/github/OpenADR/OpenADRServerVTN20b/frontend/src/reducers/eventReducer.js"],"names":["types","objectAssign","initialState","eventReducer","state","event","action","newState","type","LOAD_EVENT","LOAD_EVENT_SUCCESS","payload","LOAD_EVENT_ERROR","SEARCH_EVENT","SEARCH_EVENT_SUCCESS","SEARCH_EVENT_ERROR","DELETE_EVENT","DELETE_EVENT_SUCCESS","DELETE_EVENT_ERROR","LOAD_MARKET_CONTEXT","LOAD_MARKET_CONTEXT_SUCCESS","marketContext","LOAD_MARKET_CONTEXT_ERROR","SEARCH_VEN","SEARCH_VEN_SUCCESS","ven","SEARCH_VEN_ERROR","LOCATION_CHANGE","location","pathname","includes"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,0BAAvB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,YAAT,GAA4D;AAAA,MAArCC,KAAqC,uEAA7BF,YAAY,CAACG,KAAgB;AAAA,MAATC,MAAS;AACzE,MAAIC,QAAJ;;AAEA,UAAQD,MAAM,CAACE,IAAf;AAEE;AACA,SAAKR,KAAK,CAACS,UAAX;AACE,aAAOL,KAAP;;AAEF,SAAKJ,KAAK,CAACU,kBAAX;AACEH,MAAAA,QAAQ,GAAGN,YAAY,CAAE,EAAF,EAAMG,KAAN,EAAa;AAClCC,QAAAA,KAAK,EAAEC,MAAM,CAACK;AADoB,OAAb,CAAvB;AAGA,aAAOJ,QAAP;;AAEF,SAAKP,KAAK,CAACY,gBAAX;AACE,aAAOR,KAAP;;AAEF,SAAKJ,KAAK,CAACa,YAAX;AACE,aAAOT,KAAP;;AAEF,SAAKJ,KAAK,CAACc,oBAAX;AACEP,MAAAA,QAAQ,GAAGN,YAAY,CAAE,EAAF,EAAMG,KAAN,EAAa;AAClCC,QAAAA,KAAK,EAAEC,MAAM,CAACK;AADoB,OAAb,CAAvB;AAGA,aAAOJ,QAAP;;AAEF,SAAKP,KAAK,CAACe,kBAAX;AACE,aAAOX,KAAP;;AAEF,SAAKJ,KAAK,CAACgB,YAAX;AACE,aAAOZ,KAAP;;AAEF,SAAKJ,KAAK,CAACiB,oBAAX;AACE,aAAOb,KAAP;;AAEF,SAAKJ,KAAK,CAACkB,kBAAX;AACE,aAAOd,KAAP;AAEH;;AACC,SAAKJ,KAAK,CAACmB,mBAAX;AACE,aAAOf,KAAP;;AAEF,SAAKJ,KAAK,CAACoB,2BAAX;AACEb,MAAAA,QAAQ,GAAGN,YAAY,CAAE,EAAF,EAAMG,KAAN,EAAa;AAClCiB,QAAAA,aAAa,EAAEf,MAAM,CAACK;AADY,OAAb,CAAvB;AAGA,aAAOJ,QAAP;;AAEF,SAAKP,KAAK,CAACsB,yBAAX;AACE,aAAOlB,KAAP;AAEF;;AACA,SAAKJ,KAAK,CAACuB,UAAX;AACE,aAAOnB,KAAP;;AAEF,SAAKJ,KAAK,CAACwB,kBAAX;AACEjB,MAAAA,QAAQ,GAAGN,YAAY,CAAE,EAAF,EAAMG,KAAN,EAAa;AAClCqB,QAAAA,GAAG,EAAEnB,MAAM,CAACK;AADsB,OAAb,CAAvB;AAGA,aAAOJ,QAAP;;AAEF,SAAKP,KAAK,CAAC0B,gBAAX;AACE,aAAOtB,KAAP;;AAEF,SAAKJ,KAAK,CAAC2B,eAAX;AACE,UAAGrB,MAAM,CAACK,OAAP,CAAeiB,QAAf,CAAwBC,QAAxB,CAAiCC,QAAjC,CAA0C,QAA1C,CAAH,EAAuD;AACrD,eAAO1B,KAAP;AACD,OAFD,MAGK;AACH,eAAOF,YAAY,CAACG,KAApB;AACD;;AAGH;AACE,aAAOD,KAAP;AAxEJ;AA0ED","sourcesContent":["import * as types from '../constants/actionTypes';\nimport objectAssign from 'object-assign';\nimport initialState from './initialState';\n\n// IMPORTANT: Note that with Redux, state should NEVER be changed.\n// State is considered immutable. Instead,\n// create a copy of the state passed and set new values on the copy.\n// Note that I'm using Object.assign to create a copy of current state\n// and update values on the copy.\nexport default function eventReducer( state = initialState.event, action ) {\n  let newState;\n\n  switch (action.type) {\n\n    // EVENT\n    case types.LOAD_EVENT:\n      return state;\n\n    case types.LOAD_EVENT_SUCCESS:\n      newState = objectAssign( {}, state, {\n        event: action.payload\n      } );\n      return newState;\n\n    case types.LOAD_EVENT_ERROR:\n      return state;\n\n    case types.SEARCH_EVENT:\n      return state;\n\n    case types.SEARCH_EVENT_SUCCESS:\n      newState = objectAssign( {}, state, {\n        event: action.payload\n      } );\n      return newState;\n\n    case types.SEARCH_EVENT_ERROR:\n      return state;\n  \n    case types.DELETE_EVENT:\n      return state;\n\n    case types.DELETE_EVENT_SUCCESS:\n      return state;\n\n    case types.DELETE_EVENT_ERROR:\n      return state;\n\n  \t// MARKET CONTEXT\n    case types.LOAD_MARKET_CONTEXT:\n      return state;\n\n    case types.LOAD_MARKET_CONTEXT_SUCCESS:\n      newState = objectAssign( {}, state, {\n        marketContext: action.payload\n      } );\n      return newState;\n\n    case types.LOAD_MARKET_CONTEXT_ERROR:\n      return state;\n\n    // VEN\n    case types.SEARCH_VEN:\n      return state;\n\n    case types.SEARCH_VEN_SUCCESS:\n      newState = objectAssign( {}, state, {\n        ven: action.payload\n      } );\n      return newState;\n\n    case types.SEARCH_VEN_ERROR:\n      return state;\n\n    case types.LOCATION_CHANGE:\n      if(action.payload.location.pathname.includes(\"/event\")){\n        return state;\n      }\n      else {\n        return initialState.event;\n      }\n      \n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}