{"ast":null,"code":"import * as types from '../constants/actionTypes';\nimport objectAssign from 'object-assign';\nimport initialState from './initialState'; // IMPORTANT: Note that with Redux, state should NEVER be changed.\n// State is considered immutable. Instead,\n// create a copy of the state passed and set new values on the copy.\n// Note that I'm using Object.assign to create a copy of current state\n// and update values on the copy.\n\nexport default function accountCreateReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState.account_create;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var newState;\n\n  switch (action.type) {\n    // PARAMETERS\n    case types.LOAD_VTN_CONFIGURATION:\n      return state;\n\n    case types.LOAD_VTN_CONFIGURATION_SUCCESS:\n      newState = objectAssign({}, state, {\n        parameters: action.payload\n      });\n      return newState;\n\n    case types.LOAD_VTN_CONFIGURATION_ERROR:\n      return state;\n\n    case types.CREATE_APP:\n      return state;\n\n    case types.CREATE_APP_SUCCESS:\n      return state;\n\n    case types.CREATE_APP_ERROR:\n      return state;\n\n    case types.CREATE_USER:\n      return state;\n\n    case types.CREATE_USER_SUCCESS:\n      return state;\n\n    case types.CREATE_USER_ERROR:\n      return state;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/bzanni/Documents/github/OpenADR/OpenADRServerVTN20b/frontend/src/reducers/accountCreateReducer.js"],"names":["types","objectAssign","initialState","accountCreateReducer","state","account_create","action","newState","type","LOAD_VTN_CONFIGURATION","LOAD_VTN_CONFIGURATION_SUCCESS","parameters","payload","LOAD_VTN_CONFIGURATION_ERROR","CREATE_APP","CREATE_APP_SUCCESS","CREATE_APP_ERROR","CREATE_USER","CREATE_USER_SUCCESS","CREATE_USER_ERROR"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,0BAAvB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,oBAAT,GAA6E;AAAA,MAA9CC,KAA8C,uEAAtCF,YAAY,CAACG,cAAyB;AAAA,MAATC,MAAS;AAC1F,MAAIC,QAAJ;;AAEA,UAAQD,MAAM,CAACE,IAAf;AAEC;AACC,SAAKR,KAAK,CAACS,sBAAX;AACE,aAAOL,KAAP;;AAGF,SAAKJ,KAAK,CAACU,8BAAX;AACEH,MAAAA,QAAQ,GAAGN,YAAY,CAAE,EAAF,EAAMG,KAAN,EAAa;AAClCO,QAAAA,UAAU,EAAEL,MAAM,CAACM;AADe,OAAb,CAAvB;AAGA,aAAOL,QAAP;;AAEF,SAAKP,KAAK,CAACa,4BAAX;AACE,aAAOT,KAAP;;AAEF,SAAKJ,KAAK,CAACc,UAAX;AACE,aAAOV,KAAP;;AAEF,SAAKJ,KAAK,CAACe,kBAAX;AAEE,aAAOX,KAAP;;AAEF,SAAKJ,KAAK,CAACgB,gBAAX;AACE,aAAOZ,KAAP;;AAEF,SAAKJ,KAAK,CAACiB,WAAX;AACE,aAAOb,KAAP;;AAEF,SAAKJ,KAAK,CAACkB,mBAAX;AAEE,aAAOd,KAAP;;AAEF,SAAKJ,KAAK,CAACmB,iBAAX;AACE,aAAOf,KAAP;;AAIF;AACE,aAAOA,KAAP;AAvCJ;AAyCD","sourcesContent":["import * as types from '../constants/actionTypes';\nimport objectAssign from 'object-assign';\nimport initialState from './initialState';\n\n// IMPORTANT: Note that with Redux, state should NEVER be changed.\n// State is considered immutable. Instead,\n// create a copy of the state passed and set new values on the copy.\n// Note that I'm using Object.assign to create a copy of current state\n// and update values on the copy.\nexport default function accountCreateReducer( state = initialState.account_create, action ) {\n  let newState;\n\n  switch (action.type) {\n\n  \t// PARAMETERS\n    case types.LOAD_VTN_CONFIGURATION:\n      return state;\n\n    \n    case types.LOAD_VTN_CONFIGURATION_SUCCESS:\n      newState = objectAssign( {}, state, {\n        parameters: action.payload\n      } );\n      return newState;\n\n    case types.LOAD_VTN_CONFIGURATION_ERROR:\n      return state;\n\n    case types.CREATE_APP:\n      return state;\n\n    case types.CREATE_APP_SUCCESS:\n\n      return state;\n\n    case types.CREATE_APP_ERROR:\n      return state;\n\n    case types.CREATE_USER:\n      return state;\n\n    case types.CREATE_USER_SUCCESS:\n\n      return state;\n\n    case types.CREATE_USER_ERROR:\n      return state;\n\n    \n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}