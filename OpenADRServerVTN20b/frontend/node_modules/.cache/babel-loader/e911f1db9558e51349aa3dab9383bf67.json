{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.styles = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _SwitchBase = _interopRequireDefault(require(\"../internal/SwitchBase\"));\n\nvar _CheckBoxOutlineBlank = _interopRequireDefault(require(\"../internal/svg-icons/CheckBoxOutlineBlank\"));\n\nvar _CheckBox = _interopRequireDefault(require(\"../internal/svg-icons/CheckBox\"));\n\nvar _IndeterminateCheckBox = _interopRequireDefault(require(\"../internal/svg-icons/IndeterminateCheckBox\"));\n\nvar _helpers = require(\"../utils/helpers\");\n\nvar _withStyles = _interopRequireDefault(require(\"../styles/withStyles\"));\n\nvar styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      color: theme.palette.text.secondary\n    },\n\n    /* Styles applied to the root element if `checked={true}`. */\n    checked: {},\n\n    /* Styles applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if `indeterminate={true}`. */\n    indeterminate: {},\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      '&$checked': {\n        color: theme.palette.primary.main\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      '&$checked': {\n        color: theme.palette.secondary.main\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    }\n  };\n};\n\nexports.styles = styles;\n\nfunction Checkbox(props) {\n  var checkedIcon = props.checkedIcon,\n      classes = props.classes,\n      className = props.className,\n      color = props.color,\n      icon = props.icon,\n      indeterminate = props.indeterminate,\n      indeterminateIcon = props.indeterminateIcon,\n      inputProps = props.inputProps,\n      other = (0, _objectWithoutProperties2.default)(props, [\"checkedIcon\", \"classes\", \"className\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\"]);\n  return _react.default.createElement(_SwitchBase.default, (0, _extends2.default)({\n    type: \"checkbox\",\n    checkedIcon: indeterminate ? indeterminateIcon : checkedIcon,\n    className: (0, _classnames.default)((0, _defineProperty2.default)({}, classes.indeterminate, indeterminate), className),\n    classes: {\n      root: (0, _classnames.default)(classes.root, classes[\"color\".concat((0, _helpers.capitalize)(color))]),\n      checked: classes.checked,\n      disabled: classes.disabled\n    },\n    inputProps: (0, _extends2.default)({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: indeterminate ? indeterminateIcon : icon\n  }, other));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes = {\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: _propTypes.default.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: _propTypes.default.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: _propTypes.default.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: _propTypes.default.oneOf(['primary', 'secondary', 'default']),\n\n  /**\n   * If `true`, the switch will be disabled.\n   */\n  disabled: _propTypes.default.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: _propTypes.default.bool,\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: _propTypes.default.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: _propTypes.default.string,\n\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the input.\n   */\n  indeterminate: _propTypes.default.bool,\n\n  /**\n   * The icon to display when the component is indeterminate.\n   */\n  indeterminateIcon: _propTypes.default.node,\n\n  /**\n   * Properties applied to the `input` element.\n   */\n  inputProps: _propTypes.default.object,\n\n  /**\n   * Use that property to pass a ref callback to the native input component.\n   */\n  inputRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.checked`.\n   * @param {boolean} checked The `checked` value of the switch\n   */\n  onChange: _propTypes.default.func,\n\n  /**\n   * The input component property `type`.\n   */\n  type: _propTypes.default.string,\n\n  /**\n   * The value of the component.\n   */\n  value: _propTypes.default.string\n} : void 0;\nCheckbox.defaultProps = {\n  checkedIcon: _react.default.createElement(_CheckBox.default, null),\n  color: 'secondary',\n  icon: _react.default.createElement(_CheckBoxOutlineBlank.default, null),\n  indeterminate: false,\n  indeterminateIcon: _react.default.createElement(_IndeterminateCheckBox.default, null)\n};\n\nvar _default = (0, _withStyles.default)(styles, {\n  name: 'MuiCheckbox'\n})(Checkbox);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}