{"ast":null,"code":"var equalsOptions = {\n  strict: true\n};\n\nvar _equals = require('deep-equal');\n\nvar areEquals = function areEquals(a, b) {\n  return _equals(a, b, equalsOptions);\n};\n\nvar helpers_1 = require('./helpers');\n\nexports.JsonPatchError = helpers_1.PatchError;\nexports.deepClone = helpers_1._deepClone;\n/* We use a Javascript hash to store each\r\n function. Each hash entry (property) uses\r\n the operation identifiers specified in rfc6902.\r\n In this way, we can map each patch operation\r\n to its dedicated function in efficient way.\r\n */\n\n/* The operations applicable to an object */\n\nvar objOps = {\n  add: function add(obj, key, document) {\n    obj[key] = this.value;\n    return {\n      newDocument: document\n    };\n  },\n  remove: function remove(obj, key, document) {\n    var removed = obj[key];\n    delete obj[key];\n    return {\n      newDocument: document,\n      removed: removed\n    };\n  },\n  replace: function replace(obj, key, document) {\n    var removed = obj[key];\n    obj[key] = this.value;\n    return {\n      newDocument: document,\n      removed: removed\n    };\n  },\n  move: function move(obj, key, document) {\n    /* in case move target overwrites an existing value,\r\n    return the removed value, this can be taxing performance-wise,\r\n    and is potentially unneeded */\n    var removed = getValueByPointer(document, this.path);\n\n    if (removed) {\n      removed = helpers_1._deepClone(removed);\n    }\n\n    var originalValue = applyOperation(document, {\n      op: \"remove\",\n      path: this.from\n    }).removed;\n    applyOperation(document, {\n      op: \"add\",\n      path: this.path,\n      value: originalValue\n    });\n    return {\n      newDocument: document,\n      removed: removed\n    };\n  },\n  copy: function copy(obj, key, document) {\n    var valueToCopy = getValueByPointer(document, this.from); // enforce copy by value so further operations don't affect source (see issue #177)\n\n    applyOperation(document, {\n      op: \"add\",\n      path: this.path,\n      value: helpers_1._deepClone(valueToCopy)\n    });\n    return {\n      newDocument: document\n    };\n  },\n  test: function test(obj, key, document) {\n    return {\n      newDocument: document,\n      test: areEquals(obj[key], this.value)\n    };\n  },\n  _get: function _get(obj, key, document) {\n    this.value = obj[key];\n    return {\n      newDocument: document\n    };\n  }\n};\n/* The operations applicable to an array. Many are the same as for the object */\n\nvar arrOps = {\n  add: function add(arr, i, document) {\n    if (helpers_1.isInteger(i)) {\n      arr.splice(i, 0, this.value);\n    } else {\n      arr[i] = this.value;\n    } // this may be needed when using '-' in an array\n\n\n    return {\n      newDocument: document,\n      index: i\n    };\n  },\n  remove: function remove(arr, i, document) {\n    var removedList = arr.splice(i, 1);\n    return {\n      newDocument: document,\n      removed: removedList[0]\n    };\n  },\n  replace: function replace(arr, i, document) {\n    var removed = arr[i];\n    arr[i] = this.value;\n    return {\n      newDocument: document,\n      removed: removed\n    };\n  },\n  move: objOps.move,\n  copy: objOps.copy,\n  test: objOps.test,\n  _get: objOps._get\n};\n/**\r\n * Retrieves a value from a JSON document by a JSON pointer.\r\n * Returns the value.\r\n *\r\n * @param document The document to get the value from\r\n * @param pointer an escaped JSON pointer\r\n * @return The retrieved value\r\n */\n\nfunction getValueByPointer(document, pointer) {\n  if (pointer == '') {\n    return document;\n  }\n\n  var getOriginalDestination = {\n    op: \"_get\",\n    path: pointer\n  };\n  applyOperation(document, getOriginalDestination);\n  return getOriginalDestination.value;\n}\n\nexports.getValueByPointer = getValueByPointer;\n/**\r\n * Apply a single JSON Patch Operation on a JSON document.\r\n * Returns the {newDocument, result} of the operation.\r\n * It modifies the `document` and `operation` objects - it gets the values by reference.\r\n * If you would like to avoid touching your values, clone them:\r\n * `jsonpatch.applyOperation(document, jsonpatch._deepClone(operation))`.\r\n *\r\n * @param document The document to patch\r\n * @param operation The operation to apply\r\n * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.\r\n * @param mutateDocument Whether to mutate the original document or clone it before applying\r\n * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.\r\n * @return `{newDocument, result}` after the operation\r\n */\n\nfunction applyOperation(document, operation, validateOperation, mutateDocument, banPrototypeModifications, index) {\n  if (validateOperation === void 0) {\n    validateOperation = false;\n  }\n\n  if (mutateDocument === void 0) {\n    mutateDocument = true;\n  }\n\n  if (banPrototypeModifications === void 0) {\n    banPrototypeModifications = true;\n  }\n\n  if (index === void 0) {\n    index = 0;\n  }\n\n  if (validateOperation) {\n    if (typeof validateOperation == 'function') {\n      validateOperation(operation, 0, document, operation.path);\n    } else {\n      validator(operation, 0);\n    }\n  }\n  /* ROOT OPERATIONS */\n\n\n  if (operation.path === \"\") {\n    var returnValue = {\n      newDocument: document\n    };\n\n    if (operation.op === 'add') {\n      returnValue.newDocument = operation.value;\n      return returnValue;\n    } else if (operation.op === 'replace') {\n      returnValue.newDocument = operation.value;\n      returnValue.removed = document; //document we removed\n\n      return returnValue;\n    } else if (operation.op === 'move' || operation.op === 'copy') {\n      returnValue.newDocument = getValueByPointer(document, operation.from); // get the value by json-pointer in `from` field\n\n      if (operation.op === 'move') {\n        returnValue.removed = document;\n      }\n\n      return returnValue;\n    } else if (operation.op === 'test') {\n      returnValue.test = areEquals(document, operation.value);\n\n      if (returnValue.test === false) {\n        throw new exports.JsonPatchError(\"Test operation failed\", 'TEST_OPERATION_FAILED', index, operation, document);\n      }\n\n      returnValue.newDocument = document;\n      return returnValue;\n    } else if (operation.op === 'remove') {\n      returnValue.removed = document;\n      returnValue.newDocument = null;\n      return returnValue;\n    } else if (operation.op === '_get') {\n      operation.value = document;\n      return returnValue;\n    } else {\n      if (validateOperation) {\n        throw new exports.JsonPatchError('Operation `op` property is not one of operations defined in RFC-6902', 'OPERATION_OP_INVALID', index, operation, document);\n      } else {\n        return returnValue;\n      }\n    }\n  }\n  /* END ROOT OPERATIONS */\n  else {\n      if (!mutateDocument) {\n        document = helpers_1._deepClone(document);\n      }\n\n      var path = operation.path || \"\";\n      var keys = path.split('/');\n      var obj = document;\n      var t = 1; //skip empty element - http://jsperf.com/to-shift-or-not-to-shift\n\n      var len = keys.length;\n      var existingPathFragment = undefined;\n      var key = void 0;\n      var validateFunction = void 0;\n\n      if (typeof validateOperation == 'function') {\n        validateFunction = validateOperation;\n      } else {\n        validateFunction = validator;\n      }\n\n      while (true) {\n        key = keys[t];\n\n        if (banPrototypeModifications && key == '__proto__') {\n          throw new TypeError('JSON-Patch: modifying `__proto__` prop is banned for security reasons, if this was on purpose, please set `banPrototypeModifications` flag false and pass it to this function. More info in fast-json-patch README');\n        }\n\n        if (validateOperation) {\n          if (existingPathFragment === undefined) {\n            if (obj[key] === undefined) {\n              existingPathFragment = keys.slice(0, t).join('/');\n            } else if (t == len - 1) {\n              existingPathFragment = operation.path;\n            }\n\n            if (existingPathFragment !== undefined) {\n              validateFunction(operation, 0, document, existingPathFragment);\n            }\n          }\n        }\n\n        t++;\n\n        if (Array.isArray(obj)) {\n          if (key === '-') {\n            key = obj.length;\n          } else {\n            if (validateOperation && !helpers_1.isInteger(key)) {\n              throw new exports.JsonPatchError(\"Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index\", \"OPERATION_PATH_ILLEGAL_ARRAY_INDEX\", index, operation, document);\n            } // only parse key when it's an integer for `arr.prop` to work\n            else if (helpers_1.isInteger(key)) {\n                key = ~~key;\n              }\n          }\n\n          if (t >= len) {\n            if (validateOperation && operation.op === \"add\" && key > obj.length) {\n              throw new exports.JsonPatchError(\"The specified index MUST NOT be greater than the number of elements in the array\", \"OPERATION_VALUE_OUT_OF_BOUNDS\", index, operation, document);\n            }\n\n            var returnValue = arrOps[operation.op].call(operation, obj, key, document); // Apply patch\n\n            if (returnValue.test === false) {\n              throw new exports.JsonPatchError(\"Test operation failed\", 'TEST_OPERATION_FAILED', index, operation, document);\n            }\n\n            return returnValue;\n          }\n        } else {\n          if (key && key.indexOf('~') != -1) {\n            key = helpers_1.unescapePathComponent(key);\n          }\n\n          if (t >= len) {\n            var returnValue = objOps[operation.op].call(operation, obj, key, document); // Apply patch\n\n            if (returnValue.test === false) {\n              throw new exports.JsonPatchError(\"Test operation failed\", 'TEST_OPERATION_FAILED', index, operation, document);\n            }\n\n            return returnValue;\n          }\n        }\n\n        obj = obj[key];\n      }\n    }\n}\n\nexports.applyOperation = applyOperation;\n/**\r\n * Apply a full JSON Patch array on a JSON document.\r\n * Returns the {newDocument, result} of the patch.\r\n * It modifies the `document` object and `patch` - it gets the values by reference.\r\n * If you would like to avoid touching your values, clone them:\r\n * `jsonpatch.applyPatch(document, jsonpatch._deepClone(patch))`.\r\n *\r\n * @param document The document to patch\r\n * @param patch The patch to apply\r\n * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.\r\n * @param mutateDocument Whether to mutate the original document or clone it before applying\r\n * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.\r\n * @return An array of `{newDocument, result}` after the patch\r\n */\n\nfunction applyPatch(document, patch, validateOperation, mutateDocument, banPrototypeModifications) {\n  if (mutateDocument === void 0) {\n    mutateDocument = true;\n  }\n\n  if (banPrototypeModifications === void 0) {\n    banPrototypeModifications = true;\n  }\n\n  if (validateOperation) {\n    if (!Array.isArray(patch)) {\n      throw new exports.JsonPatchError('Patch sequence must be an array', 'SEQUENCE_NOT_AN_ARRAY');\n    }\n  }\n\n  if (!mutateDocument) {\n    document = helpers_1._deepClone(document);\n  }\n\n  var results = new Array(patch.length);\n\n  for (var i = 0, length_1 = patch.length; i < length_1; i++) {\n    // we don't need to pass mutateDocument argument because if it was true, we already deep cloned the object, we'll just pass `true`\n    results[i] = applyOperation(document, patch[i], validateOperation, true, banPrototypeModifications, i);\n    document = results[i].newDocument; // in case root was replaced\n  }\n\n  results.newDocument = document;\n  return results;\n}\n\nexports.applyPatch = applyPatch;\n/**\r\n * Apply a single JSON Patch Operation on a JSON document.\r\n * Returns the updated document.\r\n * Suitable as a reducer.\r\n *\r\n * @param document The document to patch\r\n * @param operation The operation to apply\r\n * @return The updated document\r\n */\n\nfunction applyReducer(document, operation, index) {\n  var operationResult = applyOperation(document, operation);\n\n  if (operationResult.test === false) {\n    throw new exports.JsonPatchError(\"Test operation failed\", 'TEST_OPERATION_FAILED', index, operation, document);\n  }\n\n  return operationResult.newDocument;\n}\n\nexports.applyReducer = applyReducer;\n/**\r\n * Validates a single operation. Called from `jsonpatch.validate`. Throws `JsonPatchError` in case of an error.\r\n * @param {object} operation - operation object (patch)\r\n * @param {number} index - index of operation in the sequence\r\n * @param {object} [document] - object where the operation is supposed to be applied\r\n * @param {string} [existingPathFragment] - comes along with `document`\r\n */\n\nfunction validator(operation, index, document, existingPathFragment) {\n  if (typeof operation !== 'object' || operation === null || Array.isArray(operation)) {\n    throw new exports.JsonPatchError('Operation is not an object', 'OPERATION_NOT_AN_OBJECT', index, operation, document);\n  } else if (!objOps[operation.op]) {\n    throw new exports.JsonPatchError('Operation `op` property is not one of operations defined in RFC-6902', 'OPERATION_OP_INVALID', index, operation, document);\n  } else if (typeof operation.path !== 'string') {\n    throw new exports.JsonPatchError('Operation `path` property is not a string', 'OPERATION_PATH_INVALID', index, operation, document);\n  } else if (operation.path.indexOf('/') !== 0 && operation.path.length > 0) {\n    // paths that aren't empty string should start with \"/\"\n    throw new exports.JsonPatchError('Operation `path` property must start with \"/\"', 'OPERATION_PATH_INVALID', index, operation, document);\n  } else if ((operation.op === 'move' || operation.op === 'copy') && typeof operation.from !== 'string') {\n    throw new exports.JsonPatchError('Operation `from` property is not present (applicable in `move` and `copy` operations)', 'OPERATION_FROM_REQUIRED', index, operation, document);\n  } else if ((operation.op === 'add' || operation.op === 'replace' || operation.op === 'test') && operation.value === undefined) {\n    throw new exports.JsonPatchError('Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)', 'OPERATION_VALUE_REQUIRED', index, operation, document);\n  } else if ((operation.op === 'add' || operation.op === 'replace' || operation.op === 'test') && helpers_1.hasUndefined(operation.value)) {\n    throw new exports.JsonPatchError('Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)', 'OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED', index, operation, document);\n  } else if (document) {\n    if (operation.op == \"add\") {\n      var pathLen = operation.path.split(\"/\").length;\n      var existingPathLen = existingPathFragment.split(\"/\").length;\n\n      if (pathLen !== existingPathLen + 1 && pathLen !== existingPathLen) {\n        throw new exports.JsonPatchError('Cannot perform an `add` operation at the desired path', 'OPERATION_PATH_CANNOT_ADD', index, operation, document);\n      }\n    } else if (operation.op === 'replace' || operation.op === 'remove' || operation.op === '_get') {\n      if (operation.path !== existingPathFragment) {\n        throw new exports.JsonPatchError('Cannot perform the operation at a path that does not exist', 'OPERATION_PATH_UNRESOLVABLE', index, operation, document);\n      }\n    } else if (operation.op === 'move' || operation.op === 'copy') {\n      var existingValue = {\n        op: \"_get\",\n        path: operation.from,\n        value: undefined\n      };\n      var error = validate([existingValue], document);\n\n      if (error && error.name === 'OPERATION_PATH_UNRESOLVABLE') {\n        throw new exports.JsonPatchError('Cannot perform the operation from a path that does not exist', 'OPERATION_FROM_UNRESOLVABLE', index, operation, document);\n      }\n    }\n  }\n}\n\nexports.validator = validator;\n/**\r\n * Validates a sequence of operations. If `document` parameter is provided, the sequence is additionally validated against the object document.\r\n * If error is encountered, returns a JsonPatchError object\r\n * @param sequence\r\n * @param document\r\n * @returns {JsonPatchError|undefined}\r\n */\n\nfunction validate(sequence, document, externalValidator) {\n  try {\n    if (!Array.isArray(sequence)) {\n      throw new exports.JsonPatchError('Patch sequence must be an array', 'SEQUENCE_NOT_AN_ARRAY');\n    }\n\n    if (document) {\n      //clone document and sequence so that we can safely try applying operations\n      applyPatch(helpers_1._deepClone(document), helpers_1._deepClone(sequence), externalValidator || true);\n    } else {\n      externalValidator = externalValidator || validator;\n\n      for (var i = 0; i < sequence.length; i++) {\n        externalValidator(sequence[i], i, document, undefined);\n      }\n    }\n  } catch (e) {\n    if (e instanceof exports.JsonPatchError) {\n      return e;\n    } else {\n      throw e;\n    }\n  }\n}\n\nexports.validate = validate;","map":null,"metadata":{},"sourceType":"script"}