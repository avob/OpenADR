{"ast":null,"code":"import Swagger from 'swagger-client';\nimport * as types from '../constants/actionTypes';\nimport swagger from 'swagger-client';\nimport { config, history } from './configureStore';\nvar swaggerClient = null;\nvar connectionPending = true;\n\nvar responseInterceptor = function responseInterceptor(res) {// console.log(res);\n};\n\nvar loadClient = function loadClient(url, dispatch) {\n  return new Promise(function (resolve, reject) {\n    if (swaggerClient != null) {\n      resolve(swaggerClient);\n    } else {\n      var params = {\n        url: url,\n        responseInterceptor: responseInterceptor,\n        requestInterceptor: function requestInterceptor(req) {\n          if (config.username != null && config.password != null) {\n            var encoded = btoa(config.username + \":\" + config.password);\n            console.log(encoded);\n            req.headers[\"Authorization\"] = \"Basic \" + encoded;\n          }\n        }\n      };\n      return Swagger(params).then(function (client) {\n        config.isConnected = true;\n        config.isConnectionPending = false; // dispatch({\n        //   type: types.LOGIN_USER_SUCCESS\n        // })\n\n        swaggerClient = client;\n        resolve(client);\n      }).catch(function (err) {\n        config.isConnected = false;\n        config.isConnectionPending = false;\n        dispatch({\n          type: types.LOGIN_USER_ERROR,\n          payload: err\n        });\n        history.push(\"/login\");\n        swaggerClient = null;\n      });\n    }\n  });\n};\n\nexport default function swaggerMiddleware(opts) {\n  return function (store) {\n    return function (next) {\n      return function (action) {\n        console.log(action.type);\n\n        if (action.type.indexOf(\"_ERROR\") > -1) {\n          console.log(action.payload);\n        }\n\n        if (!action.swagger) {\n          return next(action);\n        }\n\n        loadClient(opts.url, store.dispatch, config).then(function (client) {\n          action.swagger(client);\n        });\n      };\n    };\n  };\n}","map":{"version":3,"sources":["/home/bzanni/Documents/github/OpenADR/OpenADRServerVTN20b/frontend/src/store/swaggerMiddleware.js"],"names":["Swagger","types","swagger","config","history","swaggerClient","connectionPending","responseInterceptor","res","loadClient","url","dispatch","Promise","resolve","reject","params","requestInterceptor","req","username","password","encoded","btoa","console","log","headers","then","client","isConnected","isConnectionPending","catch","err","type","LOGIN_USER_ERROR","payload","push","swaggerMiddleware","opts","store","next","action","indexOf"],"mappings":"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","sourcesContent":["import Swagger from 'swagger-client';\nimport * as types from '../constants/actionTypes';\nimport swagger from 'swagger-client'\n\nimport { config, history } from './configureStore';\n\n\nvar swaggerClient = null;\nvar connectionPending = true;\n\nvar responseInterceptor=  (res) => {\n    // console.log(res);\n  }\n\n\nvar loadClient = function ( url, dispatch) {\n  return new Promise( (resolve, reject) => {\n    if ( swaggerClient != null ) {\n      resolve( swaggerClient );\n\n    } else {\n      var params = {url:url, responseInterceptor: responseInterceptor\n        , requestInterceptor: req => {\n          if(config.username != null && config.password != null) {\n            var encoded = btoa(config.username +\":\"+config.password);\n            console.log(encoded)\n            req.headers[\"Authorization\"] = \"Basic \"+ encoded\n          }\n        }};\n\n      \n      return Swagger( params ).then( client => {\n        config.isConnected = true\n        config.isConnectionPending = false\n        // dispatch({\n        //   type: types.LOGIN_USER_SUCCESS\n        // })\n        swaggerClient = client; \n        resolve( client );\n      } ).catch(err => {\n        config.isConnected = false\n        config.isConnectionPending = false\n        dispatch({\n          type: types.LOGIN_USER_ERROR,\n          payload: err\n        });\n        history.push(\"/login\")\n        swaggerClient = null;\n      });\n    }\n  } );\n}\n\nexport default function swaggerMiddleware( opts ) {\n  return store => next => action => {\n    \n    console.log( action.type )\n    if(action.type.indexOf(\"_ERROR\") > -1){\n      console.log(action.payload)\n    }\n\n    if ( !action.swagger ) {\n      return next( action );\n    }\n\n    loadClient( opts.url, store.dispatch, config )\n      .then( (client) => {\n        action.swagger( client );\n      } )\n\n\n  }\n}\n"]},"metadata":{},"sourceType":"module"}