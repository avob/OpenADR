{"ast":null,"code":"import * as types from '../constants/actionTypes';\nimport objectAssign from 'object-assign';\nimport initialState from './initialState'; // IMPORTANT: Note that with Redux, state should NEVER be changed.\n// State is considered immutable. Instead,\n// create a copy of the state passed and set new values on the copy.\n// Note that I'm using Object.assign to create a copy of current state\n// and update values on the copy.\n\nexport default function vtnConfigurationReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState.vtnConfiguration;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var newState;\n\n  switch (action.type) {\n    // PARAMETERS\n    case types.LOAD_VTN_CONFIGURATION:\n      return state;\n\n    case types.LOAD_VTN_CONFIGURATION_SUCCESS:\n      newState = objectAssign({}, state, {\n        parameters: action.payload\n      });\n      return newState;\n\n    case types.LOAD_VTN_CONFIGURATION_ERROR:\n      return state;\n    // MARKET CONTEXT\n\n    case types.LOAD_MARKET_CONTEXT:\n      return state;\n\n    case types.LOAD_MARKET_CONTEXT_SUCCESS:\n      newState = objectAssign({}, state, {\n        marketContext: action.payload\n      });\n      return newState;\n\n    case types.LOAD_MARKET_CONTEXT_ERROR:\n      return state;\n\n    case types.CREATE_MARKET_CONTEXT:\n      return state;\n\n    case types.CREATE_MARKET_CONTEXT_SUCCESS:\n      return state;\n\n    case types.CREATE_MARKET_CONTEXT_ERROR:\n      return state;\n\n    case types.DELETE_MARKET_CONTEXT:\n      return state;\n\n    case types.DELETE_MARKET_CONTEXT_SUCCESS:\n      return state;\n\n    case types.DELETE_MARKET_CONTEXT_ERROR:\n      return state;\n    // GROUPS\n\n    case types.LOAD_GROUP:\n      return state;\n\n    case types.LOAD_GROUP_SUCCESS:\n      newState = objectAssign({}, state, {\n        group: action.payload\n      });\n      return newState;\n\n    case types.LOAD_GROUP_ERROR:\n      return state;\n\n    case types.CREATE_GROUP:\n      return state;\n\n    case types.CREATE_GROUP_SUCCESS:\n      return state;\n\n    case types.CREATE_GROUP_ERROR:\n      return state;\n\n    case types.DELETE_GROUP:\n      return state;\n\n    case types.DELETE_GROUP_SUCCESS:\n      return state;\n\n    case types.DELETE_GROUP_ERROR:\n      return state;\n\n    case types.LOCATION_CHANGE:\n      if (action.payload.location.pathname.includes(\"/vtn_configuration\")) {\n        return state;\n      } else {\n        return initialState.event;\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/bzanni/Documents/github/OpenADR/OpenADRServerVTN20b/frontend/src/reducers/vtnConfigurationReducer.js"],"names":["types","objectAssign","initialState","vtnConfigurationReducer","state","vtnConfiguration","action","newState","type","LOAD_VTN_CONFIGURATION","LOAD_VTN_CONFIGURATION_SUCCESS","parameters","payload","LOAD_VTN_CONFIGURATION_ERROR","LOAD_MARKET_CONTEXT","LOAD_MARKET_CONTEXT_SUCCESS","marketContext","LOAD_MARKET_CONTEXT_ERROR","CREATE_MARKET_CONTEXT","CREATE_MARKET_CONTEXT_SUCCESS","CREATE_MARKET_CONTEXT_ERROR","DELETE_MARKET_CONTEXT","DELETE_MARKET_CONTEXT_SUCCESS","DELETE_MARKET_CONTEXT_ERROR","LOAD_GROUP","LOAD_GROUP_SUCCESS","group","LOAD_GROUP_ERROR","CREATE_GROUP","CREATE_GROUP_SUCCESS","CREATE_GROUP_ERROR","DELETE_GROUP","DELETE_GROUP_SUCCESS","DELETE_GROUP_ERROR","LOCATION_CHANGE","location","pathname","includes","event"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,0BAAvB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,uBAAT,GAAkF;AAAA,MAAhDC,KAAgD,uEAAxCF,YAAY,CAACG,gBAA2B;AAAA,MAATC,MAAS;AAC/F,MAAIC,QAAJ;;AAEA,UAAQD,MAAM,CAACE,IAAf;AAEE;AACA,SAAKR,KAAK,CAACS,sBAAX;AACE,aAAOL,KAAP;;AAGF,SAAKJ,KAAK,CAACU,8BAAX;AACEH,MAAAA,QAAQ,GAAGN,YAAY,CAAE,EAAF,EAAMG,KAAN,EAAa;AAClCO,QAAAA,UAAU,EAAEL,MAAM,CAACM;AADe,OAAb,CAAvB;AAGA,aAAOL,QAAP;;AAEF,SAAKP,KAAK,CAACa,4BAAX;AACE,aAAOT,KAAP;AAEJ;;AACE,SAAKJ,KAAK,CAACc,mBAAX;AACE,aAAOV,KAAP;;AAEF,SAAKJ,KAAK,CAACe,2BAAX;AACER,MAAAA,QAAQ,GAAGN,YAAY,CAAE,EAAF,EAAMG,KAAN,EAAa;AAClCY,QAAAA,aAAa,EAAEV,MAAM,CAACM;AADY,OAAb,CAAvB;AAGA,aAAOL,QAAP;;AAEF,SAAKP,KAAK,CAACiB,yBAAX;AACE,aAAOb,KAAP;;AAEF,SAAKJ,KAAK,CAACkB,qBAAX;AACE,aAAOd,KAAP;;AAEF,SAAKJ,KAAK,CAACmB,6BAAX;AACE,aAAOf,KAAP;;AAEF,SAAKJ,KAAK,CAACoB,2BAAX;AACE,aAAOhB,KAAP;;AAEF,SAAKJ,KAAK,CAACqB,qBAAX;AACE,aAAOjB,KAAP;;AAEF,SAAKJ,KAAK,CAACsB,6BAAX;AACE,aAAOlB,KAAP;;AAEF,SAAKJ,KAAK,CAACuB,2BAAX;AACE,aAAOnB,KAAP;AAEA;;AACF,SAAKJ,KAAK,CAACwB,UAAX;AACE,aAAOpB,KAAP;;AAEF,SAAKJ,KAAK,CAACyB,kBAAX;AACElB,MAAAA,QAAQ,GAAGN,YAAY,CAAE,EAAF,EAAMG,KAAN,EAAa;AAClCsB,QAAAA,KAAK,EAAEpB,MAAM,CAACM;AADoB,OAAb,CAAvB;AAGA,aAAOL,QAAP;;AAEF,SAAKP,KAAK,CAAC2B,gBAAX;AACE,aAAOvB,KAAP;;AAEF,SAAKJ,KAAK,CAAC4B,YAAX;AACE,aAAOxB,KAAP;;AAEF,SAAKJ,KAAK,CAAC6B,oBAAX;AACE,aAAOzB,KAAP;;AAEF,SAAKJ,KAAK,CAAC8B,kBAAX;AACE,aAAO1B,KAAP;;AAEF,SAAKJ,KAAK,CAAC+B,YAAX;AACE,aAAO3B,KAAP;;AAEF,SAAKJ,KAAK,CAACgC,oBAAX;AACE,aAAO5B,KAAP;;AAEF,SAAKJ,KAAK,CAACiC,kBAAX;AACE,aAAO7B,KAAP;;AAEF,SAAKJ,KAAK,CAACkC,eAAX;AACE,UAAG5B,MAAM,CAACM,OAAP,CAAeuB,QAAf,CAAwBC,QAAxB,CAAiCC,QAAjC,CAA0C,oBAA1C,CAAH,EAAmE;AACjE,eAAOjC,KAAP;AACD,OAFD,MAGK;AACH,eAAOF,YAAY,CAACoC,KAApB;AACD;;AAGH;AACE,aAAOlC,KAAP;AAxFJ;AA0FD","sourcesContent":["import * as types from '../constants/actionTypes';\nimport objectAssign from 'object-assign';\nimport initialState from './initialState';\n\n// IMPORTANT: Note that with Redux, state should NEVER be changed.\n// State is considered immutable. Instead,\n// create a copy of the state passed and set new values on the copy.\n// Note that I'm using Object.assign to create a copy of current state\n// and update values on the copy.\nexport default function vtnConfigurationReducer( state = initialState.vtnConfiguration, action ) {\n  let newState;\n\n  switch (action.type) {\n\n    // PARAMETERS\n    case types.LOAD_VTN_CONFIGURATION:\n      return state;\n\n    \n    case types.LOAD_VTN_CONFIGURATION_SUCCESS:\n      newState = objectAssign( {}, state, {\n        parameters: action.payload\n      } );\n      return newState;\n\n    case types.LOAD_VTN_CONFIGURATION_ERROR:\n      return state;\n\n  // MARKET CONTEXT\n    case types.LOAD_MARKET_CONTEXT:\n      return state;\n\n    case types.LOAD_MARKET_CONTEXT_SUCCESS:\n      newState = objectAssign( {}, state, {\n        marketContext: action.payload\n      } );\n      return newState;\n\n    case types.LOAD_MARKET_CONTEXT_ERROR:\n      return state;\n\n    case types.CREATE_MARKET_CONTEXT:\n      return state;\n\n    case types.CREATE_MARKET_CONTEXT_SUCCESS:\n      return state;\n\n    case types.CREATE_MARKET_CONTEXT_ERROR:\n      return state;\n\n    case types.DELETE_MARKET_CONTEXT:\n      return state;\n\n    case types.DELETE_MARKET_CONTEXT_SUCCESS:\n      return state;\n\n    case types.DELETE_MARKET_CONTEXT_ERROR:\n      return state;\n\n      // GROUPS\n    case types.LOAD_GROUP:\n      return state;\n\n    case types.LOAD_GROUP_SUCCESS:\n      newState = objectAssign( {}, state, {\n        group: action.payload\n      } );\n      return newState;\n\n    case types.LOAD_GROUP_ERROR:\n      return state;\n\n    case types.CREATE_GROUP:\n      return state;\n\n    case types.CREATE_GROUP_SUCCESS:\n      return state;\n\n    case types.CREATE_GROUP_ERROR:\n      return state;\n\n    case types.DELETE_GROUP:\n      return state;\n\n    case types.DELETE_GROUP_SUCCESS:\n      return state;\n\n    case types.DELETE_GROUP_ERROR:\n      return state;\n\n    case types.LOCATION_CHANGE:\n      if(action.payload.location.pathname.includes(\"/vtn_configuration\")){\n        return state;\n      }\n      else {\n        return initialState.event;\n      }\n      \n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}