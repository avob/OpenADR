{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _requestAnimationFrame = _interopRequireDefault(require(\"dom-helpers/util/requestAnimationFrame\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactDom = require(\"react-dom\");\n\nvar _memoizeOne = _interopRequireDefault(require(\"memoize-one\"));\n\nvar _dates = _interopRequireDefault(require(\"./utils/dates\"));\n\nvar _DayColumn = _interopRequireDefault(require(\"./DayColumn\"));\n\nvar _TimeGutter = _interopRequireDefault(require(\"./TimeGutter\"));\n\nvar _width = _interopRequireDefault(require(\"dom-helpers/query/width\"));\n\nvar _TimeGridHeader = _interopRequireDefault(require(\"./TimeGridHeader\"));\n\nvar _helpers = require(\"./utils/helpers\");\n\nvar _eventLevels = require(\"./utils/eventLevels\");\n\nvar _Resources = _interopRequireDefault(require(\"./utils/Resources\"));\n\nvar TimeGrid =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inheritsLoose2.default)(TimeGrid, _Component);\n\n  function TimeGrid(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n\n    _this.handleScroll = function (e) {\n      if (_this.scrollRef.current) {\n        _this.scrollRef.current.scrollLeft = e.target.scrollLeft;\n      }\n    };\n\n    _this.handleResize = function () {\n      _requestAnimationFrame.default.cancel(_this.rafHandle);\n\n      _this.rafHandle = (0, _requestAnimationFrame.default)(_this.checkOverflow);\n    };\n\n    _this.gutterRef = function (ref) {\n      _this.gutter = ref && (0, _reactDom.findDOMNode)(ref);\n    };\n\n    _this.handleSelectAlldayEvent = function () {\n      //cancel any pending selections so only the event click goes through.\n      _this.clearSelection();\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      (0, _helpers.notify)(_this.props.onSelectEvent, args);\n    };\n\n    _this.handleSelectAllDaySlot = function (slots, slotInfo) {\n      var onSelectSlot = _this.props.onSelectSlot;\n      (0, _helpers.notify)(onSelectSlot, {\n        slots: slots,\n        start: slots[0],\n        end: slots[slots.length - 1],\n        action: slotInfo.action\n      });\n    };\n\n    _this.checkOverflow = function () {\n      if (_this._updatingOverflow) return;\n      var isOverflowing = _this.refs.content.scrollHeight > _this.refs.content.clientHeight;\n\n      if (_this.state.isOverflowing !== isOverflowing) {\n        _this._updatingOverflow = true;\n\n        _this.setState({\n          isOverflowing: isOverflowing\n        }, function () {\n          _this._updatingOverflow = false;\n        });\n      }\n    };\n\n    _this.memoizedResources = (0, _memoizeOne.default)(function (resources, accessors) {\n      return (0, _Resources.default)(resources, accessors);\n    });\n    _this.state = {\n      gutterWidth: undefined,\n      isOverflowing: null\n    };\n    _this.scrollRef = _react.default.createRef();\n    return _this;\n  }\n\n  var _proto = TimeGrid.prototype;\n\n  _proto.componentWillMount = function componentWillMount() {\n    this.calculateScroll();\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.checkOverflow();\n\n    if (this.props.width == null) {\n      this.measureGutter();\n    }\n\n    this.applyScroll();\n    window.addEventListener('resize', this.handleResize);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    window.removeEventListener('resize', this.handleResize);\n\n    _requestAnimationFrame.default.cancel(this.rafHandle);\n\n    if (this.measureGutterAnimationFrameRequest) {\n      window.cancelAnimationFrame(this.measureGutterAnimationFrameRequest);\n    }\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    if (this.props.width == null) {\n      this.measureGutter();\n    }\n\n    this.applyScroll(); //this.checkOverflow()\n  };\n\n  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var _this$props = this.props,\n        range = _this$props.range,\n        scrollToTime = _this$props.scrollToTime; // When paginating, reset scroll\n\n    if (!_dates.default.eq(nextProps.range[0], range[0], 'minute') || !_dates.default.eq(nextProps.scrollToTime, scrollToTime, 'minute')) {\n      this.calculateScroll(nextProps);\n    }\n  };\n\n  _proto.renderEvents = function renderEvents(range, events, now) {\n    var _this2 = this;\n\n    var _this$props2 = this.props,\n        min = _this$props2.min,\n        max = _this$props2.max,\n        components = _this$props2.components,\n        accessors = _this$props2.accessors,\n        localizer = _this$props2.localizer;\n    var resources = this.memoizedResources(this.props.resources, accessors);\n    var groupedEvents = resources.groupEvents(events);\n    return resources.map(function (_ref, i) {\n      var id = _ref[0],\n          resource = _ref[1];\n      return range.map(function (date, jj) {\n        var daysEvents = (groupedEvents.get(id) || []).filter(function (event) {\n          return _dates.default.inRange(date, accessors.start(event), accessors.end(event), 'day');\n        });\n        return _react.default.createElement(_DayColumn.default, (0, _extends2.default)({}, _this2.props, {\n          localizer: localizer,\n          min: _dates.default.merge(date, min),\n          max: _dates.default.merge(date, max),\n          resource: resource && id,\n          components: components,\n          isNow: _dates.default.eq(date, now, 'day'),\n          key: i + '-' + jj,\n          date: date,\n          events: daysEvents\n        }));\n      });\n    });\n  };\n\n  _proto.render = function render() {\n    var _this$props3 = this.props,\n        events = _this$props3.events,\n        range = _this$props3.range,\n        width = _this$props3.width,\n        selected = _this$props3.selected,\n        getNow = _this$props3.getNow,\n        resources = _this$props3.resources,\n        components = _this$props3.components,\n        accessors = _this$props3.accessors,\n        getters = _this$props3.getters,\n        localizer = _this$props3.localizer,\n        min = _this$props3.min,\n        max = _this$props3.max,\n        showMultiDayTimes = _this$props3.showMultiDayTimes,\n        longPressThreshold = _this$props3.longPressThreshold;\n    width = width || this.state.gutterWidth;\n    var start = range[0],\n        end = range[range.length - 1];\n    this.slots = range.length;\n    var allDayEvents = [],\n        rangeEvents = [];\n    events.forEach(function (event) {\n      if ((0, _eventLevels.inRange)(event, start, end, accessors)) {\n        var eStart = accessors.start(event),\n            eEnd = accessors.end(event);\n\n        if (accessors.allDay(event) || _dates.default.isJustDate(eStart) && _dates.default.isJustDate(eEnd) || !showMultiDayTimes && !_dates.default.eq(eStart, eEnd, 'day')) {\n          allDayEvents.push(event);\n        } else {\n          rangeEvents.push(event);\n        }\n      }\n    });\n    allDayEvents.sort(function (a, b) {\n      return (0, _eventLevels.sortEvents)(a, b, accessors);\n    });\n    return _react.default.createElement(\"div\", {\n      className: (0, _classnames.default)('rbc-time-view', resources && 'rbc-time-view-resources')\n    }, _react.default.createElement(_TimeGridHeader.default, {\n      range: range,\n      events: allDayEvents,\n      width: width,\n      getNow: getNow,\n      localizer: localizer,\n      selected: selected,\n      resources: this.memoizedResources(resources, accessors),\n      selectable: this.props.selectable,\n      accessors: accessors,\n      getters: getters,\n      components: components,\n      scrollRef: this.scrollRef,\n      isOverflowing: this.state.isOverflowing,\n      longPressThreshold: longPressThreshold,\n      onSelectSlot: this.handleSelectAllDaySlot,\n      onSelectEvent: this.handleSelectAlldayEvent,\n      onDoubleClickEvent: this.props.onDoubleClickEvent,\n      onDrillDown: this.props.onDrillDown,\n      getDrilldownView: this.props.getDrilldownView\n    }), _react.default.createElement(\"div\", {\n      ref: \"content\",\n      className: \"rbc-time-content\",\n      onScroll: this.handleScroll\n    }, _react.default.createElement(_TimeGutter.default, {\n      date: start,\n      ref: this.gutterRef,\n      localizer: localizer,\n      min: _dates.default.merge(start, min),\n      max: _dates.default.merge(start, max),\n      step: this.props.step,\n      getNow: this.props.getNow,\n      timeslots: this.props.timeslots,\n      components: components,\n      className: \"rbc-time-gutter\"\n    }), this.renderEvents(range, rangeEvents, getNow())));\n  };\n\n  _proto.clearSelection = function clearSelection() {\n    clearTimeout(this._selectTimer);\n    this._pendingSelection = [];\n  };\n\n  _proto.measureGutter = function measureGutter() {\n    var _this3 = this;\n\n    if (this.measureGutterAnimationFrameRequest) {\n      window.cancelAnimationFrame(this.measureGutterAnimationFrameRequest);\n    }\n\n    this.measureGutterAnimationFrameRequest = window.requestAnimationFrame(function () {\n      var width = (0, _width.default)(_this3.gutter);\n\n      if (width && _this3.state.gutterWidth !== width) {\n        _this3.setState({\n          gutterWidth: width\n        });\n      }\n    });\n  };\n\n  _proto.applyScroll = function applyScroll() {\n    if (this._scrollRatio) {\n      var content = this.refs.content;\n      content.scrollTop = content.scrollHeight * this._scrollRatio; // Only do this once\n\n      this._scrollRatio = null;\n    }\n  };\n\n  _proto.calculateScroll = function calculateScroll(props) {\n    if (props === void 0) {\n      props = this.props;\n    }\n\n    var _props = props,\n        min = _props.min,\n        max = _props.max,\n        scrollToTime = _props.scrollToTime;\n\n    var diffMillis = scrollToTime - _dates.default.startOf(scrollToTime, 'day');\n\n    var totalMillis = _dates.default.diff(max, min);\n\n    this._scrollRatio = diffMillis / totalMillis;\n  };\n\n  return TimeGrid;\n}(_react.Component);\n\nexports.default = TimeGrid;\nTimeGrid.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  events: _propTypes.default.array.isRequired,\n  resources: _propTypes.default.array,\n  step: _propTypes.default.number,\n  timeslots: _propTypes.default.number,\n  range: _propTypes.default.arrayOf(_propTypes.default.instanceOf(Date)),\n  min: _propTypes.default.instanceOf(Date),\n  max: _propTypes.default.instanceOf(Date),\n  getNow: _propTypes.default.func.isRequired,\n  scrollToTime: _propTypes.default.instanceOf(Date),\n  showMultiDayTimes: _propTypes.default.bool,\n  rtl: _propTypes.default.bool,\n  width: _propTypes.default.number,\n  accessors: _propTypes.default.object.isRequired,\n  components: _propTypes.default.object.isRequired,\n  getters: _propTypes.default.object.isRequired,\n  localizer: _propTypes.default.object.isRequired,\n  selected: _propTypes.default.object,\n  selectable: _propTypes.default.oneOf([true, false, 'ignoreEvents']),\n  longPressThreshold: _propTypes.default.number,\n  onNavigate: _propTypes.default.func,\n  onSelectSlot: _propTypes.default.func,\n  onSelectEnd: _propTypes.default.func,\n  onSelectStart: _propTypes.default.func,\n  onSelectEvent: _propTypes.default.func,\n  onDoubleClickEvent: _propTypes.default.func,\n  onDrillDown: _propTypes.default.func,\n  getDrilldownView: _propTypes.default.func.isRequired\n} : {};\nTimeGrid.defaultProps = {\n  step: 30,\n  timeslots: 2,\n  min: _dates.default.startOf(new Date(), 'day'),\n  max: _dates.default.endOf(new Date(), 'day'),\n  scrollToTime: _dates.default.startOf(new Date(), 'day')\n};\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}