{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.getSlotMetrics = getSlotMetrics;\n\nvar _dates = _interopRequireDefault(require(\"./dates\"));\n\nvar getDstOffset = function getDstOffset(start, end) {\n  return start.getTimezoneOffset() - end.getTimezoneOffset();\n};\n\nvar getKey = function getKey(min, max, step, slots) {\n  return \"\" + +_dates.default.startOf(min, 'minutes') + (\"\" + +_dates.default.startOf(max, 'minutes')) + (step + \"-\" + slots);\n};\n\nfunction getSlotMetrics(_ref) {\n  var start = _ref.min,\n      end = _ref.max,\n      step = _ref.step,\n      timeslots = _ref.timeslots;\n  var key = getKey(start, end, step, timeslots);\n  var totalMin = 1 + _dates.default.diff(start, end, 'minutes') + getDstOffset(start, end);\n\n  var minutesFromMidnight = _dates.default.diff(_dates.default.startOf(start, 'day'), start, 'minutes');\n\n  var numGroups = Math.ceil(totalMin / (step * timeslots));\n  var numSlots = numGroups * timeslots;\n  var groups = new Array(numGroups);\n  var slots = new Array(numSlots); // Each slot date is created from \"zero\", instead of adding `step` to\n  // the previous one, in order to avoid DST oddities\n\n  for (var grp = 0; grp < numGroups; grp++) {\n    groups[grp] = new Array(timeslots);\n\n    for (var slot = 0; slot < timeslots; slot++) {\n      var slotIdx = grp * timeslots + slot;\n      var minFromStart = slotIdx * step; // A date with total minutes calculated from the start of the day\n\n      slots[slotIdx] = groups[grp][slot] = new Date(start.getFullYear(), start.getMonth(), start.getDate(), 0, minutesFromMidnight + minFromStart, 0, 0);\n    }\n  } // Necessary to be able to select up until the last timeslot in a day\n\n\n  var lastSlotMinFromStart = slots.length * step;\n  slots.push(new Date(start.getFullYear(), start.getMonth(), start.getDate(), 0, minutesFromMidnight + lastSlotMinFromStart, 0, 0));\n\n  function positionFromDate(date) {\n    var diff = _dates.default.diff(start, date, 'minutes') + getDstOffset(start, date);\n    return Math.min(diff, totalMin);\n  }\n\n  return {\n    groups: groups,\n    update: function update(args) {\n      if (getKey(args) !== key) return getSlotMetrics(args);\n      return this;\n    },\n    dateIsInGroup: function dateIsInGroup(date, groupIndex) {\n      var nextGroup = groups[groupIndex + 1];\n      return _dates.default.inRange(date, groups[groupIndex][0], nextGroup ? nextGroup[0] : end, 'minutes');\n    },\n    nextSlot: function nextSlot(slot) {\n      var next = slots[Math.min(slots.indexOf(slot) + 1, slots.length - 1)]; // in the case of the last slot we won't a long enough range so manually get it\n\n      if (next === slot) next = _dates.default.add(slot, step, 'minutes');\n      return next;\n    },\n    closestSlotToPosition: function closestSlotToPosition(percent) {\n      var slot = Math.min(slots.length - 1, Math.max(0, Math.floor(percent * numSlots)));\n      return slots[slot];\n    },\n    closestSlotFromPoint: function closestSlotFromPoint(point, boundaryRect) {\n      var range = Math.abs(boundaryRect.top - boundaryRect.bottom);\n      return this.closestSlotToPosition((point.y - boundaryRect.top) / range);\n    },\n    closestSlotFromDate: function closestSlotFromDate(date, offset) {\n      if (offset === void 0) {\n        offset = 0;\n      }\n\n      if (_dates.default.lt(date, start, 'minutes')) return slots[0];\n\n      var diffMins = _dates.default.diff(start, date, 'minutes');\n\n      return slots[(diffMins - diffMins % step) / step + offset];\n    },\n    startsBeforeDay: function startsBeforeDay(date) {\n      return _dates.default.lt(date, start, 'day');\n    },\n    startsAfterDay: function startsAfterDay(date) {\n      return _dates.default.gt(date, end, 'day');\n    },\n    startsBefore: function startsBefore(date) {\n      return _dates.default.lt(_dates.default.merge(start, date), start, 'minutes');\n    },\n    startsAfter: function startsAfter(date) {\n      return _dates.default.gt(_dates.default.merge(end, date), end, 'minutes');\n    },\n    getRange: function getRange(rangeStart, rangeEnd) {\n      rangeStart = _dates.default.min(end, _dates.default.max(start, rangeStart));\n      rangeEnd = _dates.default.min(end, _dates.default.max(start, rangeEnd));\n      var rangeStartMin = positionFromDate(rangeStart);\n      var rangeEndMin = positionFromDate(rangeEnd);\n      var top = rangeStartMin / (step * numSlots) * 100;\n      return {\n        top: top,\n        height: rangeEndMin / (step * numSlots) * 100 - top,\n        start: positionFromDate(rangeStart),\n        startDate: rangeStart,\n        end: positionFromDate(rangeEnd),\n        endDate: rangeEnd\n      };\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}