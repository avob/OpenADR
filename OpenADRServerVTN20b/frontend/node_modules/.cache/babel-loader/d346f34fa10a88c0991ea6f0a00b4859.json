{"ast":null,"code":"import * as types from '../constants/actionTypes';\nimport objectAssign from 'object-assign';\nimport initialState from './initialState';\nimport { config } from '../store/configureStore'; // IMPORTANT: Note that with Redux, state should NEVER be changed.\n// State is considered immutable. Instead,\n// create a copy of the state passed and set new values on the copy.\n// Note that I'm using Object.assign to create a copy of current state\n// and update values on the copy.\n\nexport default function loginReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState.user;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var newState;\n\n  switch (action.type) {\n    case types.LOGIN_USER:\n      return state;\n\n    case types.LOGIN_USER_SUCCESS:\n      config.isConnected = true;\n      config.isConnectionPending = false;\n      config.user = action.payload;\n      newState = objectAssign({}, state, {\n        isConnected: true,\n        isConnectionPending: false,\n        user: action.payload,\n        connectionError: null\n      });\n      return newState;\n\n    case types.LOGIN_USER_ERROR:\n      newState = objectAssign({}, state, {\n        connectionError: action.payload,\n        isConnected: false,\n        isConnectionPending: false\n      });\n      return newState;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/bzanni/Documents/github/OpenADR/OpenADRServerVTN20b/frontend/src/reducers/loginReducer.js"],"names":["types","objectAssign","initialState","config","loginReducer","state","user","action","newState","type","LOGIN_USER","LOGIN_USER_SUCCESS","isConnected","isConnectionPending","payload","connectionError","LOGIN_USER_ERROR"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,0BAAvB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,SAASC,MAAT,QAAuB,yBAAvB,C,CAGA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,YAAT,GAA2D;AAAA,MAApCC,KAAoC,uEAA5BH,YAAY,CAACI,IAAe;AAAA,MAATC,MAAS;AACxE,MAAIC,QAAJ;;AAEA,UAAQD,MAAM,CAACE,IAAf;AAEC,SAAKT,KAAK,CAACU,UAAX;AACG,aAAOL,KAAP;;AAEF,SAAKL,KAAK,CAACW,kBAAX;AACER,MAAAA,MAAM,CAACS,WAAP,GAAqB,IAArB;AACAT,MAAAA,MAAM,CAACU,mBAAP,GAA6B,KAA7B;AACAV,MAAAA,MAAM,CAACG,IAAP,GAAcC,MAAM,CAACO,OAArB;AAEAN,MAAAA,QAAQ,GAAGP,YAAY,CAAE,EAAF,EAAMI,KAAN,EAAa;AAChCO,QAAAA,WAAW,EAAE,IADmB;AAEhCC,QAAAA,mBAAmB,EAAE,KAFW;AAGhCP,QAAAA,IAAI,EAAEC,MAAM,CAACO,OAHmB;AAIhCC,QAAAA,eAAe,EAAE;AAJe,OAAb,CAAvB;AAMA,aAAOP,QAAP;;AAEF,SAAKR,KAAK,CAACgB,gBAAX;AAEER,MAAAA,QAAQ,GAAGP,YAAY,CAAE,EAAF,EAAMI,KAAN,EAAa;AAChCU,QAAAA,eAAe,EAAER,MAAM,CAACO,OADQ;AAEhCF,QAAAA,WAAW,EAAE,KAFmB;AAGhCC,QAAAA,mBAAmB,EAAE;AAHW,OAAb,CAAvB;AAMA,aAAOL,QAAP;;AAEF;AACE,aAAOH,KAAP;AA7BJ;AA+BD","sourcesContent":["import * as types from '../constants/actionTypes';\nimport objectAssign from 'object-assign';\nimport initialState from './initialState';\n\nimport { config } from '../store/configureStore';\n\n\n// IMPORTANT: Note that with Redux, state should NEVER be changed.\n// State is considered immutable. Instead,\n// create a copy of the state passed and set new values on the copy.\n// Note that I'm using Object.assign to create a copy of current state\n// and update values on the copy.\nexport default function loginReducer( state = initialState.user, action ) {\n  let newState;\n\n  switch (action.type) {\n\n  \tcase types.LOGIN_USER:\n      return state;\n\n    case types.LOGIN_USER_SUCCESS:\n      config.isConnected = true\n      config.isConnectionPending = false\n      config.user = action.payload;\n\n      newState = objectAssign( {}, state, {\n          isConnected: true,\n          isConnectionPending: false,\n          user: action.payload,\n          connectionError: null\n      } );\n      return newState;\n\n    case types.LOGIN_USER_ERROR:\n\n      newState = objectAssign( {}, state, {\n          connectionError: action.payload,\n          isConnected: false,\n          isConnectionPending: false\n      } );\n\n      return newState;\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}