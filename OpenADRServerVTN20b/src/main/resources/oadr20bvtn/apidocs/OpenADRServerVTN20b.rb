#
# 
#
# Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
#
require 'json'

# adding necessary json serialization methods to standard classes.
class Object
  def to_jaxb_json_hash
    return self
  end
  def self.from_json o
    return o
  end
end

class String
  def self.from_json o
    return o
  end
end

class Boolean
  def self.from_json o
    return o
  end
end

class Numeric
  def self.from_json o
    return o
  end
end

class Time
  #json time is represented as number of milliseconds since epoch
  def to_jaxb_json_hash
    return (to_i * 1000) + (usec / 1000)
  end
  def self.from_json o
    if o.nil?
      return nil
    else
      return Time.at(o / 1000, (o % 1000) * 1000)
    end
  end
end

class Array
  def to_jaxb_json_hash
    a = Array.new
    each { | _item | a.push _item.to_jaxb_json_hash }
    return a
  end
end

class Hash
  def to_jaxb_json_hash
    h = Hash.new
    each { | _key, _value | h[_key.to_jaxb_json_hash] = _value.to_jaxb_json_hash }
    return h
  end
end

module EnunciateHelpers
  LAMB_CLASS_AWARE = ->(_item) do
    java_clazz = _item['@class']
    clazz_array_parts = java_clazz.split('.')
    short_clazz = clazz_array_parts.pop
    clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
    clazz = clazz_package + "::" + short_clazz
    Object.const_get(clazz).send(:from_json, _item)
  end
end


module Com

module Avob

module Openadr

module Server

module Oadr20b

module Vtn

module Models

module Venopt

  # (no documentation provided)
  class VenOptDto 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :venId
    # (no documentation provided)
    attr_accessor :marketContext
    # (no documentation provided)
    attr_accessor :resourceId
    # (no documentation provided)
    attr_accessor :eventId
    # (no documentation provided)
    attr_accessor :optId
    # (no documentation provided)
    attr_accessor :start
    # (no documentation provided)
    attr_accessor :end
    # (no documentation provided)
    attr_accessor :opt

    # the json hash for this VenOptDto
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['venId'] = venId.to_jaxb_json_hash unless venId.nil?
      _h['marketContext'] = marketContext.to_jaxb_json_hash unless marketContext.nil?
      _h['resourceId'] = resourceId.to_jaxb_json_hash unless resourceId.nil?
      _h['eventId'] = eventId.to_jaxb_json_hash unless eventId.nil?
      _h['optId'] = optId.to_jaxb_json_hash unless optId.nil?
      _h['start'] = start.to_jaxb_json_hash unless start.nil?
      _h['end'] = end.to_jaxb_json_hash unless end.nil?
      _h['opt'] = opt.to_jaxb_json_hash unless opt.nil?
      return _h
    end

    # the json (string form) for this VenOptDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this VenOptDto with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Bignum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['venId'].nil?
          _oa = _o['venId']
            if(_oa.is_a? Hash)
              @venId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @venId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @venId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @venId.push String.from_json(_item)
                 else
                   @venId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @venId = _oa
            end
          end
        if !_o['marketContext'].nil?
          _oa = _o['marketContext']
            if(_oa.is_a? Hash)
              @marketContext = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @marketContext =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @marketContext = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @marketContext.push String.from_json(_item)
                 else
                   @marketContext.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @marketContext = _oa
            end
          end
        if !_o['resourceId'].nil?
          _oa = _o['resourceId']
            if(_oa.is_a? Hash)
              @resourceId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourceId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourceId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourceId.push Bignum.from_json(_item)
                 else
                   @resourceId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourceId = _oa
            end
          end
        if !_o['eventId'].nil?
          _oa = _o['eventId']
            if(_oa.is_a? Hash)
              @eventId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @eventId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @eventId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @eventId.push String.from_json(_item)
                 else
                   @eventId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @eventId = _oa
            end
          end
        if !_o['optId'].nil?
          _oa = _o['optId']
            if(_oa.is_a? Hash)
              @optId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @optId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @optId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @optId.push String.from_json(_item)
                 else
                   @optId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @optId = _oa
            end
          end
        if !_o['start'].nil?
          _oa = _o['start']
            if(_oa.is_a? Hash)
              @start = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @start =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @start = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @start.push Bignum.from_json(_item)
                 else
                   @start.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @start = _oa
            end
          end
        if !_o['end'].nil?
          _oa = _o['end']
            if(_oa.is_a? Hash)
              @end = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @end =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @end = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @end.push Bignum.from_json(_item)
                 else
                   @end.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @end = _oa
            end
          end
        if !_o['opt'].nil?
          _oa = _o['opt']
            if(_oa.is_a? Hash)
              @opt = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @opt =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @opt = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @opt.push String.from_json(_item)
                 else
                   @opt.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @opt = _oa
            end
          end
    end

    # constructs a VenOptDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

module Com

module Avob

module Openadr

module Server

module Oadr20b

module Vtn

module Controller

  # (no documentation provided)
  class VtnConfigurationDto 

    # (no documentation provided)
    attr_accessor :vtnId
    # (no documentation provided)
    attr_accessor :supportPush
    # (no documentation provided)
    attr_accessor :supportUnsecuredHttpPush
    # (no documentation provided)
    attr_accessor :pullFrequencySeconds
    # (no documentation provided)
    attr_accessor :port
    # (no documentation provided)
    attr_accessor :contextPath
    # (no documentation provided)
    attr_accessor :host
    # (no documentation provided)
    attr_accessor :oadrVersion
    # (no documentation provided)
    attr_accessor :supportCertificateGeneration
    # (no documentation provided)
    attr_accessor :xsdValidation
    # (no documentation provided)
    attr_accessor :xmlSignatureReplayProtectSecond
    # (no documentation provided)
    attr_accessor :saveVenDate

    # the json hash for this VtnConfigurationDto
    def to_jaxb_json_hash
      _h = {}
      _h['vtnId'] = vtnId.to_jaxb_json_hash unless vtnId.nil?
      _h['supportPush'] = supportPush.to_jaxb_json_hash unless supportPush.nil?
      _h['supportUnsecuredHttpPush'] = supportUnsecuredHttpPush.to_jaxb_json_hash unless supportUnsecuredHttpPush.nil?
      _h['pullFrequencySeconds'] = pullFrequencySeconds.to_jaxb_json_hash unless pullFrequencySeconds.nil?
      _h['port'] = port.to_jaxb_json_hash unless port.nil?
      _h['contextPath'] = contextPath.to_jaxb_json_hash unless contextPath.nil?
      _h['host'] = host.to_jaxb_json_hash unless host.nil?
      _h['oadrVersion'] = oadrVersion.to_jaxb_json_hash unless oadrVersion.nil?
      _h['supportCertificateGeneration'] = supportCertificateGeneration.to_jaxb_json_hash unless supportCertificateGeneration.nil?
      _h['xsdValidation'] = xsdValidation.to_jaxb_json_hash unless xsdValidation.nil?
      _h['xmlSignatureReplayProtectSecond'] = xmlSignatureReplayProtectSecond.to_jaxb_json_hash unless xmlSignatureReplayProtectSecond.nil?
      _h['saveVenDate'] = saveVenDate.to_jaxb_json_hash unless saveVenDate.nil?
      return _h
    end

    # the json (string form) for this VtnConfigurationDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this VtnConfigurationDto with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['vtnId'].nil?
          _oa = _o['vtnId']
            if(_oa.is_a? Hash)
              @vtnId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vtnId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vtnId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vtnId.push String.from_json(_item)
                 else
                   @vtnId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vtnId = _oa
            end
          end
        if !_o['supportPush'].nil?
          _oa = _o['supportPush']
            if(_oa.is_a? Hash)
              @supportPush = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @supportPush =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @supportPush = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @supportPush.push Boolean.from_json(_item)
                 else
                   @supportPush.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @supportPush = _oa
            end
          end
        if !_o['supportUnsecuredHttpPush'].nil?
          _oa = _o['supportUnsecuredHttpPush']
            if(_oa.is_a? Hash)
              @supportUnsecuredHttpPush = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @supportUnsecuredHttpPush =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @supportUnsecuredHttpPush = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @supportUnsecuredHttpPush.push Boolean.from_json(_item)
                 else
                   @supportUnsecuredHttpPush.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @supportUnsecuredHttpPush = _oa
            end
          end
        if !_o['pullFrequencySeconds'].nil?
          _oa = _o['pullFrequencySeconds']
            if(_oa.is_a? Hash)
              @pullFrequencySeconds = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pullFrequencySeconds =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pullFrequencySeconds = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pullFrequencySeconds.push Bignum.from_json(_item)
                 else
                   @pullFrequencySeconds.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pullFrequencySeconds = _oa
            end
          end
        if !_o['port'].nil?
          _oa = _o['port']
            if(_oa.is_a? Hash)
              @port = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @port =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @port = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @port.push Fixnum.from_json(_item)
                 else
                   @port.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @port = _oa
            end
          end
        if !_o['contextPath'].nil?
          _oa = _o['contextPath']
            if(_oa.is_a? Hash)
              @contextPath = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @contextPath =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @contextPath = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @contextPath.push String.from_json(_item)
                 else
                   @contextPath.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @contextPath = _oa
            end
          end
        if !_o['host'].nil?
          _oa = _o['host']
            if(_oa.is_a? Hash)
              @host = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @host =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @host = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @host.push String.from_json(_item)
                 else
                   @host.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @host = _oa
            end
          end
        if !_o['oadrVersion'].nil?
          _oa = _o['oadrVersion']
            if(_oa.is_a? Hash)
              @oadrVersion = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @oadrVersion =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @oadrVersion = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @oadrVersion.push String.from_json(_item)
                 else
                   @oadrVersion.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @oadrVersion = _oa
            end
          end
        if !_o['supportCertificateGeneration'].nil?
          _oa = _o['supportCertificateGeneration']
            if(_oa.is_a? Hash)
              @supportCertificateGeneration = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @supportCertificateGeneration =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @supportCertificateGeneration = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @supportCertificateGeneration.push Boolean.from_json(_item)
                 else
                   @supportCertificateGeneration.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @supportCertificateGeneration = _oa
            end
          end
        if !_o['xsdValidation'].nil?
          _oa = _o['xsdValidation']
            if(_oa.is_a? Hash)
              @xsdValidation = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @xsdValidation =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @xsdValidation = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @xsdValidation.push Boolean.from_json(_item)
                 else
                   @xsdValidation.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @xsdValidation = _oa
            end
          end
        if !_o['xmlSignatureReplayProtectSecond'].nil?
          _oa = _o['xmlSignatureReplayProtectSecond']
            if(_oa.is_a? Hash)
              @xmlSignatureReplayProtectSecond = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @xmlSignatureReplayProtectSecond =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @xmlSignatureReplayProtectSecond = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @xmlSignatureReplayProtectSecond.push Bignum.from_json(_item)
                 else
                   @xmlSignatureReplayProtectSecond.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @xmlSignatureReplayProtectSecond = _oa
            end
          end
        if !_o['saveVenDate'].nil?
          _oa = _o['saveVenDate']
            if(_oa.is_a? Hash)
              @saveVenDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @saveVenDate =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @saveVenDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @saveVenDate.push Boolean.from_json(_item)
                 else
                   @saveVenDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @saveVenDate = _oa
            end
          end
    end

    # constructs a VtnConfigurationDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Com

module Avob

module Openadr

module Model

module Oadr20b

module Avob

  # (no documentation provided)
  class KeyTokenType 

    # possible object is
    # String 
    attr_accessor :key
    # possible object is
    # String 
    attr_accessor :value

    # the json hash for this KeyTokenType
    def to_jaxb_json_hash
      _h = {}
      _h['key'] = key.to_jaxb_json_hash unless key.nil?
      _h['value'] = value.to_jaxb_json_hash unless value.nil?
      return _h
    end

    # the json (string form) for this KeyTokenType
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this KeyTokenType with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['key'].nil?
          _oa = _o['key']
            if(_oa.is_a? Hash)
              @key = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @key =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @key = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @key.push String.from_json(_item)
                 else
                   @key.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @key = _oa
            end
          end
        if !_o['value'].nil?
          _oa = _o['value']
            if(_oa.is_a? Hash)
              @value = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @value =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @value = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @value.push String.from_json(_item)
                 else
                   @value.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @value = _oa
            end
          end
    end

    # constructs a KeyTokenType from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Avob

module Openadr

module Server

module Oadr20b

module Vtn

module Models

module Venreport

module Request

  # (no documentation provided)
  class OtherReportRequestDtoCreateSubscriptionDto 

    # (no documentation provided)
    attr_accessor :reportSpecifierId
    # (no documentation provided)
    attr_accessor :rid
    # (no documentation provided)
    attr_accessor :granularity
    # (no documentation provided)
    attr_accessor :reportBackDuration

    # the json hash for this OtherReportRequestDtoCreateSubscriptionDto
    def to_jaxb_json_hash
      _h = {}
      _h['reportSpecifierId'] = reportSpecifierId.to_jaxb_json_hash unless reportSpecifierId.nil?
      _h['rid'] = rid.to_jaxb_json_hash unless rid.nil?
      _h['granularity'] = granularity.to_jaxb_json_hash unless granularity.nil?
      _h['reportBackDuration'] = reportBackDuration.to_jaxb_json_hash unless reportBackDuration.nil?
      return _h
    end

    # the json (string form) for this OtherReportRequestDtoCreateSubscriptionDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this OtherReportRequestDtoCreateSubscriptionDto with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['reportSpecifierId'].nil?
          _oa = _o['reportSpecifierId']
            if(_oa.is_a? Hash)
              @reportSpecifierId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reportSpecifierId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reportSpecifierId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reportSpecifierId.push String.from_json(_item)
                 else
                   @reportSpecifierId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reportSpecifierId = _oa
            end
          end
        if !_o['rid'].nil?
          _oa = _o['rid']
            if(_oa.is_a? Hash)
              @rid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rid =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rid.push Hash.from_json(_item)
                 else
                   @rid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rid = _oa
            end
          end
        if !_o['granularity'].nil?
          _oa = _o['granularity']
            if(_oa.is_a? Hash)
              @granularity = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @granularity =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @granularity = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @granularity.push String.from_json(_item)
                 else
                   @granularity.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @granularity = _oa
            end
          end
        if !_o['reportBackDuration'].nil?
          _oa = _o['reportBackDuration']
            if(_oa.is_a? Hash)
              @reportBackDuration = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reportBackDuration =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reportBackDuration = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reportBackDuration.push String.from_json(_item)
                 else
                   @reportBackDuration.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reportBackDuration = _oa
            end
          end
    end

    # constructs a OtherReportRequestDtoCreateSubscriptionDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

module Com

module Avob

module Openadr

module Server

module Oadr20b

module Vtn

module Models

module Venreport

module Capability

  # (no documentation provided)
  class ReportCapabilityDescriptionDto 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :rid
    # (no documentation provided)
    attr_accessor :reportType
    # (no documentation provided)
    attr_accessor :readingType
    # (no documentation provided)
    attr_accessor :oadrMaxPeriod
    # (no documentation provided)
    attr_accessor :oadrMinPeriod
    # (no documentation provided)
    attr_accessor :oadrOnChange
    # (no documentation provided)
    attr_accessor :itemDescription
    # (no documentation provided)
    attr_accessor :itemUnits
    # (no documentation provided)
    attr_accessor :siScaleCode

    # the json hash for this ReportCapabilityDescriptionDto
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['rid'] = rid.to_jaxb_json_hash unless rid.nil?
      _h['reportType'] = reportType.to_jaxb_json_hash unless reportType.nil?
      _h['readingType'] = readingType.to_jaxb_json_hash unless readingType.nil?
      _h['oadrMaxPeriod'] = oadrMaxPeriod.to_jaxb_json_hash unless oadrMaxPeriod.nil?
      _h['oadrMinPeriod'] = oadrMinPeriod.to_jaxb_json_hash unless oadrMinPeriod.nil?
      _h['oadrOnChange'] = oadrOnChange.to_jaxb_json_hash unless oadrOnChange.nil?
      _h['itemDescription'] = itemDescription.to_jaxb_json_hash unless itemDescription.nil?
      _h['itemUnits'] = itemUnits.to_jaxb_json_hash unless itemUnits.nil?
      _h['siScaleCode'] = siScaleCode.to_jaxb_json_hash unless siScaleCode.nil?
      return _h
    end

    # the json (string form) for this ReportCapabilityDescriptionDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ReportCapabilityDescriptionDto with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Bignum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['rid'].nil?
          _oa = _o['rid']
            if(_oa.is_a? Hash)
              @rid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rid.push String.from_json(_item)
                 else
                   @rid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rid = _oa
            end
          end
        if !_o['reportType'].nil?
          _oa = _o['reportType']
            if(_oa.is_a? Hash)
              @reportType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reportType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reportType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reportType.push String.from_json(_item)
                 else
                   @reportType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reportType = _oa
            end
          end
        if !_o['readingType'].nil?
          _oa = _o['readingType']
            if(_oa.is_a? Hash)
              @readingType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @readingType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @readingType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @readingType.push String.from_json(_item)
                 else
                   @readingType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @readingType = _oa
            end
          end
        if !_o['oadrMaxPeriod'].nil?
          _oa = _o['oadrMaxPeriod']
            if(_oa.is_a? Hash)
              @oadrMaxPeriod = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @oadrMaxPeriod =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @oadrMaxPeriod = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @oadrMaxPeriod.push String.from_json(_item)
                 else
                   @oadrMaxPeriod.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @oadrMaxPeriod = _oa
            end
          end
        if !_o['oadrMinPeriod'].nil?
          _oa = _o['oadrMinPeriod']
            if(_oa.is_a? Hash)
              @oadrMinPeriod = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @oadrMinPeriod =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @oadrMinPeriod = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @oadrMinPeriod.push String.from_json(_item)
                 else
                   @oadrMinPeriod.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @oadrMinPeriod = _oa
            end
          end
        if !_o['oadrOnChange'].nil?
          _oa = _o['oadrOnChange']
            if(_oa.is_a? Hash)
              @oadrOnChange = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @oadrOnChange =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @oadrOnChange = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @oadrOnChange.push Boolean.from_json(_item)
                 else
                   @oadrOnChange.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @oadrOnChange = _oa
            end
          end
        if !_o['itemDescription'].nil?
          _oa = _o['itemDescription']
            if(_oa.is_a? Hash)
              @itemDescription = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @itemDescription =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @itemDescription = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @itemDescription.push String.from_json(_item)
                 else
                   @itemDescription.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @itemDescription = _oa
            end
          end
        if !_o['itemUnits'].nil?
          _oa = _o['itemUnits']
            if(_oa.is_a? Hash)
              @itemUnits = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @itemUnits =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @itemUnits = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @itemUnits.push String.from_json(_item)
                 else
                   @itemUnits.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @itemUnits = _oa
            end
          end
        if !_o['siScaleCode'].nil?
          _oa = _o['siScaleCode']
            if(_oa.is_a? Hash)
              @siScaleCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @siScaleCode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @siScaleCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @siScaleCode.push String.from_json(_item)
                 else
                   @siScaleCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @siScaleCode = _oa
            end
          end
    end

    # constructs a ReportCapabilityDescriptionDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

module Com

module Avob

module Openadr

module Server

module Oadr20b

module Vtn

module Models

module Venreport

module Request

  # (no documentation provided)
  class OtherReportRequestSpecifierSearchCriteria 

    # (no documentation provided)
    attr_accessor :reportSpecifierId
    # (no documentation provided)
    attr_accessor :reportRequestId
    # (no documentation provided)
    attr_accessor :rid

    # the json hash for this OtherReportRequestSpecifierSearchCriteria
    def to_jaxb_json_hash
      _h = {}
      if !reportSpecifierId.nil?
        _ha = Array.new
        reportSpecifierId.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['reportSpecifierId'] = _ha
      end
      if !reportRequestId.nil?
        _ha = Array.new
        reportRequestId.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['reportRequestId'] = _ha
      end
      if !rid.nil?
        _ha = Array.new
        rid.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['rid'] = _ha
      end
      return _h
    end

    # the json (string form) for this OtherReportRequestSpecifierSearchCriteria
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this OtherReportRequestSpecifierSearchCriteria with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['reportSpecifierId'].nil?
          _oa = _o['reportSpecifierId']
            if(_oa.is_a? Hash)
              @reportSpecifierId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reportSpecifierId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reportSpecifierId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reportSpecifierId.push String.from_json(_item)
                 else
                   @reportSpecifierId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reportSpecifierId = _oa
            end
          end
        if !_o['reportRequestId'].nil?
          _oa = _o['reportRequestId']
            if(_oa.is_a? Hash)
              @reportRequestId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reportRequestId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reportRequestId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reportRequestId.push String.from_json(_item)
                 else
                   @reportRequestId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reportRequestId = _oa
            end
          end
        if !_o['rid'].nil?
          _oa = _o['rid']
            if(_oa.is_a? Hash)
              @rid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rid.push String.from_json(_item)
                 else
                   @rid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rid = _oa
            end
          end
    end

    # constructs a OtherReportRequestSpecifierSearchCriteria from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

module Com

module Avob

module Openadr

module Server

module Oadr20b

module Vtn

module Models

module Venreport

module Request

  # (no documentation provided)
  class ReportRequestDto 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :reportRequestId
    # (no documentation provided)
    attr_accessor :granularity
    # (no documentation provided)
    attr_accessor :reportBackDuration
    # (no documentation provided)
    attr_accessor :start
    # (no documentation provided)
    attr_accessor :end
    # (no documentation provided)
    attr_accessor :acked
    # (no documentation provided)
    attr_accessor :reportSpecifierId
    # (no documentation provided)
    attr_accessor :createdDatetime

    # the json hash for this ReportRequestDto
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['reportRequestId'] = reportRequestId.to_jaxb_json_hash unless reportRequestId.nil?
      _h['granularity'] = granularity.to_jaxb_json_hash unless granularity.nil?
      _h['reportBackDuration'] = reportBackDuration.to_jaxb_json_hash unless reportBackDuration.nil?
      _h['start'] = start.to_jaxb_json_hash unless start.nil?
      _h['end'] = end.to_jaxb_json_hash unless end.nil?
      _h['acked'] = acked.to_jaxb_json_hash unless acked.nil?
      _h['reportSpecifierId'] = reportSpecifierId.to_jaxb_json_hash unless reportSpecifierId.nil?
      _h['createdDatetime'] = createdDatetime.to_jaxb_json_hash unless createdDatetime.nil?
      return _h
    end

    # the json (string form) for this ReportRequestDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ReportRequestDto with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Bignum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['reportRequestId'].nil?
          _oa = _o['reportRequestId']
            if(_oa.is_a? Hash)
              @reportRequestId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reportRequestId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reportRequestId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reportRequestId.push String.from_json(_item)
                 else
                   @reportRequestId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reportRequestId = _oa
            end
          end
        if !_o['granularity'].nil?
          _oa = _o['granularity']
            if(_oa.is_a? Hash)
              @granularity = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @granularity =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @granularity = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @granularity.push String.from_json(_item)
                 else
                   @granularity.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @granularity = _oa
            end
          end
        if !_o['reportBackDuration'].nil?
          _oa = _o['reportBackDuration']
            if(_oa.is_a? Hash)
              @reportBackDuration = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reportBackDuration =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reportBackDuration = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reportBackDuration.push String.from_json(_item)
                 else
                   @reportBackDuration.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reportBackDuration = _oa
            end
          end
        if !_o['start'].nil?
          _oa = _o['start']
            if(_oa.is_a? Hash)
              @start = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @start =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @start = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @start.push Bignum.from_json(_item)
                 else
                   @start.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @start = _oa
            end
          end
        if !_o['end'].nil?
          _oa = _o['end']
            if(_oa.is_a? Hash)
              @end = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @end =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @end = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @end.push Bignum.from_json(_item)
                 else
                   @end.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @end = _oa
            end
          end
        if !_o['acked'].nil?
          _oa = _o['acked']
            if(_oa.is_a? Hash)
              @acked = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @acked =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @acked = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @acked.push Boolean.from_json(_item)
                 else
                   @acked.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @acked = _oa
            end
          end
        if !_o['reportSpecifierId'].nil?
          _oa = _o['reportSpecifierId']
            if(_oa.is_a? Hash)
              @reportSpecifierId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reportSpecifierId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reportSpecifierId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reportSpecifierId.push String.from_json(_item)
                 else
                   @reportSpecifierId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reportSpecifierId = _oa
            end
          end
        if !_o['createdDatetime'].nil?
          _oa = _o['createdDatetime']
            if(_oa.is_a? Hash)
              @createdDatetime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @createdDatetime =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @createdDatetime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @createdDatetime.push Bignum.from_json(_item)
                 else
                   @createdDatetime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @createdDatetime = _oa
            end
          end
    end

    # constructs a ReportRequestDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

module Com

module Avob

module Openadr

module Server

module Oadr20b

module Vtn

module Models

module Venreport

module Capability

  # (no documentation provided)
  class ReportCapabilityDto 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :reportSpecifierId
    # (no documentation provided)
    attr_accessor :reportName
    # (no documentation provided)
    attr_accessor :duration
    # (no documentation provided)
    attr_accessor :reportRequestId
    # (no documentation provided)
    attr_accessor :createdDatetime
    # (no documentation provided)
    attr_accessor :reportId
    # (no documentation provided)
    attr_accessor :start

    # the json hash for this ReportCapabilityDto
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['reportSpecifierId'] = reportSpecifierId.to_jaxb_json_hash unless reportSpecifierId.nil?
      _h['reportName'] = reportName.to_jaxb_json_hash unless reportName.nil?
      _h['duration'] = duration.to_jaxb_json_hash unless duration.nil?
      _h['reportRequestId'] = reportRequestId.to_jaxb_json_hash unless reportRequestId.nil?
      _h['createdDatetime'] = createdDatetime.to_jaxb_json_hash unless createdDatetime.nil?
      _h['reportId'] = reportId.to_jaxb_json_hash unless reportId.nil?
      _h['start'] = start.to_jaxb_json_hash unless start.nil?
      return _h
    end

    # the json (string form) for this ReportCapabilityDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ReportCapabilityDto with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Bignum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['reportSpecifierId'].nil?
          _oa = _o['reportSpecifierId']
            if(_oa.is_a? Hash)
              @reportSpecifierId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reportSpecifierId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reportSpecifierId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reportSpecifierId.push String.from_json(_item)
                 else
                   @reportSpecifierId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reportSpecifierId = _oa
            end
          end
        if !_o['reportName'].nil?
          _oa = _o['reportName']
            if(_oa.is_a? Hash)
              @reportName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reportName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reportName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reportName.push String.from_json(_item)
                 else
                   @reportName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reportName = _oa
            end
          end
        if !_o['duration'].nil?
          _oa = _o['duration']
            if(_oa.is_a? Hash)
              @duration = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @duration =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @duration = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @duration.push String.from_json(_item)
                 else
                   @duration.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @duration = _oa
            end
          end
        if !_o['reportRequestId'].nil?
          _oa = _o['reportRequestId']
            if(_oa.is_a? Hash)
              @reportRequestId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reportRequestId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reportRequestId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reportRequestId.push String.from_json(_item)
                 else
                   @reportRequestId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reportRequestId = _oa
            end
          end
        if !_o['createdDatetime'].nil?
          _oa = _o['createdDatetime']
            if(_oa.is_a? Hash)
              @createdDatetime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @createdDatetime =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @createdDatetime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @createdDatetime.push Bignum.from_json(_item)
                 else
                   @createdDatetime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @createdDatetime = _oa
            end
          end
        if !_o['reportId'].nil?
          _oa = _o['reportId']
            if(_oa.is_a? Hash)
              @reportId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reportId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reportId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reportId.push String.from_json(_item)
                 else
                   @reportId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reportId = _oa
            end
          end
        if !_o['start'].nil?
          _oa = _o['start']
            if(_oa.is_a? Hash)
              @start = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @start =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @start = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @start.push Bignum.from_json(_item)
                 else
                   @start.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @start = _oa
            end
          end
    end

    # constructs a ReportCapabilityDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

module Com

module Avob

module Openadr

module Server

module Oadr20b

module Vtn

module Models

module Venreport

module Request

  # (no documentation provided)
  class OtherReportRequestSpecifierDto 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :rid
    # (no documentation provided)
    attr_accessor :archived
    # (no documentation provided)
    attr_accessor :lastUpdateDatetime
    # (no documentation provided)
    attr_accessor :lastUpdateValue
    # (no documentation provided)
    attr_accessor :reportRequestId

    # the json hash for this OtherReportRequestSpecifierDto
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['rid'] = rid.to_jaxb_json_hash unless rid.nil?
      _h['archived'] = archived.to_jaxb_json_hash unless archived.nil?
      _h['lastUpdateDatetime'] = lastUpdateDatetime.to_jaxb_json_hash unless lastUpdateDatetime.nil?
      _h['lastUpdateValue'] = lastUpdateValue.to_jaxb_json_hash unless lastUpdateValue.nil?
      _h['reportRequestId'] = reportRequestId.to_jaxb_json_hash unless reportRequestId.nil?
      return _h
    end

    # the json (string form) for this OtherReportRequestSpecifierDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this OtherReportRequestSpecifierDto with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Bignum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['rid'].nil?
          _oa = _o['rid']
            if(_oa.is_a? Hash)
              @rid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rid.push String.from_json(_item)
                 else
                   @rid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rid = _oa
            end
          end
        if !_o['archived'].nil?
          _oa = _o['archived']
            if(_oa.is_a? Hash)
              @archived = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @archived =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @archived = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @archived.push Boolean.from_json(_item)
                 else
                   @archived.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @archived = _oa
            end
          end
        if !_o['lastUpdateDatetime'].nil?
          _oa = _o['lastUpdateDatetime']
            if(_oa.is_a? Hash)
              @lastUpdateDatetime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lastUpdateDatetime =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lastUpdateDatetime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lastUpdateDatetime.push Bignum.from_json(_item)
                 else
                   @lastUpdateDatetime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lastUpdateDatetime = _oa
            end
          end
        if !_o['lastUpdateValue'].nil?
          _oa = _o['lastUpdateValue']
            if(_oa.is_a? Hash)
              @lastUpdateValue = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lastUpdateValue =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lastUpdateValue = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lastUpdateValue.push String.from_json(_item)
                 else
                   @lastUpdateValue.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lastUpdateValue = _oa
            end
          end
        if !_o['reportRequestId'].nil?
          _oa = _o['reportRequestId']
            if(_oa.is_a? Hash)
              @reportRequestId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reportRequestId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reportRequestId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reportRequestId.push String.from_json(_item)
                 else
                   @reportRequestId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reportRequestId = _oa
            end
          end
    end

    # constructs a OtherReportRequestSpecifierDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

module Com

module Avob

module Openadr

module Server

module Oadr20b

module Vtn

module Models

module Venreport

module Data

  # (no documentation provided)
  class ReportDataDto 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :reportSpecifierId
    # (no documentation provided)
    attr_accessor :rid
    # (no documentation provided)
    attr_accessor :confidence
    # (no documentation provided)
    attr_accessor :accuracy
    # (no documentation provided)
    attr_accessor :start
    # (no documentation provided)
    attr_accessor :duration

    # the json hash for this ReportDataDto
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['reportSpecifierId'] = reportSpecifierId.to_jaxb_json_hash unless reportSpecifierId.nil?
      _h['rid'] = rid.to_jaxb_json_hash unless rid.nil?
      _h['confidence'] = confidence.to_jaxb_json_hash unless confidence.nil?
      _h['accuracy'] = accuracy.to_jaxb_json_hash unless accuracy.nil?
      _h['start'] = start.to_jaxb_json_hash unless start.nil?
      _h['duration'] = duration.to_jaxb_json_hash unless duration.nil?
      return _h
    end

    # the json (string form) for this ReportDataDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ReportDataDto with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Bignum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['reportSpecifierId'].nil?
          _oa = _o['reportSpecifierId']
            if(_oa.is_a? Hash)
              @reportSpecifierId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reportSpecifierId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reportSpecifierId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reportSpecifierId.push String.from_json(_item)
                 else
                   @reportSpecifierId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reportSpecifierId = _oa
            end
          end
        if !_o['rid'].nil?
          _oa = _o['rid']
            if(_oa.is_a? Hash)
              @rid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rid.push String.from_json(_item)
                 else
                   @rid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rid = _oa
            end
          end
        if !_o['confidence'].nil?
          _oa = _o['confidence']
            if(_oa.is_a? Hash)
              @confidence = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @confidence =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @confidence = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @confidence.push Bignum.from_json(_item)
                 else
                   @confidence.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @confidence = _oa
            end
          end
        if !_o['accuracy'].nil?
          _oa = _o['accuracy']
            if(_oa.is_a? Hash)
              @accuracy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @accuracy =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @accuracy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @accuracy.push Float.from_json(_item)
                 else
                   @accuracy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @accuracy = _oa
            end
          end
        if !_o['start'].nil?
          _oa = _o['start']
            if(_oa.is_a? Hash)
              @start = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @start =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @start = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @start.push Bignum.from_json(_item)
                 else
                   @start.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @start = _oa
            end
          end
        if !_o['duration'].nil?
          _oa = _o['duration']
            if(_oa.is_a? Hash)
              @duration = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @duration =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @duration = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @duration.push String.from_json(_item)
                 else
                   @duration.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @duration = _oa
            end
          end
    end

    # constructs a ReportDataDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

module Com

module Avob

module Openadr

module Server

module Oadr20b

module Vtn

module Models

module Venreport

module Request

  # (no documentation provided)
  class OtherReportRequestDtoCreateRequestDto 

    # (no documentation provided)
    attr_accessor :reportSpecifierId
    # (no documentation provided)
    attr_accessor :rid
    # (no documentation provided)
    attr_accessor :start
    # (no documentation provided)
    attr_accessor :end

    # the json hash for this OtherReportRequestDtoCreateRequestDto
    def to_jaxb_json_hash
      _h = {}
      _h['reportSpecifierId'] = reportSpecifierId.to_jaxb_json_hash unless reportSpecifierId.nil?
      if !rid.nil?
        _ha = Array.new
        rid.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['rid'] = _ha
      end
      _h['start'] = start.to_jaxb_json_hash unless start.nil?
      _h['end'] = end.to_jaxb_json_hash unless end.nil?
      return _h
    end

    # the json (string form) for this OtherReportRequestDtoCreateRequestDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this OtherReportRequestDtoCreateRequestDto with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['reportSpecifierId'].nil?
          _oa = _o['reportSpecifierId']
            if(_oa.is_a? Hash)
              @reportSpecifierId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reportSpecifierId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reportSpecifierId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reportSpecifierId.push String.from_json(_item)
                 else
                   @reportSpecifierId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reportSpecifierId = _oa
            end
          end
        if !_o['rid'].nil?
          _oa = _o['rid']
            if(_oa.is_a? Hash)
              @rid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rid.push String.from_json(_item)
                 else
                   @rid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rid = _oa
            end
          end
        if !_o['start'].nil?
          _oa = _o['start']
            if(_oa.is_a? Hash)
              @start = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @start =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @start = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @start.push Bignum.from_json(_item)
                 else
                   @start.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @start = _oa
            end
          end
        if !_o['end'].nil?
          _oa = _o['end']
            if(_oa.is_a? Hash)
              @end = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @end =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @end = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @end.push Bignum.from_json(_item)
                 else
                   @end.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @end = _oa
            end
          end
    end

    # constructs a OtherReportRequestDtoCreateRequestDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

module Com

module Avob

module Openadr

module Server

module Oadr20b

module Vtn

module Models

module Venreport

module Data

  # (no documentation provided)
  class OtherReportDataKeyTokenDto < Com::Avob::Openadr::Server::Oadr20b::Vtn::Models::Venreport::Data::ReportDataDto 

    # (no documentation provided)
    attr_accessor :tokens

    # the json hash for this OtherReportDataKeyTokenDto
    def to_jaxb_json_hash
      _h = super
      if !tokens.nil?
        _ha = Array.new
        tokens.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['tokens'] = _ha
      end
      return _h
    end

    #initializes this OtherReportDataKeyTokenDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['tokens'].nil?
          _oa = _o['tokens']
            if(_oa.is_a? Hash)
              @tokens = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tokens =  Com::Avob::Openadr::Model::Oadr20b::Avob::KeyTokenType.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tokens = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tokens.push Com::Avob::Openadr::Model::Oadr20b::Avob::KeyTokenType.from_json(_item)
                 else
                   @tokens.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tokens = _oa
            end
          end
    end

    # constructs a OtherReportDataKeyTokenDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

module Com

module Avob

module Openadr

module Server

module Common

module Vtn

module Models

module Demandresponseevent

  # (no documentation provided)
  class DemandResponseEventOptEnum

    # (no documentation provided)
    OPT_IN = "OPT_IN"

    # (no documentation provided)
    OPT_OUT = "OPT_OUT"
  end

end

end

end

end

end

end

end

end

module Com

module Avob

module Openadr

module Model

module Oadr20b

module Ei

  # (no documentation provided)
  class ReportNameEnumeratedType

    # (no documentation provided)
    METADATA_HISTORY_USAGE = "METADATA_HISTORY_USAGE"

    # (no documentation provided)
    HISTORY_USAGE = "HISTORY_USAGE"

    # (no documentation provided)
    METADATA_HISTORY_GREENBUTTON = "METADATA_HISTORY_GREENBUTTON"

    # (no documentation provided)
    HISTORY_GREENBUTTON = "HISTORY_GREENBUTTON"

    # (no documentation provided)
    METADATA_TELEMETRY_USAGE = "METADATA_TELEMETRY_USAGE"

    # (no documentation provided)
    TELEMETRY_USAGE = "TELEMETRY_USAGE"

    # (no documentation provided)
    METADATA_TELEMETRY_STATUS = "METADATA_TELEMETRY_STATUS"

    # (no documentation provided)
    TELEMETRY_STATUS = "TELEMETRY_STATUS"
  end

end

end

end

end

end

end

module Com

module Avob

module Openadr

module Server

module Oadr20b

module Vtn

module Models

module Venreport

module Capability

  # (no documentation provided)
  class VenReportCapabilityDto < Com::Avob::Openadr::Server::Oadr20b::Vtn::Models::Venreport::Capability::ReportCapabilityDto 

    # (no documentation provided)
    attr_accessor :descriptions

    # the json hash for this VenReportCapabilityDto
    def to_jaxb_json_hash
      _h = super
      if !descriptions.nil?
        _ha = Array.new
        descriptions.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['descriptions'] = _ha
      end
      return _h
    end

    #initializes this VenReportCapabilityDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['descriptions'].nil?
          _oa = _o['descriptions']
            if(_oa.is_a? Hash)
              @descriptions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @descriptions =  Com::Avob::Openadr::Server::Oadr20b::Vtn::Models::Venreport::Capability::ReportCapabilityDescriptionDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @descriptions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @descriptions.push Com::Avob::Openadr::Server::Oadr20b::Vtn::Models::Venreport::Capability::ReportCapabilityDescriptionDto.from_json(_item)
                 else
                   @descriptions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @descriptions = _oa
            end
          end
    end

    # constructs a VenReportCapabilityDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

module Com

module Avob

module Openadr

module Server

module Oadr20b

module Vtn

module Models

module Venreport

module Data

  # (no documentation provided)
  class OtherReportDataPayloadResourceStatusDto < Com::Avob::Openadr::Server::Oadr20b::Vtn::Models::Venreport::Data::ReportDataDto 

    # (no documentation provided)
    attr_accessor :oadrCapacityMin
    # (no documentation provided)
    attr_accessor :oadrCapacityMax
    # (no documentation provided)
    attr_accessor :oadrCapacityCurrent
    # (no documentation provided)
    attr_accessor :oadrCapacityNormal
    # (no documentation provided)
    attr_accessor :oadrLevelOffsetMin
    # (no documentation provided)
    attr_accessor :oadrLevelOffsetMax
    # (no documentation provided)
    attr_accessor :oadrLevelOffsetCurrent
    # (no documentation provided)
    attr_accessor :oadrLevelOffsetNormal
    # (no documentation provided)
    attr_accessor :oadrPercentOffsetMin
    # (no documentation provided)
    attr_accessor :oadrPercentOffsetMax
    # (no documentation provided)
    attr_accessor :oadrPercentOffsetCurrent
    # (no documentation provided)
    attr_accessor :oadrPercentOffsetNormal
    # (no documentation provided)
    attr_accessor :oadrSetPointMin
    # (no documentation provided)
    attr_accessor :oadrSetPointMax
    # (no documentation provided)
    attr_accessor :oadrSetPointCurrent
    # (no documentation provided)
    attr_accessor :oadrSetPointNormal

    # the json hash for this OtherReportDataPayloadResourceStatusDto
    def to_jaxb_json_hash
      _h = super
      _h['oadrCapacityMin'] = oadrCapacityMin.to_jaxb_json_hash unless oadrCapacityMin.nil?
      _h['oadrCapacityMax'] = oadrCapacityMax.to_jaxb_json_hash unless oadrCapacityMax.nil?
      _h['oadrCapacityCurrent'] = oadrCapacityCurrent.to_jaxb_json_hash unless oadrCapacityCurrent.nil?
      _h['oadrCapacityNormal'] = oadrCapacityNormal.to_jaxb_json_hash unless oadrCapacityNormal.nil?
      _h['oadrLevelOffsetMin'] = oadrLevelOffsetMin.to_jaxb_json_hash unless oadrLevelOffsetMin.nil?
      _h['oadrLevelOffsetMax'] = oadrLevelOffsetMax.to_jaxb_json_hash unless oadrLevelOffsetMax.nil?
      _h['oadrLevelOffsetCurrent'] = oadrLevelOffsetCurrent.to_jaxb_json_hash unless oadrLevelOffsetCurrent.nil?
      _h['oadrLevelOffsetNormal'] = oadrLevelOffsetNormal.to_jaxb_json_hash unless oadrLevelOffsetNormal.nil?
      _h['oadrPercentOffsetMin'] = oadrPercentOffsetMin.to_jaxb_json_hash unless oadrPercentOffsetMin.nil?
      _h['oadrPercentOffsetMax'] = oadrPercentOffsetMax.to_jaxb_json_hash unless oadrPercentOffsetMax.nil?
      _h['oadrPercentOffsetCurrent'] = oadrPercentOffsetCurrent.to_jaxb_json_hash unless oadrPercentOffsetCurrent.nil?
      _h['oadrPercentOffsetNormal'] = oadrPercentOffsetNormal.to_jaxb_json_hash unless oadrPercentOffsetNormal.nil?
      _h['oadrSetPointMin'] = oadrSetPointMin.to_jaxb_json_hash unless oadrSetPointMin.nil?
      _h['oadrSetPointMax'] = oadrSetPointMax.to_jaxb_json_hash unless oadrSetPointMax.nil?
      _h['oadrSetPointCurrent'] = oadrSetPointCurrent.to_jaxb_json_hash unless oadrSetPointCurrent.nil?
      _h['oadrSetPointNormal'] = oadrSetPointNormal.to_jaxb_json_hash unless oadrSetPointNormal.nil?
      return _h
    end

    #initializes this OtherReportDataPayloadResourceStatusDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['oadrCapacityMin'].nil?
          _oa = _o['oadrCapacityMin']
            if(_oa.is_a? Hash)
              @oadrCapacityMin = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @oadrCapacityMin =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @oadrCapacityMin = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @oadrCapacityMin.push Float.from_json(_item)
                 else
                   @oadrCapacityMin.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @oadrCapacityMin = _oa
            end
          end
        if !_o['oadrCapacityMax'].nil?
          _oa = _o['oadrCapacityMax']
            if(_oa.is_a? Hash)
              @oadrCapacityMax = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @oadrCapacityMax =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @oadrCapacityMax = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @oadrCapacityMax.push Float.from_json(_item)
                 else
                   @oadrCapacityMax.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @oadrCapacityMax = _oa
            end
          end
        if !_o['oadrCapacityCurrent'].nil?
          _oa = _o['oadrCapacityCurrent']
            if(_oa.is_a? Hash)
              @oadrCapacityCurrent = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @oadrCapacityCurrent =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @oadrCapacityCurrent = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @oadrCapacityCurrent.push Float.from_json(_item)
                 else
                   @oadrCapacityCurrent.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @oadrCapacityCurrent = _oa
            end
          end
        if !_o['oadrCapacityNormal'].nil?
          _oa = _o['oadrCapacityNormal']
            if(_oa.is_a? Hash)
              @oadrCapacityNormal = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @oadrCapacityNormal =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @oadrCapacityNormal = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @oadrCapacityNormal.push Float.from_json(_item)
                 else
                   @oadrCapacityNormal.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @oadrCapacityNormal = _oa
            end
          end
        if !_o['oadrLevelOffsetMin'].nil?
          _oa = _o['oadrLevelOffsetMin']
            if(_oa.is_a? Hash)
              @oadrLevelOffsetMin = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @oadrLevelOffsetMin =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @oadrLevelOffsetMin = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @oadrLevelOffsetMin.push Float.from_json(_item)
                 else
                   @oadrLevelOffsetMin.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @oadrLevelOffsetMin = _oa
            end
          end
        if !_o['oadrLevelOffsetMax'].nil?
          _oa = _o['oadrLevelOffsetMax']
            if(_oa.is_a? Hash)
              @oadrLevelOffsetMax = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @oadrLevelOffsetMax =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @oadrLevelOffsetMax = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @oadrLevelOffsetMax.push Float.from_json(_item)
                 else
                   @oadrLevelOffsetMax.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @oadrLevelOffsetMax = _oa
            end
          end
        if !_o['oadrLevelOffsetCurrent'].nil?
          _oa = _o['oadrLevelOffsetCurrent']
            if(_oa.is_a? Hash)
              @oadrLevelOffsetCurrent = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @oadrLevelOffsetCurrent =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @oadrLevelOffsetCurrent = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @oadrLevelOffsetCurrent.push Float.from_json(_item)
                 else
                   @oadrLevelOffsetCurrent.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @oadrLevelOffsetCurrent = _oa
            end
          end
        if !_o['oadrLevelOffsetNormal'].nil?
          _oa = _o['oadrLevelOffsetNormal']
            if(_oa.is_a? Hash)
              @oadrLevelOffsetNormal = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @oadrLevelOffsetNormal =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @oadrLevelOffsetNormal = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @oadrLevelOffsetNormal.push Float.from_json(_item)
                 else
                   @oadrLevelOffsetNormal.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @oadrLevelOffsetNormal = _oa
            end
          end
        if !_o['oadrPercentOffsetMin'].nil?
          _oa = _o['oadrPercentOffsetMin']
            if(_oa.is_a? Hash)
              @oadrPercentOffsetMin = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @oadrPercentOffsetMin =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @oadrPercentOffsetMin = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @oadrPercentOffsetMin.push Float.from_json(_item)
                 else
                   @oadrPercentOffsetMin.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @oadrPercentOffsetMin = _oa
            end
          end
        if !_o['oadrPercentOffsetMax'].nil?
          _oa = _o['oadrPercentOffsetMax']
            if(_oa.is_a? Hash)
              @oadrPercentOffsetMax = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @oadrPercentOffsetMax =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @oadrPercentOffsetMax = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @oadrPercentOffsetMax.push Float.from_json(_item)
                 else
                   @oadrPercentOffsetMax.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @oadrPercentOffsetMax = _oa
            end
          end
        if !_o['oadrPercentOffsetCurrent'].nil?
          _oa = _o['oadrPercentOffsetCurrent']
            if(_oa.is_a? Hash)
              @oadrPercentOffsetCurrent = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @oadrPercentOffsetCurrent =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @oadrPercentOffsetCurrent = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @oadrPercentOffsetCurrent.push Float.from_json(_item)
                 else
                   @oadrPercentOffsetCurrent.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @oadrPercentOffsetCurrent = _oa
            end
          end
        if !_o['oadrPercentOffsetNormal'].nil?
          _oa = _o['oadrPercentOffsetNormal']
            if(_oa.is_a? Hash)
              @oadrPercentOffsetNormal = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @oadrPercentOffsetNormal =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @oadrPercentOffsetNormal = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @oadrPercentOffsetNormal.push Float.from_json(_item)
                 else
                   @oadrPercentOffsetNormal.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @oadrPercentOffsetNormal = _oa
            end
          end
        if !_o['oadrSetPointMin'].nil?
          _oa = _o['oadrSetPointMin']
            if(_oa.is_a? Hash)
              @oadrSetPointMin = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @oadrSetPointMin =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @oadrSetPointMin = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @oadrSetPointMin.push Float.from_json(_item)
                 else
                   @oadrSetPointMin.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @oadrSetPointMin = _oa
            end
          end
        if !_o['oadrSetPointMax'].nil?
          _oa = _o['oadrSetPointMax']
            if(_oa.is_a? Hash)
              @oadrSetPointMax = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @oadrSetPointMax =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @oadrSetPointMax = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @oadrSetPointMax.push Float.from_json(_item)
                 else
                   @oadrSetPointMax.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @oadrSetPointMax = _oa
            end
          end
        if !_o['oadrSetPointCurrent'].nil?
          _oa = _o['oadrSetPointCurrent']
            if(_oa.is_a? Hash)
              @oadrSetPointCurrent = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @oadrSetPointCurrent =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @oadrSetPointCurrent = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @oadrSetPointCurrent.push Float.from_json(_item)
                 else
                   @oadrSetPointCurrent.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @oadrSetPointCurrent = _oa
            end
          end
        if !_o['oadrSetPointNormal'].nil?
          _oa = _o['oadrSetPointNormal']
            if(_oa.is_a? Hash)
              @oadrSetPointNormal = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @oadrSetPointNormal =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @oadrSetPointNormal = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @oadrSetPointNormal.push Float.from_json(_item)
                 else
                   @oadrSetPointNormal.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @oadrSetPointNormal = _oa
            end
          end
    end

    # constructs a OtherReportDataPayloadResourceStatusDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

module Com

module Avob

module Openadr

module Server

module Oadr20b

module Vtn

module Models

module Venreport

module Request

  # (no documentation provided)
  class OtherReportRequestDto < Com::Avob::Openadr::Server::Oadr20b::Vtn::Models::Venreport::Request::ReportRequestDto 

    # (no documentation provided)
    attr_accessor :reportSpecifierId
    # (no documentation provided)
    attr_accessor :venId
    # (no documentation provided)
    attr_accessor :requestorUsername

    # the json hash for this OtherReportRequestDto
    def to_jaxb_json_hash
      _h = super
      _h['reportSpecifierId'] = reportSpecifierId.to_jaxb_json_hash unless reportSpecifierId.nil?
      _h['venId'] = venId.to_jaxb_json_hash unless venId.nil?
      _h['requestorUsername'] = requestorUsername.to_jaxb_json_hash unless requestorUsername.nil?
      return _h
    end

    #initializes this OtherReportRequestDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['reportSpecifierId'].nil?
          _oa = _o['reportSpecifierId']
            if(_oa.is_a? Hash)
              @reportSpecifierId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reportSpecifierId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reportSpecifierId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reportSpecifierId.push String.from_json(_item)
                 else
                   @reportSpecifierId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reportSpecifierId = _oa
            end
          end
        if !_o['venId'].nil?
          _oa = _o['venId']
            if(_oa.is_a? Hash)
              @venId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @venId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @venId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @venId.push String.from_json(_item)
                 else
                   @venId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @venId = _oa
            end
          end
        if !_o['requestorUsername'].nil?
          _oa = _o['requestorUsername']
            if(_oa.is_a? Hash)
              @requestorUsername = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @requestorUsername =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @requestorUsername = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @requestorUsername.push String.from_json(_item)
                 else
                   @requestorUsername.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @requestorUsername = _oa
            end
          end
    end

    # constructs a OtherReportRequestDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

module Com

module Avob

module Openadr

module Server

module Oadr20b

module Vtn

module Models

module Venreport

module Data

  # (no documentation provided)
  class OtherReportDataFloatDto < Com::Avob::Openadr::Server::Oadr20b::Vtn::Models::Venreport::Data::ReportDataDto 

    # (no documentation provided)
    attr_accessor :value

    # the json hash for this OtherReportDataFloatDto
    def to_jaxb_json_hash
      _h = super
      _h['value'] = value.to_jaxb_json_hash unless value.nil?
      return _h
    end

    #initializes this OtherReportDataFloatDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['value'].nil?
          _oa = _o['value']
            if(_oa.is_a? Hash)
              @value = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @value =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @value = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @value.push Float.from_json(_item)
                 else
                   @value.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @value = _oa
            end
          end
    end

    # constructs a OtherReportDataFloatDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

module Com

module Avob

module Openadr

module Model

module Oadr20b

module Siscale

  # (no documentation provided)
  class SiScaleCodeType

    #  Pico 10**-12
    #  
    PICO = "PICO"

    #  Nano 10**-9
    #  
    NANO = "NANO"

    #  Micro 10**-6
    #  
    MICRO = "MICRO"

    #  Milli 10**-3
    #  
    MILLI = "MILLI"

    #  Centi 10**-2
    #  
    CENTI = "CENTI"

    #  Deci 10**-1
    #  
    DECI = "DECI"

    #  Kilo 10**3
    #  
    KILO = "KILO"

    #  Mega 10**6
    #  
    MEGA = "MEGA"

    #  Giga 10**9
    #  
    GIGA = "GIGA"

    #  Tera 10**12
    #  
    TERA = "TERA"

    #  Native Scale
    #  
    NONE = "NONE"
  end

end

end

end

end

end

end

module Com

module Avob

module Openadr

module Model

module Oadr20b

module Ei

  # (no documentation provided)
  class ReadingTypeEnumeratedType

    #  Reading is read from a device that increases monotonically, and usage must be computed from pairs of start and stop readings.
    #  
    DIRECT_READ = "DIRECT_READ"

    #  Meter or [resource] prepares its own calculation of total use over time.
    #  
    NET = "NET"

    #  Meter covers several [resources] and usage is inferred through some sort of pro data computation.
    #  
    ALLOCATED = "ALLOCATED"

    #  Used when a reading is absent in a series in which most readings are present.
    #  
    ESTIMATED = "ESTIMATED"

    #  Several meters together provide the reading for this [resource]. This is specifically a different than aggregated, which refers to multiple [resources] in the same payload. See also Hybrid.
    #  
    SUMMED = "SUMMED"

    #  Usage is inferred through knowledge of run-time, normal operation, etc.
    #  
    DERIVED = "DERIVED"

    #  Reading is the mean value over the period indicated in Granularity
    #  
    MEAN = "MEAN"

    #  Reading is Peak (highest) value over the period indicated in granularity. For some measurements, it may make more sense as the lowest value. May not be consistent with aggregate readings. Only valid for flow-rate Item Bases, i.e., Power not Energy.
    #  
    PEAK = "PEAK"

    #  If aggregated, refers to different reading types in the aggregate number.
    #  
    HYBRID = "HYBRID"

    #  Indicates reading is pro forma, i.e., is reported at agreed upon rates
    #  
    CONTRACT = "CONTRACT"

    #  Indicates reading is in the future, and has not yet been measured.
    #  
    PROJECTED = "PROJECTED"

    #  Root Mean Square
    #  
    X_RMS = "X_RMS"

    #  Not Applicable
    #  
    X_NOT_APPLICABLE = "X_NOT_APPLICABLE"
  end

end

end

end

end

end

end

module Com

module Avob

module Openadr

module Server

module Oadr20b

module Vtn

module Models

module Venreport

module Capability

  # (no documentation provided)
  class OtherReportCapabilityDescriptionDto < Com::Avob::Openadr::Server::Oadr20b::Vtn::Models::Venreport::Capability::ReportCapabilityDescriptionDto 

    # (no documentation provided)
    attr_accessor :venId
    # (no documentation provided)
    attr_accessor :reportSpecifierId

    # the json hash for this OtherReportCapabilityDescriptionDto
    def to_jaxb_json_hash
      _h = super
      _h['venId'] = venId.to_jaxb_json_hash unless venId.nil?
      _h['reportSpecifierId'] = reportSpecifierId.to_jaxb_json_hash unless reportSpecifierId.nil?
      return _h
    end

    #initializes this OtherReportCapabilityDescriptionDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['venId'].nil?
          _oa = _o['venId']
            if(_oa.is_a? Hash)
              @venId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @venId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @venId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @venId.push String.from_json(_item)
                 else
                   @venId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @venId = _oa
            end
          end
        if !_o['reportSpecifierId'].nil?
          _oa = _o['reportSpecifierId']
            if(_oa.is_a? Hash)
              @reportSpecifierId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reportSpecifierId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reportSpecifierId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reportSpecifierId.push String.from_json(_item)
                 else
                   @reportSpecifierId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reportSpecifierId = _oa
            end
          end
    end

    # constructs a OtherReportCapabilityDescriptionDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

module Com

module Avob

module Openadr

module Server

module Oadr20b

module Vtn

module Models

module Venreport

module Capability

  # (no documentation provided)
  class OtherReportCapabilityDto < Com::Avob::Openadr::Server::Oadr20b::Vtn::Models::Venreport::Capability::ReportCapabilityDto 

    # (no documentation provided)
    attr_accessor :venId

    # the json hash for this OtherReportCapabilityDto
    def to_jaxb_json_hash
      _h = super
      _h['venId'] = venId.to_jaxb_json_hash unless venId.nil?
      return _h
    end

    #initializes this OtherReportCapabilityDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['venId'].nil?
          _oa = _o['venId']
            if(_oa.is_a? Hash)
              @venId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @venId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @venId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @venId.push String.from_json(_item)
                 else
                   @venId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @venId = _oa
            end
          end
    end

    # constructs a OtherReportCapabilityDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

module Com

module Avob

module Openadr

module Model

module Oadr20b

module Ei

  # (no documentation provided)
  class ReportEnumeratedType

    #  Report indicates a reading, as from a meter. Readings are moments in time-changes over time can be computed from the difference between successive readings. Payload type is float
    #  
    READING = "READING"

    #  Report indicates an amount of units (denominated in ItemBase or in the EMIX Product) over a period. Payload type is Quantity. A typical ItemBase is Real Energy.
    #  
    USAGE = "USAGE"

    #  Report indicates an amount of units (denominated in ItemBase or in the EMIX Product). Payload type is Quantity. A typical ItemBase is Real Power.
    #  
    DEMAND = "DEMAND"

    #  Report indicates the amount (denominated in ItemBase or in the EMIX Product) currently set. May be a confirmation/return of the setpoint control value sent from the VTN. Payload type is Quantity. A typical ItemBase is Real Power.
    #  
    SET_POINT = "SET_POINT"

    #  Change in usage as compared to the baseline. See usage for more information
    #  
    DELTA_USAGE = "DELTA_USAGE"

    #  Changes in setpoint from previous schedule.
    #  
    DELTA_SET_POINT = "DELTA_SET_POINT"

    #  Change in demand as compared to the baseline. See demand for more information
    #  
    DELTA_DEMAND = "DELTA_DEMAND"

    #  Can be demand or usage, as indicated by ItemBase. Indicates what [measurement] would be if not for the event or regulation. Report is of the format Baseline.
    #  
    BASELINE = "BASELINE"

    #  Difference between some instruction and actual state.
    #  
    DEVIATION = "DEVIATION"

    #  Average usage over the duration indicated by the Granularity. See usage for more information.
    #  
    AVG_USAGE = "AVG_USAGE"

    #  Average usage over the duration indicated by the Granularity. See demand for more information.
    #  
    AVG_DEMAND = "AVG_DEMAND"

    #  Generalized state of a resource such as on/off, occupancy of building, etc. No ItemBase is relevant. Requires an Application Specific Payload Extension.
    #  
    OPERATING_STATE = "OPERATING_STATE"

    #  Up Regulation capacity available for dispatch, expressed in EMIX Real Power. Payload is always expressed as positive Quantity.
    #  
    UP_REGULATION_CAPACITY_AVAILABLE = "UP_REGULATION_CAPACITY_AVAILABLE"

    #  Down Regulation capacity available for dispatch, expressed in EMIX Real Power. Payload is always expressed as positive Quantity.
    #  
    DOWN_REGULATION_CAPACITY_AVAILABLE = "DOWN_REGULATION_CAPACITY_AVAILABLE"

    #  Regulation setpoint as instructed as part of regulation services
    #  
    REGULATION_SETPOINT = "REGULATION_SETPOINT"

    #  Stored Energy is expressed as Real Energy and Payload is expressed as a Quantity.
    #  
    STORED_ENERGY = "STORED_ENERGY"

    #  Target Energy is expressed as Real Energy and Payload is expressed as a Quantity.
    #  
    TARGET_ENERGY_STORAGE = "TARGET_ENERGY_STORAGE"

    #  Capacity available for further energy storage, perhaps to get to Target Energy Storage
    #  
    AVAILABLE_ENERGY_STORAGE = "AVAILABLE_ENERGY_STORAGE"

    #  Price per ItemBase at each Interval
    #  
    PRICE = "PRICE"

    #  Simple level from market at each Interval. Itembase is not relevant.
    #  
    LEVEL = "LEVEL"

    #  Power factor for the resource.
    #  
    POWER_FACTOR = "POWER_FACTOR"

    #  Percentage of usage.
    #  
    PERCENT_USAGE = "PERCENT_USAGE"

    #  Percentage of demand
    #  
    PERCENT_DEMAND = "PERCENT_DEMAND"

    #  Percentage of demand
    #  
    X_RESOURCE_STATUS = "X_RESOURCE_STATUS"
  end

end

end

end

end

end

end
