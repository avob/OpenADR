/*
 * Avob VTN Rest API
 * Description
 *
 * OpenAPI spec version: API TOS
 * Contact: bzanni@avob.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.avob.server.oadrvtn20b.api;

import com.avob.server.oadrvtn20b.handler.ApiCallback;
import com.avob.server.oadrvtn20b.handler.ApiClient;
import com.avob.server.oadrvtn20b.handler.ApiException;
import com.avob.server.oadrvtn20b.handler.ApiResponse;
import com.avob.server.oadrvtn20b.handler.Configuration;
import com.avob.server.oadrvtn20b.handler.Pair;
import com.avob.server.oadrvtn20b.handler.ProgressRequestBody;
import com.avob.server.oadrvtn20b.handler.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.avob.server.oadrvtn20b.model.VenMarketContextDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MarketContextControllerApi {
    private ApiClient apiClient;

    public MarketContextControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MarketContextControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createMarketContextUsingPOST */
    private com.squareup.okhttp.Call createMarketContextUsingPOSTCall(VenMarketContextDto dto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = dto;
        
        // create path and map variables
        String localVarPath = "/MarketContext/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createMarketContextUsingPOSTValidateBeforeCall(VenMarketContextDto dto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling createMarketContextUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createMarketContextUsingPOSTCall(dto, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * createMarketContext
     * 
     * @param dto dto (required)
     * @return VenMarketContextDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VenMarketContextDto createMarketContextUsingPOST(VenMarketContextDto dto) throws ApiException {
        ApiResponse<VenMarketContextDto> resp = createMarketContextUsingPOSTWithHttpInfo(dto);
        return resp.getData();
    }

    /**
     * createMarketContext
     * 
     * @param dto dto (required)
     * @return ApiResponse&lt;VenMarketContextDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VenMarketContextDto> createMarketContextUsingPOSTWithHttpInfo(VenMarketContextDto dto) throws ApiException {
        com.squareup.okhttp.Call call = createMarketContextUsingPOSTValidateBeforeCall(dto, null, null);
        Type localVarReturnType = new TypeToken<VenMarketContextDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * createMarketContext (asynchronously)
     * 
     * @param dto dto (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createMarketContextUsingPOSTAsync(VenMarketContextDto dto, final ApiCallback<VenMarketContextDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createMarketContextUsingPOSTValidateBeforeCall(dto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VenMarketContextDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteMarketContextByIdUsingDELETE */
    private com.squareup.okhttp.Call deleteMarketContextByIdUsingDELETECall(Long marketContextId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/MarketContext/{marketContextId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "marketContextId" + "\\}", apiClient.escapeString(marketContextId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMarketContextByIdUsingDELETEValidateBeforeCall(Long marketContextId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'marketContextId' is set
        if (marketContextId == null) {
            throw new ApiException("Missing the required parameter 'marketContextId' when calling deleteMarketContextByIdUsingDELETE(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteMarketContextByIdUsingDELETECall(marketContextId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * deleteMarketContextById
     * 
     * @param marketContextId marketContextId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteMarketContextByIdUsingDELETE(Long marketContextId) throws ApiException {
        deleteMarketContextByIdUsingDELETEWithHttpInfo(marketContextId);
    }

    /**
     * deleteMarketContextById
     * 
     * @param marketContextId marketContextId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteMarketContextByIdUsingDELETEWithHttpInfo(Long marketContextId) throws ApiException {
        com.squareup.okhttp.Call call = deleteMarketContextByIdUsingDELETEValidateBeforeCall(marketContextId, null, null);
        return apiClient.execute(call);
    }

    /**
     * deleteMarketContextById (asynchronously)
     * 
     * @param marketContextId marketContextId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMarketContextByIdUsingDELETEAsync(Long marketContextId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMarketContextByIdUsingDELETEValidateBeforeCall(marketContextId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for findMarketContextByNameUsingGET */
    private com.squareup.okhttp.Call findMarketContextByNameUsingGETCall(String marketContextName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/MarketContext/{marketContextName}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "marketContextName" + "\\}", apiClient.escapeString(marketContextName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findMarketContextByNameUsingGETValidateBeforeCall(String marketContextName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'marketContextName' is set
        if (marketContextName == null) {
            throw new ApiException("Missing the required parameter 'marketContextName' when calling findMarketContextByNameUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = findMarketContextByNameUsingGETCall(marketContextName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * findMarketContextByName
     * 
     * @param marketContextName marketContextName (required)
     * @return VenMarketContextDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VenMarketContextDto findMarketContextByNameUsingGET(String marketContextName) throws ApiException {
        ApiResponse<VenMarketContextDto> resp = findMarketContextByNameUsingGETWithHttpInfo(marketContextName);
        return resp.getData();
    }

    /**
     * findMarketContextByName
     * 
     * @param marketContextName marketContextName (required)
     * @return ApiResponse&lt;VenMarketContextDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VenMarketContextDto> findMarketContextByNameUsingGETWithHttpInfo(String marketContextName) throws ApiException {
        com.squareup.okhttp.Call call = findMarketContextByNameUsingGETValidateBeforeCall(marketContextName, null, null);
        Type localVarReturnType = new TypeToken<VenMarketContextDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * findMarketContextByName (asynchronously)
     * 
     * @param marketContextName marketContextName (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findMarketContextByNameUsingGETAsync(String marketContextName, final ApiCallback<VenMarketContextDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findMarketContextByNameUsingGETValidateBeforeCall(marketContextName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VenMarketContextDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listMarketContextUsingGET */
    private com.squareup.okhttp.Call listMarketContextUsingGETCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/MarketContext/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listMarketContextUsingGETValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = listMarketContextUsingGETCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * listMarketContext
     * 
     * @return List&lt;VenMarketContextDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<VenMarketContextDto> listMarketContextUsingGET() throws ApiException {
        ApiResponse<List<VenMarketContextDto>> resp = listMarketContextUsingGETWithHttpInfo();
        return resp.getData();
    }

    /**
     * listMarketContext
     * 
     * @return ApiResponse&lt;List&lt;VenMarketContextDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<VenMarketContextDto>> listMarketContextUsingGETWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listMarketContextUsingGETValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<VenMarketContextDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * listMarketContext (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listMarketContextUsingGETAsync(final ApiCallback<List<VenMarketContextDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listMarketContextUsingGETValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<VenMarketContextDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateMarketContextUsingPUT */
    private com.squareup.okhttp.Call updateMarketContextUsingPUTCall(VenMarketContextDto dto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = dto;
        
        // create path and map variables
        String localVarPath = "/MarketContext/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateMarketContextUsingPUTValidateBeforeCall(VenMarketContextDto dto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling updateMarketContextUsingPUT(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateMarketContextUsingPUTCall(dto, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * updateMarketContext
     * 
     * @param dto dto (required)
     * @return VenMarketContextDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VenMarketContextDto updateMarketContextUsingPUT(VenMarketContextDto dto) throws ApiException {
        ApiResponse<VenMarketContextDto> resp = updateMarketContextUsingPUTWithHttpInfo(dto);
        return resp.getData();
    }

    /**
     * updateMarketContext
     * 
     * @param dto dto (required)
     * @return ApiResponse&lt;VenMarketContextDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VenMarketContextDto> updateMarketContextUsingPUTWithHttpInfo(VenMarketContextDto dto) throws ApiException {
        com.squareup.okhttp.Call call = updateMarketContextUsingPUTValidateBeforeCall(dto, null, null);
        Type localVarReturnType = new TypeToken<VenMarketContextDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * updateMarketContext (asynchronously)
     * 
     * @param dto dto (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateMarketContextUsingPUTAsync(VenMarketContextDto dto, final ApiCallback<VenMarketContextDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateMarketContextUsingPUTValidateBeforeCall(dto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VenMarketContextDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
