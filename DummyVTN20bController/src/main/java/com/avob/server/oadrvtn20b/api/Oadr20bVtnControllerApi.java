/*
 * Avob VTN Rest API
 * Description
 *
 * OpenAPI spec version: API TOS
 * Contact: bzanni@avob.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.avob.server.oadrvtn20b.api;

import com.avob.server.oadrvtn20b.handler.ApiCallback;
import com.avob.server.oadrvtn20b.handler.ApiClient;
import com.avob.server.oadrvtn20b.handler.ApiException;
import com.avob.server.oadrvtn20b.handler.ApiResponse;
import com.avob.server.oadrvtn20b.handler.Configuration;
import com.avob.server.oadrvtn20b.handler.Pair;
import com.avob.server.oadrvtn20b.handler.ProgressRequestBody;
import com.avob.server.oadrvtn20b.handler.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.avob.server.oadrvtn20b.model.ReportCapabilityDescriptionDto;
import com.avob.server.oadrvtn20b.model.ReportCapabilityDto;
import com.avob.server.oadrvtn20b.model.ReportRequestDto;
import com.avob.server.oadrvtn20b.model.VtnConfigurationDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Oadr20bVtnControllerApi {
    private ApiClient apiClient;

    public Oadr20bVtnControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Oadr20bVtnControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for viewConfUsingGET */
    private com.squareup.okhttp.Call viewConfUsingGETCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Vtn/configuration".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call viewConfUsingGETValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = viewConfUsingGETCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * viewConf
     * 
     * @return VtnConfigurationDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VtnConfigurationDto viewConfUsingGET() throws ApiException {
        ApiResponse<VtnConfigurationDto> resp = viewConfUsingGETWithHttpInfo();
        return resp.getData();
    }

    /**
     * viewConf
     * 
     * @return ApiResponse&lt;VtnConfigurationDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VtnConfigurationDto> viewConfUsingGETWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = viewConfUsingGETValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<VtnConfigurationDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * viewConf (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call viewConfUsingGETAsync(final ApiCallback<VtnConfigurationDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = viewConfUsingGETValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VtnConfigurationDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for viewOtherReportCapabilityDescriptionUsingGET1 */
    private com.squareup.okhttp.Call viewOtherReportCapabilityDescriptionUsingGET1Call(String reportSpecifierId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Vtn/report/available/{reportSpecifierId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "reportSpecifierId" + "\\}", apiClient.escapeString(reportSpecifierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call viewOtherReportCapabilityDescriptionUsingGET1ValidateBeforeCall(String reportSpecifierId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reportSpecifierId' is set
        if (reportSpecifierId == null) {
            throw new ApiException("Missing the required parameter 'reportSpecifierId' when calling viewOtherReportCapabilityDescriptionUsingGET1(Async)");
        }
        
        
        com.squareup.okhttp.Call call = viewOtherReportCapabilityDescriptionUsingGET1Call(reportSpecifierId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * viewOtherReportCapabilityDescription
     * 
     * @param reportSpecifierId reportSpecifierId (required)
     * @return List&lt;ReportCapabilityDescriptionDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ReportCapabilityDescriptionDto> viewOtherReportCapabilityDescriptionUsingGET1(String reportSpecifierId) throws ApiException {
        ApiResponse<List<ReportCapabilityDescriptionDto>> resp = viewOtherReportCapabilityDescriptionUsingGET1WithHttpInfo(reportSpecifierId);
        return resp.getData();
    }

    /**
     * viewOtherReportCapabilityDescription
     * 
     * @param reportSpecifierId reportSpecifierId (required)
     * @return ApiResponse&lt;List&lt;ReportCapabilityDescriptionDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ReportCapabilityDescriptionDto>> viewOtherReportCapabilityDescriptionUsingGET1WithHttpInfo(String reportSpecifierId) throws ApiException {
        com.squareup.okhttp.Call call = viewOtherReportCapabilityDescriptionUsingGET1ValidateBeforeCall(reportSpecifierId, null, null);
        Type localVarReturnType = new TypeToken<List<ReportCapabilityDescriptionDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * viewOtherReportCapabilityDescription (asynchronously)
     * 
     * @param reportSpecifierId reportSpecifierId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call viewOtherReportCapabilityDescriptionUsingGET1Async(String reportSpecifierId, final ApiCallback<List<ReportCapabilityDescriptionDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = viewOtherReportCapabilityDescriptionUsingGET1ValidateBeforeCall(reportSpecifierId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ReportCapabilityDescriptionDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for viewReportRequestUsingGET1 */
    private com.squareup.okhttp.Call viewReportRequestUsingGET1Call(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Vtn/report/requested".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call viewReportRequestUsingGET1ValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = viewReportRequestUsingGET1Call(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * viewReportRequest
     * 
     * @return List&lt;ReportRequestDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ReportRequestDto> viewReportRequestUsingGET1() throws ApiException {
        ApiResponse<List<ReportRequestDto>> resp = viewReportRequestUsingGET1WithHttpInfo();
        return resp.getData();
    }

    /**
     * viewReportRequest
     * 
     * @return ApiResponse&lt;List&lt;ReportRequestDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ReportRequestDto>> viewReportRequestUsingGET1WithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = viewReportRequestUsingGET1ValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<ReportRequestDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * viewReportRequest (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call viewReportRequestUsingGET1Async(final ApiCallback<List<ReportRequestDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = viewReportRequestUsingGET1ValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ReportRequestDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for viewSelfReportCapabilityUsingGET */
    private com.squareup.okhttp.Call viewSelfReportCapabilityUsingGETCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Vtn/report/available".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call viewSelfReportCapabilityUsingGETValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = viewSelfReportCapabilityUsingGETCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * viewSelfReportCapability
     * 
     * @return List&lt;ReportCapabilityDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ReportCapabilityDto> viewSelfReportCapabilityUsingGET() throws ApiException {
        ApiResponse<List<ReportCapabilityDto>> resp = viewSelfReportCapabilityUsingGETWithHttpInfo();
        return resp.getData();
    }

    /**
     * viewSelfReportCapability
     * 
     * @return ApiResponse&lt;List&lt;ReportCapabilityDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ReportCapabilityDto>> viewSelfReportCapabilityUsingGETWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = viewSelfReportCapabilityUsingGETValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<ReportCapabilityDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * viewSelfReportCapability (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call viewSelfReportCapabilityUsingGETAsync(final ApiCallback<List<ReportCapabilityDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = viewSelfReportCapabilityUsingGETValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ReportCapabilityDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
