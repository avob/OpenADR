/*
 * Avob VTN Rest API
 * Description
 *
 * OpenAPI spec version: API TOS
 * Contact: bzanni@avob.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.avob.server.oadrvtn20b.api;

import com.avob.server.oadrvtn20b.handler.ApiCallback;
import com.avob.server.oadrvtn20b.handler.ApiClient;
import com.avob.server.oadrvtn20b.handler.ApiException;
import com.avob.server.oadrvtn20b.handler.ApiResponse;
import com.avob.server.oadrvtn20b.handler.Configuration;
import com.avob.server.oadrvtn20b.handler.Pair;
import com.avob.server.oadrvtn20b.handler.ProgressRequestBody;
import com.avob.server.oadrvtn20b.handler.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.avob.server.oadrvtn20b.model.InputStreamResource;
import com.avob.server.oadrvtn20b.model.VenCreateDto;
import com.avob.server.oadrvtn20b.model.VenDto;
import com.avob.server.oadrvtn20b.model.VenFilter;
import com.avob.server.oadrvtn20b.model.VenGroupDto;
import com.avob.server.oadrvtn20b.model.VenMarketContextDto;
import com.avob.server.oadrvtn20b.model.VenResourceDto;
import com.avob.server.oadrvtn20b.model.VenUpdateDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VenControllerApi {
    private ApiClient apiClient;

    public VenControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VenControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for addGroupToVenUsingPOST */
    private com.squareup.okhttp.Call addGroupToVenUsingPOSTCall(Long groupId, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/group".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (groupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "groupId", groupId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addGroupToVenUsingPOSTValidateBeforeCall(Long groupId, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling addGroupToVenUsingPOST(Async)");
        }
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling addGroupToVenUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addGroupToVenUsingPOSTCall(groupId, venID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * addGroupToVen
     * 
     * @param groupId groupId (required)
     * @param venID venID (required)
     * @return VenCreateDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VenCreateDto addGroupToVenUsingPOST(Long groupId, String venID) throws ApiException {
        ApiResponse<VenCreateDto> resp = addGroupToVenUsingPOSTWithHttpInfo(groupId, venID);
        return resp.getData();
    }

    /**
     * addGroupToVen
     * 
     * @param groupId groupId (required)
     * @param venID venID (required)
     * @return ApiResponse&lt;VenCreateDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VenCreateDto> addGroupToVenUsingPOSTWithHttpInfo(Long groupId, String venID) throws ApiException {
        com.squareup.okhttp.Call call = addGroupToVenUsingPOSTValidateBeforeCall(groupId, venID, null, null);
        Type localVarReturnType = new TypeToken<VenCreateDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * addGroupToVen (asynchronously)
     * 
     * @param groupId groupId (required)
     * @param venID venID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addGroupToVenUsingPOSTAsync(Long groupId, String venID, final ApiCallback<VenCreateDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addGroupToVenUsingPOSTValidateBeforeCall(groupId, venID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VenCreateDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addMarketContextToVenUsingPOST */
    private com.squareup.okhttp.Call addMarketContextToVenUsingPOSTCall(Long marketContextId, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/marketContext".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (marketContextId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "marketContextId", marketContextId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addMarketContextToVenUsingPOSTValidateBeforeCall(Long marketContextId, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'marketContextId' is set
        if (marketContextId == null) {
            throw new ApiException("Missing the required parameter 'marketContextId' when calling addMarketContextToVenUsingPOST(Async)");
        }
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling addMarketContextToVenUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addMarketContextToVenUsingPOSTCall(marketContextId, venID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * addMarketContextToVen
     * 
     * @param marketContextId marketContextId (required)
     * @param venID venID (required)
     * @return VenCreateDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VenCreateDto addMarketContextToVenUsingPOST(Long marketContextId, String venID) throws ApiException {
        ApiResponse<VenCreateDto> resp = addMarketContextToVenUsingPOSTWithHttpInfo(marketContextId, venID);
        return resp.getData();
    }

    /**
     * addMarketContextToVen
     * 
     * @param marketContextId marketContextId (required)
     * @param venID venID (required)
     * @return ApiResponse&lt;VenCreateDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VenCreateDto> addMarketContextToVenUsingPOSTWithHttpInfo(Long marketContextId, String venID) throws ApiException {
        com.squareup.okhttp.Call call = addMarketContextToVenUsingPOSTValidateBeforeCall(marketContextId, venID, null, null);
        Type localVarReturnType = new TypeToken<VenCreateDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * addMarketContextToVen (asynchronously)
     * 
     * @param marketContextId marketContextId (required)
     * @param venID venID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addMarketContextToVenUsingPOSTAsync(Long marketContextId, String venID, final ApiCallback<VenCreateDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addMarketContextToVenUsingPOSTValidateBeforeCall(marketContextId, venID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VenCreateDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for cleanRegistrationUsingPOST */
    private com.squareup.okhttp.Call cleanRegistrationUsingPOSTCall(String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/cleanRegistration".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cleanRegistrationUsingPOSTValidateBeforeCall(String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling cleanRegistrationUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cleanRegistrationUsingPOSTCall(venID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * cleanRegistration
     * 
     * @param venID venID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void cleanRegistrationUsingPOST(String venID) throws ApiException {
        cleanRegistrationUsingPOSTWithHttpInfo(venID);
    }

    /**
     * cleanRegistration
     * 
     * @param venID venID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> cleanRegistrationUsingPOSTWithHttpInfo(String venID) throws ApiException {
        com.squareup.okhttp.Call call = cleanRegistrationUsingPOSTValidateBeforeCall(venID, null, null);
        return apiClient.execute(call);
    }

    /**
     * cleanRegistration (asynchronously)
     * 
     * @param venID venID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cleanRegistrationUsingPOSTAsync(String venID, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cleanRegistrationUsingPOSTValidateBeforeCall(venID, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createVenResourceUsingPOST */
    private com.squareup.okhttp.Call createVenResourceUsingPOSTCall(VenResourceDto dto, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = dto;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/resource".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createVenResourceUsingPOSTValidateBeforeCall(VenResourceDto dto, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling createVenResourceUsingPOST(Async)");
        }
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling createVenResourceUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createVenResourceUsingPOSTCall(dto, venID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * createVenResource
     * 
     * @param dto dto (required)
     * @param venID venID (required)
     * @return VenResourceDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VenResourceDto createVenResourceUsingPOST(VenResourceDto dto, String venID) throws ApiException {
        ApiResponse<VenResourceDto> resp = createVenResourceUsingPOSTWithHttpInfo(dto, venID);
        return resp.getData();
    }

    /**
     * createVenResource
     * 
     * @param dto dto (required)
     * @param venID venID (required)
     * @return ApiResponse&lt;VenResourceDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VenResourceDto> createVenResourceUsingPOSTWithHttpInfo(VenResourceDto dto, String venID) throws ApiException {
        com.squareup.okhttp.Call call = createVenResourceUsingPOSTValidateBeforeCall(dto, venID, null, null);
        Type localVarReturnType = new TypeToken<VenResourceDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * createVenResource (asynchronously)
     * 
     * @param dto dto (required)
     * @param venID venID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createVenResourceUsingPOSTAsync(VenResourceDto dto, String venID, final ApiCallback<VenResourceDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createVenResourceUsingPOSTValidateBeforeCall(dto, venID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VenResourceDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createVenUsingPOST */
    private com.squareup.okhttp.Call createVenUsingPOSTCall(VenCreateDto dto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = dto;
        
        // create path and map variables
        String localVarPath = "/Ven/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createVenUsingPOSTValidateBeforeCall(VenCreateDto dto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling createVenUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createVenUsingPOSTCall(dto, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * createVen
     * 
     * @param dto dto (required)
     * @return InputStreamResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InputStreamResource createVenUsingPOST(VenCreateDto dto) throws ApiException {
        ApiResponse<InputStreamResource> resp = createVenUsingPOSTWithHttpInfo(dto);
        return resp.getData();
    }

    /**
     * createVen
     * 
     * @param dto dto (required)
     * @return ApiResponse&lt;InputStreamResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InputStreamResource> createVenUsingPOSTWithHttpInfo(VenCreateDto dto) throws ApiException {
        com.squareup.okhttp.Call call = createVenUsingPOSTValidateBeforeCall(dto, null, null);
        Type localVarReturnType = new TypeToken<InputStreamResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * createVen (asynchronously)
     * 
     * @param dto dto (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createVenUsingPOSTAsync(VenCreateDto dto, final ApiCallback<InputStreamResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createVenUsingPOSTValidateBeforeCall(dto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InputStreamResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteVenByUsernameUsingDELETE */
    private com.squareup.okhttp.Call deleteVenByUsernameUsingDELETECall(String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteVenByUsernameUsingDELETEValidateBeforeCall(String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling deleteVenByUsernameUsingDELETE(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteVenByUsernameUsingDELETECall(venID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * deleteVenByUsername
     * 
     * @param venID venID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteVenByUsernameUsingDELETE(String venID) throws ApiException {
        deleteVenByUsernameUsingDELETEWithHttpInfo(venID);
    }

    /**
     * deleteVenByUsername
     * 
     * @param venID venID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteVenByUsernameUsingDELETEWithHttpInfo(String venID) throws ApiException {
        com.squareup.okhttp.Call call = deleteVenByUsernameUsingDELETEValidateBeforeCall(venID, null, null);
        return apiClient.execute(call);
    }

    /**
     * deleteVenByUsername (asynchronously)
     * 
     * @param venID venID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteVenByUsernameUsingDELETEAsync(String venID, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteVenByUsernameUsingDELETEValidateBeforeCall(venID, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteVenGroupUsingPOST */
    private com.squareup.okhttp.Call deleteVenGroupUsingPOSTCall(Long groupId, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/group/remove".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (groupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "groupId", groupId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteVenGroupUsingPOSTValidateBeforeCall(Long groupId, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling deleteVenGroupUsingPOST(Async)");
        }
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling deleteVenGroupUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteVenGroupUsingPOSTCall(groupId, venID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * deleteVenGroup
     * 
     * @param groupId groupId (required)
     * @param venID venID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteVenGroupUsingPOST(Long groupId, String venID) throws ApiException {
        deleteVenGroupUsingPOSTWithHttpInfo(groupId, venID);
    }

    /**
     * deleteVenGroup
     * 
     * @param groupId groupId (required)
     * @param venID venID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteVenGroupUsingPOSTWithHttpInfo(Long groupId, String venID) throws ApiException {
        com.squareup.okhttp.Call call = deleteVenGroupUsingPOSTValidateBeforeCall(groupId, venID, null, null);
        return apiClient.execute(call);
    }

    /**
     * deleteVenGroup (asynchronously)
     * 
     * @param groupId groupId (required)
     * @param venID venID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteVenGroupUsingPOSTAsync(Long groupId, String venID, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteVenGroupUsingPOSTValidateBeforeCall(groupId, venID, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteVenMarketContextUsingPOST */
    private com.squareup.okhttp.Call deleteVenMarketContextUsingPOSTCall(Long marketContextId, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/marketContext/remove".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (marketContextId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "marketContextId", marketContextId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteVenMarketContextUsingPOSTValidateBeforeCall(Long marketContextId, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'marketContextId' is set
        if (marketContextId == null) {
            throw new ApiException("Missing the required parameter 'marketContextId' when calling deleteVenMarketContextUsingPOST(Async)");
        }
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling deleteVenMarketContextUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteVenMarketContextUsingPOSTCall(marketContextId, venID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * deleteVenMarketContext
     * 
     * @param marketContextId marketContextId (required)
     * @param venID venID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteVenMarketContextUsingPOST(Long marketContextId, String venID) throws ApiException {
        deleteVenMarketContextUsingPOSTWithHttpInfo(marketContextId, venID);
    }

    /**
     * deleteVenMarketContext
     * 
     * @param marketContextId marketContextId (required)
     * @param venID venID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteVenMarketContextUsingPOSTWithHttpInfo(Long marketContextId, String venID) throws ApiException {
        com.squareup.okhttp.Call call = deleteVenMarketContextUsingPOSTValidateBeforeCall(marketContextId, venID, null, null);
        return apiClient.execute(call);
    }

    /**
     * deleteVenMarketContext (asynchronously)
     * 
     * @param marketContextId marketContextId (required)
     * @param venID venID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteVenMarketContextUsingPOSTAsync(Long marketContextId, String venID, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteVenMarketContextUsingPOSTValidateBeforeCall(marketContextId, venID, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteVenResourceUsingDELETE */
    private com.squareup.okhttp.Call deleteVenResourceUsingDELETECall(String resourceName, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/resource/{resourceName}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resourceName" + "\\}", apiClient.escapeString(resourceName.toString()))
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteVenResourceUsingDELETEValidateBeforeCall(String resourceName, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling deleteVenResourceUsingDELETE(Async)");
        }
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling deleteVenResourceUsingDELETE(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteVenResourceUsingDELETECall(resourceName, venID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * deleteVenResource
     * 
     * @param resourceName resourceName (required)
     * @param venID venID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteVenResourceUsingDELETE(String resourceName, String venID) throws ApiException {
        deleteVenResourceUsingDELETEWithHttpInfo(resourceName, venID);
    }

    /**
     * deleteVenResource
     * 
     * @param resourceName resourceName (required)
     * @param venID venID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteVenResourceUsingDELETEWithHttpInfo(String resourceName, String venID) throws ApiException {
        com.squareup.okhttp.Call call = deleteVenResourceUsingDELETEValidateBeforeCall(resourceName, venID, null, null);
        return apiClient.execute(call);
    }

    /**
     * deleteVenResource (asynchronously)
     * 
     * @param resourceName resourceName (required)
     * @param venID venID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteVenResourceUsingDELETEAsync(String resourceName, String venID, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteVenResourceUsingDELETEValidateBeforeCall(resourceName, venID, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for findVenByUsernameUsingGET */
    private com.squareup.okhttp.Call findVenByUsernameUsingGETCall(String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findVenByUsernameUsingGETValidateBeforeCall(String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling findVenByUsernameUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = findVenByUsernameUsingGETCall(venID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * findVenByUsername
     * 
     * @param venID venID (required)
     * @return VenDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VenDto findVenByUsernameUsingGET(String venID) throws ApiException {
        ApiResponse<VenDto> resp = findVenByUsernameUsingGETWithHttpInfo(venID);
        return resp.getData();
    }

    /**
     * findVenByUsername
     * 
     * @param venID venID (required)
     * @return ApiResponse&lt;VenDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VenDto> findVenByUsernameUsingGETWithHttpInfo(String venID) throws ApiException {
        com.squareup.okhttp.Call call = findVenByUsernameUsingGETValidateBeforeCall(venID, null, null);
        Type localVarReturnType = new TypeToken<VenDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * findVenByUsername (asynchronously)
     * 
     * @param venID venID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findVenByUsernameUsingGETAsync(String venID, final ApiCallback<VenDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findVenByUsernameUsingGETValidateBeforeCall(venID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VenDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listVenGroupUsingGET */
    private com.squareup.okhttp.Call listVenGroupUsingGETCall(String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/group".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listVenGroupUsingGETValidateBeforeCall(String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling listVenGroupUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = listVenGroupUsingGETCall(venID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * listVenGroup
     * 
     * @param venID venID (required)
     * @return List&lt;VenGroupDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<VenGroupDto> listVenGroupUsingGET(String venID) throws ApiException {
        ApiResponse<List<VenGroupDto>> resp = listVenGroupUsingGETWithHttpInfo(venID);
        return resp.getData();
    }

    /**
     * listVenGroup
     * 
     * @param venID venID (required)
     * @return ApiResponse&lt;List&lt;VenGroupDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<VenGroupDto>> listVenGroupUsingGETWithHttpInfo(String venID) throws ApiException {
        com.squareup.okhttp.Call call = listVenGroupUsingGETValidateBeforeCall(venID, null, null);
        Type localVarReturnType = new TypeToken<List<VenGroupDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * listVenGroup (asynchronously)
     * 
     * @param venID venID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listVenGroupUsingGETAsync(String venID, final ApiCallback<List<VenGroupDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listVenGroupUsingGETValidateBeforeCall(venID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<VenGroupDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listVenMarketContextUsingGET */
    private com.squareup.okhttp.Call listVenMarketContextUsingGETCall(String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/marketContext".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listVenMarketContextUsingGETValidateBeforeCall(String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling listVenMarketContextUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = listVenMarketContextUsingGETCall(venID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * listVenMarketContext
     * 
     * @param venID venID (required)
     * @return List&lt;VenMarketContextDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<VenMarketContextDto> listVenMarketContextUsingGET(String venID) throws ApiException {
        ApiResponse<List<VenMarketContextDto>> resp = listVenMarketContextUsingGETWithHttpInfo(venID);
        return resp.getData();
    }

    /**
     * listVenMarketContext
     * 
     * @param venID venID (required)
     * @return ApiResponse&lt;List&lt;VenMarketContextDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<VenMarketContextDto>> listVenMarketContextUsingGETWithHttpInfo(String venID) throws ApiException {
        com.squareup.okhttp.Call call = listVenMarketContextUsingGETValidateBeforeCall(venID, null, null);
        Type localVarReturnType = new TypeToken<List<VenMarketContextDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * listVenMarketContext (asynchronously)
     * 
     * @param venID venID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listVenMarketContextUsingGETAsync(String venID, final ApiCallback<List<VenMarketContextDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listVenMarketContextUsingGETValidateBeforeCall(venID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<VenMarketContextDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listVenResourceUsingGET */
    private com.squareup.okhttp.Call listVenResourceUsingGETCall(String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/resource".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listVenResourceUsingGETValidateBeforeCall(String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling listVenResourceUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = listVenResourceUsingGETCall(venID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * listVenResource
     * 
     * @param venID venID (required)
     * @return List&lt;VenResourceDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<VenResourceDto> listVenResourceUsingGET(String venID) throws ApiException {
        ApiResponse<List<VenResourceDto>> resp = listVenResourceUsingGETWithHttpInfo(venID);
        return resp.getData();
    }

    /**
     * listVenResource
     * 
     * @param venID venID (required)
     * @return ApiResponse&lt;List&lt;VenResourceDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<VenResourceDto>> listVenResourceUsingGETWithHttpInfo(String venID) throws ApiException {
        com.squareup.okhttp.Call call = listVenResourceUsingGETValidateBeforeCall(venID, null, null);
        Type localVarReturnType = new TypeToken<List<VenResourceDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * listVenResource (asynchronously)
     * 
     * @param venID venID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listVenResourceUsingGETAsync(String venID, final ApiCallback<List<VenResourceDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listVenResourceUsingGETValidateBeforeCall(venID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<VenResourceDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listVenUsingGET */
    private com.squareup.okhttp.Call listVenUsingGETCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listVenUsingGETValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = listVenUsingGETCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * listVen
     * 
     * @return List&lt;VenDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<VenDto> listVenUsingGET() throws ApiException {
        ApiResponse<List<VenDto>> resp = listVenUsingGETWithHttpInfo();
        return resp.getData();
    }

    /**
     * listVen
     * 
     * @return ApiResponse&lt;List&lt;VenDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<VenDto>> listVenUsingGETWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listVenUsingGETValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<VenDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * listVen (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listVenUsingGETAsync(final ApiCallback<List<VenDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listVenUsingGETValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<VenDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for searchVenUsingPOST */
    private com.squareup.okhttp.Call searchVenUsingPOSTCall(List<VenFilter> filters, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = filters;
        
        // create path and map variables
        String localVarPath = "/Ven/search".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchVenUsingPOSTValidateBeforeCall(List<VenFilter> filters, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'filters' is set
        if (filters == null) {
            throw new ApiException("Missing the required parameter 'filters' when calling searchVenUsingPOST(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling searchVenUsingPOST(Async)");
        }
        
        // verify the required parameter 'size' is set
        if (size == null) {
            throw new ApiException("Missing the required parameter 'size' when calling searchVenUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = searchVenUsingPOSTCall(filters, page, size, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * searchVen
     * 
     * @param filters filters (required)
     * @param page page (required)
     * @param size size (required)
     * @return List&lt;VenDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<VenDto> searchVenUsingPOST(List<VenFilter> filters, Integer page, Integer size) throws ApiException {
        ApiResponse<List<VenDto>> resp = searchVenUsingPOSTWithHttpInfo(filters, page, size);
        return resp.getData();
    }

    /**
     * searchVen
     * 
     * @param filters filters (required)
     * @param page page (required)
     * @param size size (required)
     * @return ApiResponse&lt;List&lt;VenDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<VenDto>> searchVenUsingPOSTWithHttpInfo(List<VenFilter> filters, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = searchVenUsingPOSTValidateBeforeCall(filters, page, size, null, null);
        Type localVarReturnType = new TypeToken<List<VenDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * searchVen (asynchronously)
     * 
     * @param filters filters (required)
     * @param page page (required)
     * @param size size (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchVenUsingPOSTAsync(List<VenFilter> filters, Integer page, Integer size, final ApiCallback<List<VenDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchVenUsingPOSTValidateBeforeCall(filters, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<VenDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateVenUsingPUT */
    private com.squareup.okhttp.Call updateVenUsingPUTCall(VenUpdateDto dto, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = dto;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateVenUsingPUTValidateBeforeCall(VenUpdateDto dto, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling updateVenUsingPUT(Async)");
        }
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling updateVenUsingPUT(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateVenUsingPUTCall(dto, venID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * updateVen
     * 
     * @param dto dto (required)
     * @param venID venID (required)
     * @return VenCreateDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VenCreateDto updateVenUsingPUT(VenUpdateDto dto, String venID) throws ApiException {
        ApiResponse<VenCreateDto> resp = updateVenUsingPUTWithHttpInfo(dto, venID);
        return resp.getData();
    }

    /**
     * updateVen
     * 
     * @param dto dto (required)
     * @param venID venID (required)
     * @return ApiResponse&lt;VenCreateDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VenCreateDto> updateVenUsingPUTWithHttpInfo(VenUpdateDto dto, String venID) throws ApiException {
        com.squareup.okhttp.Call call = updateVenUsingPUTValidateBeforeCall(dto, venID, null, null);
        Type localVarReturnType = new TypeToken<VenCreateDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * updateVen (asynchronously)
     * 
     * @param dto dto (required)
     * @param venID venID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateVenUsingPUTAsync(VenUpdateDto dto, String venID, final ApiCallback<VenCreateDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateVenUsingPUTValidateBeforeCall(dto, venID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VenCreateDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
