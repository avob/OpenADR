/*
 * Avob VTN Rest API
 * Description
 *
 * OpenAPI spec version: API TOS
 * Contact: bzanni@avob.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.avob.server.oadrvtn20b.api;

import com.avob.server.oadrvtn20b.handler.ApiCallback;
import com.avob.server.oadrvtn20b.handler.ApiClient;
import com.avob.server.oadrvtn20b.handler.ApiException;
import com.avob.server.oadrvtn20b.handler.ApiResponse;
import com.avob.server.oadrvtn20b.handler.Configuration;
import com.avob.server.oadrvtn20b.handler.Pair;
import com.avob.server.oadrvtn20b.handler.ProgressRequestBody;
import com.avob.server.oadrvtn20b.handler.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.joda.time.DateTime;
import com.avob.server.oadrvtn20b.model.OtherReportCapabilityDto;
import com.avob.server.oadrvtn20b.model.OtherReportDataFloatDto;
import com.avob.server.oadrvtn20b.model.OtherReportDataKeyTokenDto;
import com.avob.server.oadrvtn20b.model.OtherReportDataPayloadResourceStatusDto;
import com.avob.server.oadrvtn20b.model.OtherReportRequestDto;
import com.avob.server.oadrvtn20b.model.OtherReportRequestDtoCreateRequestDto;
import com.avob.server.oadrvtn20b.model.OtherReportRequestDtoCreateSubscriptionDto;
import com.avob.server.oadrvtn20b.model.OtherReportRequestSpecifierDto;
import com.avob.server.oadrvtn20b.model.OtherReportRequestSpecifierSearchCriteria;
import com.avob.server.oadrvtn20b.model.ReportCapabilityDescriptionDto;
import com.avob.server.oadrvtn20b.model.ReportCapabilityDto;
import com.avob.server.oadrvtn20b.model.VenOptDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Oadr20bVenControllerApi {
    private ApiClient apiClient;

    public Oadr20bVenControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Oadr20bVenControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for cancelReportUsingPOST */
    private com.squareup.okhttp.Call cancelReportUsingPOSTCall(String reportRequestId, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/report_action/cancel".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (reportRequestId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "reportRequestId", reportRequestId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelReportUsingPOSTValidateBeforeCall(String reportRequestId, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reportRequestId' is set
        if (reportRequestId == null) {
            throw new ApiException("Missing the required parameter 'reportRequestId' when calling cancelReportUsingPOST(Async)");
        }
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling cancelReportUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cancelReportUsingPOSTCall(reportRequestId, venID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * cancelReport
     * 
     * @param reportRequestId reportRequestId (required)
     * @param venID venID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void cancelReportUsingPOST(String reportRequestId, String venID) throws ApiException {
        cancelReportUsingPOSTWithHttpInfo(reportRequestId, venID);
    }

    /**
     * cancelReport
     * 
     * @param reportRequestId reportRequestId (required)
     * @param venID venID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> cancelReportUsingPOSTWithHttpInfo(String reportRequestId, String venID) throws ApiException {
        com.squareup.okhttp.Call call = cancelReportUsingPOSTValidateBeforeCall(reportRequestId, venID, null, null);
        return apiClient.execute(call);
    }

    /**
     * cancelReport (asynchronously)
     * 
     * @param reportRequestId reportRequestId (required)
     * @param venID venID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelReportUsingPOSTAsync(String reportRequestId, String venID, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelReportUsingPOSTValidateBeforeCall(reportRequestId, venID, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for cancelSubscriptionReportRequestUsingPOST */
    private com.squareup.okhttp.Call cancelSubscriptionReportRequestUsingPOSTCall(String reportRequestId, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/report/requested/cancelSubscription".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (reportRequestId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "reportRequestId", reportRequestId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelSubscriptionReportRequestUsingPOSTValidateBeforeCall(String reportRequestId, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reportRequestId' is set
        if (reportRequestId == null) {
            throw new ApiException("Missing the required parameter 'reportRequestId' when calling cancelSubscriptionReportRequestUsingPOST(Async)");
        }
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling cancelSubscriptionReportRequestUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cancelSubscriptionReportRequestUsingPOSTCall(reportRequestId, venID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * cancelSubscriptionReportRequest
     * 
     * @param reportRequestId reportRequestId (required)
     * @param venID venID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void cancelSubscriptionReportRequestUsingPOST(String reportRequestId, String venID) throws ApiException {
        cancelSubscriptionReportRequestUsingPOSTWithHttpInfo(reportRequestId, venID);
    }

    /**
     * cancelSubscriptionReportRequest
     * 
     * @param reportRequestId reportRequestId (required)
     * @param venID venID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> cancelSubscriptionReportRequestUsingPOSTWithHttpInfo(String reportRequestId, String venID) throws ApiException {
        com.squareup.okhttp.Call call = cancelSubscriptionReportRequestUsingPOSTValidateBeforeCall(reportRequestId, venID, null, null);
        return apiClient.execute(call);
    }

    /**
     * cancelSubscriptionReportRequest (asynchronously)
     * 
     * @param reportRequestId reportRequestId (required)
     * @param venID venID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelSubscriptionReportRequestUsingPOSTAsync(String reportRequestId, String venID, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelSubscriptionReportRequestUsingPOSTValidateBeforeCall(reportRequestId, venID, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for pageOtherReportCapabilityUsingGET */
    private com.squareup.okhttp.Call pageOtherReportCapabilityUsingGETCall(String venID, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/report/available/search".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pageOtherReportCapabilityUsingGETValidateBeforeCall(String venID, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling pageOtherReportCapabilityUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = pageOtherReportCapabilityUsingGETCall(venID, page, size, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * pageOtherReportCapability
     * 
     * @param venID venID (required)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 20)
     * @return List&lt;OtherReportCapabilityDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OtherReportCapabilityDto> pageOtherReportCapabilityUsingGET(String venID, Integer page, Integer size) throws ApiException {
        ApiResponse<List<OtherReportCapabilityDto>> resp = pageOtherReportCapabilityUsingGETWithHttpInfo(venID, page, size);
        return resp.getData();
    }

    /**
     * pageOtherReportCapability
     * 
     * @param venID venID (required)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 20)
     * @return ApiResponse&lt;List&lt;OtherReportCapabilityDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<OtherReportCapabilityDto>> pageOtherReportCapabilityUsingGETWithHttpInfo(String venID, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = pageOtherReportCapabilityUsingGETValidateBeforeCall(venID, page, size, null, null);
        Type localVarReturnType = new TypeToken<List<OtherReportCapabilityDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * pageOtherReportCapability (asynchronously)
     * 
     * @param venID venID (required)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 20)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pageOtherReportCapabilityUsingGETAsync(String venID, Integer page, Integer size, final ApiCallback<List<OtherReportCapabilityDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pageOtherReportCapabilityUsingGETValidateBeforeCall(venID, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<OtherReportCapabilityDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pageReportRequestUsingGET */
    private com.squareup.okhttp.Call pageReportRequestUsingGETCall(String venID, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/report/requested/search".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pageReportRequestUsingGETValidateBeforeCall(String venID, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling pageReportRequestUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = pageReportRequestUsingGETCall(venID, page, size, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * pageReportRequest
     * 
     * @param venID venID (required)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 20)
     * @return List&lt;OtherReportRequestDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OtherReportRequestDto> pageReportRequestUsingGET(String venID, Integer page, Integer size) throws ApiException {
        ApiResponse<List<OtherReportRequestDto>> resp = pageReportRequestUsingGETWithHttpInfo(venID, page, size);
        return resp.getData();
    }

    /**
     * pageReportRequest
     * 
     * @param venID venID (required)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 20)
     * @return ApiResponse&lt;List&lt;OtherReportRequestDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<OtherReportRequestDto>> pageReportRequestUsingGETWithHttpInfo(String venID, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = pageReportRequestUsingGETValidateBeforeCall(venID, page, size, null, null);
        Type localVarReturnType = new TypeToken<List<OtherReportRequestDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * pageReportRequest (asynchronously)
     * 
     * @param venID venID (required)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 20)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pageReportRequestUsingGETAsync(String venID, Integer page, Integer size, final ApiCallback<List<OtherReportRequestDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pageReportRequestUsingGETValidateBeforeCall(venID, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<OtherReportRequestDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for registerPartyCancelPartyRegistrationUsingPOST */
    private com.squareup.okhttp.Call registerPartyCancelPartyRegistrationUsingPOSTCall(String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/registerparty/cancelPartyRegistration".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registerPartyCancelPartyRegistrationUsingPOSTValidateBeforeCall(String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling registerPartyCancelPartyRegistrationUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = registerPartyCancelPartyRegistrationUsingPOSTCall(venID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * registerPartyCancelPartyRegistration
     * 
     * @param venID venID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void registerPartyCancelPartyRegistrationUsingPOST(String venID) throws ApiException {
        registerPartyCancelPartyRegistrationUsingPOSTWithHttpInfo(venID);
    }

    /**
     * registerPartyCancelPartyRegistration
     * 
     * @param venID venID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> registerPartyCancelPartyRegistrationUsingPOSTWithHttpInfo(String venID) throws ApiException {
        com.squareup.okhttp.Call call = registerPartyCancelPartyRegistrationUsingPOSTValidateBeforeCall(venID, null, null);
        return apiClient.execute(call);
    }

    /**
     * registerPartyCancelPartyRegistration (asynchronously)
     * 
     * @param venID venID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registerPartyCancelPartyRegistrationUsingPOSTAsync(String venID, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registerPartyCancelPartyRegistrationUsingPOSTValidateBeforeCall(venID, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for registerPartyRequestReregistrationUsingPOST */
    private com.squareup.okhttp.Call registerPartyRequestReregistrationUsingPOSTCall(String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/registerparty/requestReregistration".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registerPartyRequestReregistrationUsingPOSTValidateBeforeCall(String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling registerPartyRequestReregistrationUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = registerPartyRequestReregistrationUsingPOSTCall(venID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * registerPartyRequestReregistration
     * 
     * @param venID venID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void registerPartyRequestReregistrationUsingPOST(String venID) throws ApiException {
        registerPartyRequestReregistrationUsingPOSTWithHttpInfo(venID);
    }

    /**
     * registerPartyRequestReregistration
     * 
     * @param venID venID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> registerPartyRequestReregistrationUsingPOSTWithHttpInfo(String venID) throws ApiException {
        com.squareup.okhttp.Call call = registerPartyRequestReregistrationUsingPOSTValidateBeforeCall(venID, null, null);
        return apiClient.execute(call);
    }

    /**
     * registerPartyRequestReregistration (asynchronously)
     * 
     * @param venID venID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registerPartyRequestReregistrationUsingPOSTAsync(String venID, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registerPartyRequestReregistrationUsingPOSTValidateBeforeCall(venID, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for requestOtherReportCapabilityDescriptionRidUsingPOST */
    private com.squareup.okhttp.Call requestOtherReportCapabilityDescriptionRidUsingPOSTCall(List<OtherReportRequestDtoCreateRequestDto> requests, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = requests;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/report/available/description/request".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call requestOtherReportCapabilityDescriptionRidUsingPOSTValidateBeforeCall(List<OtherReportRequestDtoCreateRequestDto> requests, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'requests' is set
        if (requests == null) {
            throw new ApiException("Missing the required parameter 'requests' when calling requestOtherReportCapabilityDescriptionRidUsingPOST(Async)");
        }
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling requestOtherReportCapabilityDescriptionRidUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = requestOtherReportCapabilityDescriptionRidUsingPOSTCall(requests, venID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * requestOtherReportCapabilityDescriptionRid
     * 
     * @param requests requests (required)
     * @param venID venID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void requestOtherReportCapabilityDescriptionRidUsingPOST(List<OtherReportRequestDtoCreateRequestDto> requests, String venID) throws ApiException {
        requestOtherReportCapabilityDescriptionRidUsingPOSTWithHttpInfo(requests, venID);
    }

    /**
     * requestOtherReportCapabilityDescriptionRid
     * 
     * @param requests requests (required)
     * @param venID venID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> requestOtherReportCapabilityDescriptionRidUsingPOSTWithHttpInfo(List<OtherReportRequestDtoCreateRequestDto> requests, String venID) throws ApiException {
        com.squareup.okhttp.Call call = requestOtherReportCapabilityDescriptionRidUsingPOSTValidateBeforeCall(requests, venID, null, null);
        return apiClient.execute(call);
    }

    /**
     * requestOtherReportCapabilityDescriptionRid (asynchronously)
     * 
     * @param requests requests (required)
     * @param venID venID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call requestOtherReportCapabilityDescriptionRidUsingPOSTAsync(List<OtherReportRequestDtoCreateRequestDto> requests, String venID, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = requestOtherReportCapabilityDescriptionRidUsingPOSTValidateBeforeCall(requests, venID, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for requestRegisterReportUsingPOST */
    private com.squareup.okhttp.Call requestRegisterReportUsingPOSTCall(String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/report_action/requestRegister".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call requestRegisterReportUsingPOSTValidateBeforeCall(String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling requestRegisterReportUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = requestRegisterReportUsingPOSTCall(venID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * requestRegisterReport
     * 
     * @param venID venID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void requestRegisterReportUsingPOST(String venID) throws ApiException {
        requestRegisterReportUsingPOSTWithHttpInfo(venID);
    }

    /**
     * requestRegisterReport
     * 
     * @param venID venID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> requestRegisterReportUsingPOSTWithHttpInfo(String venID) throws ApiException {
        com.squareup.okhttp.Call call = requestRegisterReportUsingPOSTValidateBeforeCall(venID, null, null);
        return apiClient.execute(call);
    }

    /**
     * requestRegisterReport (asynchronously)
     * 
     * @param venID venID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call requestRegisterReportUsingPOSTAsync(String venID, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = requestRegisterReportUsingPOSTValidateBeforeCall(venID, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for sendRegisterReportUsingPOST */
    private com.squareup.okhttp.Call sendRegisterReportUsingPOSTCall(String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/report_action/sendRegister".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sendRegisterReportUsingPOSTValidateBeforeCall(String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling sendRegisterReportUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = sendRegisterReportUsingPOSTCall(venID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * sendRegisterReport
     * 
     * @param venID venID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void sendRegisterReportUsingPOST(String venID) throws ApiException {
        sendRegisterReportUsingPOSTWithHttpInfo(venID);
    }

    /**
     * sendRegisterReport
     * 
     * @param venID venID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> sendRegisterReportUsingPOSTWithHttpInfo(String venID) throws ApiException {
        com.squareup.okhttp.Call call = sendRegisterReportUsingPOSTValidateBeforeCall(venID, null, null);
        return apiClient.execute(call);
    }

    /**
     * sendRegisterReport (asynchronously)
     * 
     * @param venID venID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendRegisterReportUsingPOSTAsync(String venID, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendRegisterReportUsingPOSTValidateBeforeCall(venID, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for subscribeOtherReportCapabilityDescriptionRidUsingPOST */
    private com.squareup.okhttp.Call subscribeOtherReportCapabilityDescriptionRidUsingPOSTCall(List<OtherReportRequestDtoCreateSubscriptionDto> subscriptions, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = subscriptions;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/report/available/description/subscribe".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subscribeOtherReportCapabilityDescriptionRidUsingPOSTValidateBeforeCall(List<OtherReportRequestDtoCreateSubscriptionDto> subscriptions, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'subscriptions' is set
        if (subscriptions == null) {
            throw new ApiException("Missing the required parameter 'subscriptions' when calling subscribeOtherReportCapabilityDescriptionRidUsingPOST(Async)");
        }
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling subscribeOtherReportCapabilityDescriptionRidUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = subscribeOtherReportCapabilityDescriptionRidUsingPOSTCall(subscriptions, venID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * subscribeOtherReportCapabilityDescriptionRid
     * 
     * @param subscriptions subscriptions (required)
     * @param venID venID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void subscribeOtherReportCapabilityDescriptionRidUsingPOST(List<OtherReportRequestDtoCreateSubscriptionDto> subscriptions, String venID) throws ApiException {
        subscribeOtherReportCapabilityDescriptionRidUsingPOSTWithHttpInfo(subscriptions, venID);
    }

    /**
     * subscribeOtherReportCapabilityDescriptionRid
     * 
     * @param subscriptions subscriptions (required)
     * @param venID venID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> subscribeOtherReportCapabilityDescriptionRidUsingPOSTWithHttpInfo(List<OtherReportRequestDtoCreateSubscriptionDto> subscriptions, String venID) throws ApiException {
        com.squareup.okhttp.Call call = subscribeOtherReportCapabilityDescriptionRidUsingPOSTValidateBeforeCall(subscriptions, venID, null, null);
        return apiClient.execute(call);
    }

    /**
     * subscribeOtherReportCapabilityDescriptionRid (asynchronously)
     * 
     * @param subscriptions subscriptions (required)
     * @param venID venID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subscribeOtherReportCapabilityDescriptionRidUsingPOSTAsync(List<OtherReportRequestDtoCreateSubscriptionDto> subscriptions, String venID, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subscribeOtherReportCapabilityDescriptionRidUsingPOSTValidateBeforeCall(subscriptions, venID, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for venOptUsingGET */
    private com.squareup.okhttp.Call venOptUsingGETCall(String venID, DateTime end, String marketContext, DateTime start, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/opt".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (marketContext != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "marketContext", marketContext));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call venOptUsingGETValidateBeforeCall(String venID, DateTime end, String marketContext, DateTime start, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling venOptUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = venOptUsingGETCall(venID, end, marketContext, start, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * venOpt
     * 
     * @param venID venID (required)
     * @param end end (optional)
     * @param marketContext marketContext (optional)
     * @param start start (optional)
     * @return List&lt;VenOptDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<VenOptDto> venOptUsingGET(String venID, DateTime end, String marketContext, DateTime start) throws ApiException {
        ApiResponse<List<VenOptDto>> resp = venOptUsingGETWithHttpInfo(venID, end, marketContext, start);
        return resp.getData();
    }

    /**
     * venOpt
     * 
     * @param venID venID (required)
     * @param end end (optional)
     * @param marketContext marketContext (optional)
     * @param start start (optional)
     * @return ApiResponse&lt;List&lt;VenOptDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<VenOptDto>> venOptUsingGETWithHttpInfo(String venID, DateTime end, String marketContext, DateTime start) throws ApiException {
        com.squareup.okhttp.Call call = venOptUsingGETValidateBeforeCall(venID, end, marketContext, start, null, null);
        Type localVarReturnType = new TypeToken<List<VenOptDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * venOpt (asynchronously)
     * 
     * @param venID venID (required)
     * @param end end (optional)
     * @param marketContext marketContext (optional)
     * @param start start (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call venOptUsingGETAsync(String venID, DateTime end, String marketContext, DateTime start, final ApiCallback<List<VenOptDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = venOptUsingGETValidateBeforeCall(venID, end, marketContext, start, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<VenOptDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for venResourceOptUsingGET */
    private com.squareup.okhttp.Call venResourceOptUsingGETCall(String resourceName, String venID, DateTime end, String marketContext, DateTime start, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/opt/resource/{resourceName}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resourceName" + "\\}", apiClient.escapeString(resourceName.toString()))
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (marketContext != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "marketContext", marketContext));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call venResourceOptUsingGETValidateBeforeCall(String resourceName, String venID, DateTime end, String marketContext, DateTime start, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling venResourceOptUsingGET(Async)");
        }
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling venResourceOptUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = venResourceOptUsingGETCall(resourceName, venID, end, marketContext, start, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * venResourceOpt
     * 
     * @param resourceName resourceName (required)
     * @param venID venID (required)
     * @param end end (optional)
     * @param marketContext marketContext (optional)
     * @param start start (optional)
     * @return List&lt;VenOptDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<VenOptDto> venResourceOptUsingGET(String resourceName, String venID, DateTime end, String marketContext, DateTime start) throws ApiException {
        ApiResponse<List<VenOptDto>> resp = venResourceOptUsingGETWithHttpInfo(resourceName, venID, end, marketContext, start);
        return resp.getData();
    }

    /**
     * venResourceOpt
     * 
     * @param resourceName resourceName (required)
     * @param venID venID (required)
     * @param end end (optional)
     * @param marketContext marketContext (optional)
     * @param start start (optional)
     * @return ApiResponse&lt;List&lt;VenOptDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<VenOptDto>> venResourceOptUsingGETWithHttpInfo(String resourceName, String venID, DateTime end, String marketContext, DateTime start) throws ApiException {
        com.squareup.okhttp.Call call = venResourceOptUsingGETValidateBeforeCall(resourceName, venID, end, marketContext, start, null, null);
        Type localVarReturnType = new TypeToken<List<VenOptDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * venResourceOpt (asynchronously)
     * 
     * @param resourceName resourceName (required)
     * @param venID venID (required)
     * @param end end (optional)
     * @param marketContext marketContext (optional)
     * @param start start (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call venResourceOptUsingGETAsync(String resourceName, String venID, DateTime end, String marketContext, DateTime start, final ApiCallback<List<VenOptDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = venResourceOptUsingGETValidateBeforeCall(resourceName, venID, end, marketContext, start, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<VenOptDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for viewOtherReportCapabilityDescriptionUsingGET */
    private com.squareup.okhttp.Call viewOtherReportCapabilityDescriptionUsingGETCall(String reportSpecifierId, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/report/available/description".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (reportSpecifierId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "reportSpecifierId", reportSpecifierId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call viewOtherReportCapabilityDescriptionUsingGETValidateBeforeCall(String reportSpecifierId, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reportSpecifierId' is set
        if (reportSpecifierId == null) {
            throw new ApiException("Missing the required parameter 'reportSpecifierId' when calling viewOtherReportCapabilityDescriptionUsingGET(Async)");
        }
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling viewOtherReportCapabilityDescriptionUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = viewOtherReportCapabilityDescriptionUsingGETCall(reportSpecifierId, venID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * viewOtherReportCapabilityDescription
     * 
     * @param reportSpecifierId reportSpecifierId (required)
     * @param venID venID (required)
     * @return List&lt;ReportCapabilityDescriptionDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ReportCapabilityDescriptionDto> viewOtherReportCapabilityDescriptionUsingGET(String reportSpecifierId, String venID) throws ApiException {
        ApiResponse<List<ReportCapabilityDescriptionDto>> resp = viewOtherReportCapabilityDescriptionUsingGETWithHttpInfo(reportSpecifierId, venID);
        return resp.getData();
    }

    /**
     * viewOtherReportCapabilityDescription
     * 
     * @param reportSpecifierId reportSpecifierId (required)
     * @param venID venID (required)
     * @return ApiResponse&lt;List&lt;ReportCapabilityDescriptionDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ReportCapabilityDescriptionDto>> viewOtherReportCapabilityDescriptionUsingGETWithHttpInfo(String reportSpecifierId, String venID) throws ApiException {
        com.squareup.okhttp.Call call = viewOtherReportCapabilityDescriptionUsingGETValidateBeforeCall(reportSpecifierId, venID, null, null);
        Type localVarReturnType = new TypeToken<List<ReportCapabilityDescriptionDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * viewOtherReportCapabilityDescription (asynchronously)
     * 
     * @param reportSpecifierId reportSpecifierId (required)
     * @param venID venID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call viewOtherReportCapabilityDescriptionUsingGETAsync(String reportSpecifierId, String venID, final ApiCallback<List<ReportCapabilityDescriptionDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = viewOtherReportCapabilityDescriptionUsingGETValidateBeforeCall(reportSpecifierId, venID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ReportCapabilityDescriptionDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for viewOtherReportCapabilityUsingGET */
    private com.squareup.okhttp.Call viewOtherReportCapabilityUsingGETCall(String venID, String reportSpecifierId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/report/available".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (reportSpecifierId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "reportSpecifierId", reportSpecifierId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call viewOtherReportCapabilityUsingGETValidateBeforeCall(String venID, String reportSpecifierId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling viewOtherReportCapabilityUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = viewOtherReportCapabilityUsingGETCall(venID, reportSpecifierId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * viewOtherReportCapability
     * 
     * @param venID venID (required)
     * @param reportSpecifierId reportSpecifierId (optional)
     * @return List&lt;ReportCapabilityDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ReportCapabilityDto> viewOtherReportCapabilityUsingGET(String venID, String reportSpecifierId) throws ApiException {
        ApiResponse<List<ReportCapabilityDto>> resp = viewOtherReportCapabilityUsingGETWithHttpInfo(venID, reportSpecifierId);
        return resp.getData();
    }

    /**
     * viewOtherReportCapability
     * 
     * @param venID venID (required)
     * @param reportSpecifierId reportSpecifierId (optional)
     * @return ApiResponse&lt;List&lt;ReportCapabilityDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ReportCapabilityDto>> viewOtherReportCapabilityUsingGETWithHttpInfo(String venID, String reportSpecifierId) throws ApiException {
        com.squareup.okhttp.Call call = viewOtherReportCapabilityUsingGETValidateBeforeCall(venID, reportSpecifierId, null, null);
        Type localVarReturnType = new TypeToken<List<ReportCapabilityDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * viewOtherReportCapability (asynchronously)
     * 
     * @param venID venID (required)
     * @param reportSpecifierId reportSpecifierId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call viewOtherReportCapabilityUsingGETAsync(String venID, String reportSpecifierId, final ApiCallback<List<ReportCapabilityDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = viewOtherReportCapabilityUsingGETValidateBeforeCall(venID, reportSpecifierId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ReportCapabilityDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for viewReportRequestSpecifierUsingPOST */
    private com.squareup.okhttp.Call viewReportRequestSpecifierUsingPOSTCall(OtherReportRequestSpecifierSearchCriteria criteria, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = criteria;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/report/requested/specifier".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call viewReportRequestSpecifierUsingPOSTValidateBeforeCall(OtherReportRequestSpecifierSearchCriteria criteria, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'criteria' is set
        if (criteria == null) {
            throw new ApiException("Missing the required parameter 'criteria' when calling viewReportRequestSpecifierUsingPOST(Async)");
        }
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling viewReportRequestSpecifierUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = viewReportRequestSpecifierUsingPOSTCall(criteria, venID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * viewReportRequestSpecifier
     * 
     * @param criteria criteria (required)
     * @param venID venID (required)
     * @return List&lt;OtherReportRequestSpecifierDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OtherReportRequestSpecifierDto> viewReportRequestSpecifierUsingPOST(OtherReportRequestSpecifierSearchCriteria criteria, String venID) throws ApiException {
        ApiResponse<List<OtherReportRequestSpecifierDto>> resp = viewReportRequestSpecifierUsingPOSTWithHttpInfo(criteria, venID);
        return resp.getData();
    }

    /**
     * viewReportRequestSpecifier
     * 
     * @param criteria criteria (required)
     * @param venID venID (required)
     * @return ApiResponse&lt;List&lt;OtherReportRequestSpecifierDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<OtherReportRequestSpecifierDto>> viewReportRequestSpecifierUsingPOSTWithHttpInfo(OtherReportRequestSpecifierSearchCriteria criteria, String venID) throws ApiException {
        com.squareup.okhttp.Call call = viewReportRequestSpecifierUsingPOSTValidateBeforeCall(criteria, venID, null, null);
        Type localVarReturnType = new TypeToken<List<OtherReportRequestSpecifierDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * viewReportRequestSpecifier (asynchronously)
     * 
     * @param criteria criteria (required)
     * @param venID venID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call viewReportRequestSpecifierUsingPOSTAsync(OtherReportRequestSpecifierSearchCriteria criteria, String venID, final ApiCallback<List<OtherReportRequestSpecifierDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = viewReportRequestSpecifierUsingPOSTValidateBeforeCall(criteria, venID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<OtherReportRequestSpecifierDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for viewReportRequestUsingGET */
    private com.squareup.okhttp.Call viewReportRequestUsingGETCall(String venID, String reportRequestId, String reportSpecifierId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/report/requested".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (reportRequestId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "reportRequestId", reportRequestId));
        if (reportSpecifierId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "reportSpecifierId", reportSpecifierId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call viewReportRequestUsingGETValidateBeforeCall(String venID, String reportRequestId, String reportSpecifierId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling viewReportRequestUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = viewReportRequestUsingGETCall(venID, reportRequestId, reportSpecifierId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * viewReportRequest
     * 
     * @param venID venID (required)
     * @param reportRequestId reportRequestId (optional)
     * @param reportSpecifierId reportSpecifierId (optional)
     * @return List&lt;OtherReportRequestDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OtherReportRequestDto> viewReportRequestUsingGET(String venID, String reportRequestId, String reportSpecifierId) throws ApiException {
        ApiResponse<List<OtherReportRequestDto>> resp = viewReportRequestUsingGETWithHttpInfo(venID, reportRequestId, reportSpecifierId);
        return resp.getData();
    }

    /**
     * viewReportRequest
     * 
     * @param venID venID (required)
     * @param reportRequestId reportRequestId (optional)
     * @param reportSpecifierId reportSpecifierId (optional)
     * @return ApiResponse&lt;List&lt;OtherReportRequestDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<OtherReportRequestDto>> viewReportRequestUsingGETWithHttpInfo(String venID, String reportRequestId, String reportSpecifierId) throws ApiException {
        com.squareup.okhttp.Call call = viewReportRequestUsingGETValidateBeforeCall(venID, reportRequestId, reportSpecifierId, null, null);
        Type localVarReturnType = new TypeToken<List<OtherReportRequestDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * viewReportRequest (asynchronously)
     * 
     * @param venID venID (required)
     * @param reportRequestId reportRequestId (optional)
     * @param reportSpecifierId reportSpecifierId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call viewReportRequestUsingGETAsync(String venID, String reportRequestId, String reportSpecifierId, final ApiCallback<List<OtherReportRequestDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = viewReportRequestUsingGETValidateBeforeCall(venID, reportRequestId, reportSpecifierId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<OtherReportRequestDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for viewsFloatReportDataUsingGET */
    private com.squareup.okhttp.Call viewsFloatReportDataUsingGETCall(String reportSpecifierId, String rid, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/report/data/float/{reportSpecifierId}/rid/{rid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "reportSpecifierId" + "\\}", apiClient.escapeString(reportSpecifierId.toString()))
        .replaceAll("\\{" + "rid" + "\\}", apiClient.escapeString(rid.toString()))
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call viewsFloatReportDataUsingGETValidateBeforeCall(String reportSpecifierId, String rid, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reportSpecifierId' is set
        if (reportSpecifierId == null) {
            throw new ApiException("Missing the required parameter 'reportSpecifierId' when calling viewsFloatReportDataUsingGET(Async)");
        }
        
        // verify the required parameter 'rid' is set
        if (rid == null) {
            throw new ApiException("Missing the required parameter 'rid' when calling viewsFloatReportDataUsingGET(Async)");
        }
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling viewsFloatReportDataUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = viewsFloatReportDataUsingGETCall(reportSpecifierId, rid, venID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * viewsFloatReportData
     * 
     * @param reportSpecifierId reportSpecifierId (required)
     * @param rid rid (required)
     * @param venID venID (required)
     * @return List&lt;OtherReportDataFloatDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OtherReportDataFloatDto> viewsFloatReportDataUsingGET(String reportSpecifierId, String rid, String venID) throws ApiException {
        ApiResponse<List<OtherReportDataFloatDto>> resp = viewsFloatReportDataUsingGETWithHttpInfo(reportSpecifierId, rid, venID);
        return resp.getData();
    }

    /**
     * viewsFloatReportData
     * 
     * @param reportSpecifierId reportSpecifierId (required)
     * @param rid rid (required)
     * @param venID venID (required)
     * @return ApiResponse&lt;List&lt;OtherReportDataFloatDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<OtherReportDataFloatDto>> viewsFloatReportDataUsingGETWithHttpInfo(String reportSpecifierId, String rid, String venID) throws ApiException {
        com.squareup.okhttp.Call call = viewsFloatReportDataUsingGETValidateBeforeCall(reportSpecifierId, rid, venID, null, null);
        Type localVarReturnType = new TypeToken<List<OtherReportDataFloatDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * viewsFloatReportData (asynchronously)
     * 
     * @param reportSpecifierId reportSpecifierId (required)
     * @param rid rid (required)
     * @param venID venID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call viewsFloatReportDataUsingGETAsync(String reportSpecifierId, String rid, String venID, final ApiCallback<List<OtherReportDataFloatDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = viewsFloatReportDataUsingGETValidateBeforeCall(reportSpecifierId, rid, venID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<OtherReportDataFloatDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for viewsFloatReportDataUsingGET1 */
    private com.squareup.okhttp.Call viewsFloatReportDataUsingGET1Call(String reportSpecifierId, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/report/data/float/{reportSpecifierId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "reportSpecifierId" + "\\}", apiClient.escapeString(reportSpecifierId.toString()))
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call viewsFloatReportDataUsingGET1ValidateBeforeCall(String reportSpecifierId, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reportSpecifierId' is set
        if (reportSpecifierId == null) {
            throw new ApiException("Missing the required parameter 'reportSpecifierId' when calling viewsFloatReportDataUsingGET1(Async)");
        }
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling viewsFloatReportDataUsingGET1(Async)");
        }
        
        
        com.squareup.okhttp.Call call = viewsFloatReportDataUsingGET1Call(reportSpecifierId, venID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * viewsFloatReportData
     * 
     * @param reportSpecifierId reportSpecifierId (required)
     * @param venID venID (required)
     * @return List&lt;OtherReportDataFloatDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OtherReportDataFloatDto> viewsFloatReportDataUsingGET1(String reportSpecifierId, String venID) throws ApiException {
        ApiResponse<List<OtherReportDataFloatDto>> resp = viewsFloatReportDataUsingGET1WithHttpInfo(reportSpecifierId, venID);
        return resp.getData();
    }

    /**
     * viewsFloatReportData
     * 
     * @param reportSpecifierId reportSpecifierId (required)
     * @param venID venID (required)
     * @return ApiResponse&lt;List&lt;OtherReportDataFloatDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<OtherReportDataFloatDto>> viewsFloatReportDataUsingGET1WithHttpInfo(String reportSpecifierId, String venID) throws ApiException {
        com.squareup.okhttp.Call call = viewsFloatReportDataUsingGET1ValidateBeforeCall(reportSpecifierId, venID, null, null);
        Type localVarReturnType = new TypeToken<List<OtherReportDataFloatDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * viewsFloatReportData (asynchronously)
     * 
     * @param reportSpecifierId reportSpecifierId (required)
     * @param venID venID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call viewsFloatReportDataUsingGET1Async(String reportSpecifierId, String venID, final ApiCallback<List<OtherReportDataFloatDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = viewsFloatReportDataUsingGET1ValidateBeforeCall(reportSpecifierId, venID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<OtherReportDataFloatDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for viewsKeyTokenReportDataUsingGET */
    private com.squareup.okhttp.Call viewsKeyTokenReportDataUsingGETCall(String reportSpecifierId, String rid, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/report/data/keytoken/{reportSpecifierId}/rid/{rid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "reportSpecifierId" + "\\}", apiClient.escapeString(reportSpecifierId.toString()))
        .replaceAll("\\{" + "rid" + "\\}", apiClient.escapeString(rid.toString()))
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call viewsKeyTokenReportDataUsingGETValidateBeforeCall(String reportSpecifierId, String rid, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reportSpecifierId' is set
        if (reportSpecifierId == null) {
            throw new ApiException("Missing the required parameter 'reportSpecifierId' when calling viewsKeyTokenReportDataUsingGET(Async)");
        }
        
        // verify the required parameter 'rid' is set
        if (rid == null) {
            throw new ApiException("Missing the required parameter 'rid' when calling viewsKeyTokenReportDataUsingGET(Async)");
        }
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling viewsKeyTokenReportDataUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = viewsKeyTokenReportDataUsingGETCall(reportSpecifierId, rid, venID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * viewsKeyTokenReportData
     * 
     * @param reportSpecifierId reportSpecifierId (required)
     * @param rid rid (required)
     * @param venID venID (required)
     * @return List&lt;OtherReportDataKeyTokenDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OtherReportDataKeyTokenDto> viewsKeyTokenReportDataUsingGET(String reportSpecifierId, String rid, String venID) throws ApiException {
        ApiResponse<List<OtherReportDataKeyTokenDto>> resp = viewsKeyTokenReportDataUsingGETWithHttpInfo(reportSpecifierId, rid, venID);
        return resp.getData();
    }

    /**
     * viewsKeyTokenReportData
     * 
     * @param reportSpecifierId reportSpecifierId (required)
     * @param rid rid (required)
     * @param venID venID (required)
     * @return ApiResponse&lt;List&lt;OtherReportDataKeyTokenDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<OtherReportDataKeyTokenDto>> viewsKeyTokenReportDataUsingGETWithHttpInfo(String reportSpecifierId, String rid, String venID) throws ApiException {
        com.squareup.okhttp.Call call = viewsKeyTokenReportDataUsingGETValidateBeforeCall(reportSpecifierId, rid, venID, null, null);
        Type localVarReturnType = new TypeToken<List<OtherReportDataKeyTokenDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * viewsKeyTokenReportData (asynchronously)
     * 
     * @param reportSpecifierId reportSpecifierId (required)
     * @param rid rid (required)
     * @param venID venID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call viewsKeyTokenReportDataUsingGETAsync(String reportSpecifierId, String rid, String venID, final ApiCallback<List<OtherReportDataKeyTokenDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = viewsKeyTokenReportDataUsingGETValidateBeforeCall(reportSpecifierId, rid, venID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<OtherReportDataKeyTokenDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for viewsKeyTokenReportDataUsingGET1 */
    private com.squareup.okhttp.Call viewsKeyTokenReportDataUsingGET1Call(String reportSpecifierId, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/report/data/keytoken/{reportSpecifierId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "reportSpecifierId" + "\\}", apiClient.escapeString(reportSpecifierId.toString()))
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call viewsKeyTokenReportDataUsingGET1ValidateBeforeCall(String reportSpecifierId, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reportSpecifierId' is set
        if (reportSpecifierId == null) {
            throw new ApiException("Missing the required parameter 'reportSpecifierId' when calling viewsKeyTokenReportDataUsingGET1(Async)");
        }
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling viewsKeyTokenReportDataUsingGET1(Async)");
        }
        
        
        com.squareup.okhttp.Call call = viewsKeyTokenReportDataUsingGET1Call(reportSpecifierId, venID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * viewsKeyTokenReportData
     * 
     * @param reportSpecifierId reportSpecifierId (required)
     * @param venID venID (required)
     * @return List&lt;OtherReportDataKeyTokenDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OtherReportDataKeyTokenDto> viewsKeyTokenReportDataUsingGET1(String reportSpecifierId, String venID) throws ApiException {
        ApiResponse<List<OtherReportDataKeyTokenDto>> resp = viewsKeyTokenReportDataUsingGET1WithHttpInfo(reportSpecifierId, venID);
        return resp.getData();
    }

    /**
     * viewsKeyTokenReportData
     * 
     * @param reportSpecifierId reportSpecifierId (required)
     * @param venID venID (required)
     * @return ApiResponse&lt;List&lt;OtherReportDataKeyTokenDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<OtherReportDataKeyTokenDto>> viewsKeyTokenReportDataUsingGET1WithHttpInfo(String reportSpecifierId, String venID) throws ApiException {
        com.squareup.okhttp.Call call = viewsKeyTokenReportDataUsingGET1ValidateBeforeCall(reportSpecifierId, venID, null, null);
        Type localVarReturnType = new TypeToken<List<OtherReportDataKeyTokenDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * viewsKeyTokenReportData (asynchronously)
     * 
     * @param reportSpecifierId reportSpecifierId (required)
     * @param venID venID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call viewsKeyTokenReportDataUsingGET1Async(String reportSpecifierId, String venID, final ApiCallback<List<OtherReportDataKeyTokenDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = viewsKeyTokenReportDataUsingGET1ValidateBeforeCall(reportSpecifierId, venID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<OtherReportDataKeyTokenDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for viewsResourceStatusReportDataUsingGET */
    private com.squareup.okhttp.Call viewsResourceStatusReportDataUsingGETCall(String reportSpecifierId, String rid, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/report/data/resourcestatus/{reportSpecifierId}/rid/{rid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "reportSpecifierId" + "\\}", apiClient.escapeString(reportSpecifierId.toString()))
        .replaceAll("\\{" + "rid" + "\\}", apiClient.escapeString(rid.toString()))
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call viewsResourceStatusReportDataUsingGETValidateBeforeCall(String reportSpecifierId, String rid, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reportSpecifierId' is set
        if (reportSpecifierId == null) {
            throw new ApiException("Missing the required parameter 'reportSpecifierId' when calling viewsResourceStatusReportDataUsingGET(Async)");
        }
        
        // verify the required parameter 'rid' is set
        if (rid == null) {
            throw new ApiException("Missing the required parameter 'rid' when calling viewsResourceStatusReportDataUsingGET(Async)");
        }
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling viewsResourceStatusReportDataUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = viewsResourceStatusReportDataUsingGETCall(reportSpecifierId, rid, venID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * viewsResourceStatusReportData
     * 
     * @param reportSpecifierId reportSpecifierId (required)
     * @param rid rid (required)
     * @param venID venID (required)
     * @return List&lt;OtherReportDataPayloadResourceStatusDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OtherReportDataPayloadResourceStatusDto> viewsResourceStatusReportDataUsingGET(String reportSpecifierId, String rid, String venID) throws ApiException {
        ApiResponse<List<OtherReportDataPayloadResourceStatusDto>> resp = viewsResourceStatusReportDataUsingGETWithHttpInfo(reportSpecifierId, rid, venID);
        return resp.getData();
    }

    /**
     * viewsResourceStatusReportData
     * 
     * @param reportSpecifierId reportSpecifierId (required)
     * @param rid rid (required)
     * @param venID venID (required)
     * @return ApiResponse&lt;List&lt;OtherReportDataPayloadResourceStatusDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<OtherReportDataPayloadResourceStatusDto>> viewsResourceStatusReportDataUsingGETWithHttpInfo(String reportSpecifierId, String rid, String venID) throws ApiException {
        com.squareup.okhttp.Call call = viewsResourceStatusReportDataUsingGETValidateBeforeCall(reportSpecifierId, rid, venID, null, null);
        Type localVarReturnType = new TypeToken<List<OtherReportDataPayloadResourceStatusDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * viewsResourceStatusReportData (asynchronously)
     * 
     * @param reportSpecifierId reportSpecifierId (required)
     * @param rid rid (required)
     * @param venID venID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call viewsResourceStatusReportDataUsingGETAsync(String reportSpecifierId, String rid, String venID, final ApiCallback<List<OtherReportDataPayloadResourceStatusDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = viewsResourceStatusReportDataUsingGETValidateBeforeCall(reportSpecifierId, rid, venID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<OtherReportDataPayloadResourceStatusDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for viewsResourceStatusReportDataUsingGET1 */
    private com.squareup.okhttp.Call viewsResourceStatusReportDataUsingGET1Call(String reportSpecifierId, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Ven/{venID}/report/data/resourcestatus/{reportSpecifierId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "reportSpecifierId" + "\\}", apiClient.escapeString(reportSpecifierId.toString()))
        .replaceAll("\\{" + "venID" + "\\}", apiClient.escapeString(venID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call viewsResourceStatusReportDataUsingGET1ValidateBeforeCall(String reportSpecifierId, String venID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reportSpecifierId' is set
        if (reportSpecifierId == null) {
            throw new ApiException("Missing the required parameter 'reportSpecifierId' when calling viewsResourceStatusReportDataUsingGET1(Async)");
        }
        
        // verify the required parameter 'venID' is set
        if (venID == null) {
            throw new ApiException("Missing the required parameter 'venID' when calling viewsResourceStatusReportDataUsingGET1(Async)");
        }
        
        
        com.squareup.okhttp.Call call = viewsResourceStatusReportDataUsingGET1Call(reportSpecifierId, venID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * viewsResourceStatusReportData
     * 
     * @param reportSpecifierId reportSpecifierId (required)
     * @param venID venID (required)
     * @return List&lt;OtherReportDataPayloadResourceStatusDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OtherReportDataPayloadResourceStatusDto> viewsResourceStatusReportDataUsingGET1(String reportSpecifierId, String venID) throws ApiException {
        ApiResponse<List<OtherReportDataPayloadResourceStatusDto>> resp = viewsResourceStatusReportDataUsingGET1WithHttpInfo(reportSpecifierId, venID);
        return resp.getData();
    }

    /**
     * viewsResourceStatusReportData
     * 
     * @param reportSpecifierId reportSpecifierId (required)
     * @param venID venID (required)
     * @return ApiResponse&lt;List&lt;OtherReportDataPayloadResourceStatusDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<OtherReportDataPayloadResourceStatusDto>> viewsResourceStatusReportDataUsingGET1WithHttpInfo(String reportSpecifierId, String venID) throws ApiException {
        com.squareup.okhttp.Call call = viewsResourceStatusReportDataUsingGET1ValidateBeforeCall(reportSpecifierId, venID, null, null);
        Type localVarReturnType = new TypeToken<List<OtherReportDataPayloadResourceStatusDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * viewsResourceStatusReportData (asynchronously)
     * 
     * @param reportSpecifierId reportSpecifierId (required)
     * @param venID venID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call viewsResourceStatusReportDataUsingGET1Async(String reportSpecifierId, String venID, final ApiCallback<List<OtherReportDataPayloadResourceStatusDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = viewsResourceStatusReportDataUsingGET1ValidateBeforeCall(reportSpecifierId, venID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<OtherReportDataPayloadResourceStatusDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
