/*
 * Avob VTN Rest API
 * Description
 *
 * OpenAPI spec version: API TOS
 * Contact: bzanni@avob.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.avob.server.oadrvtn20b.api;

import com.avob.server.oadrvtn20b.handler.ApiException;
import org.joda.time.DateTime;
import com.avob.server.oadrvtn20b.model.OtherReportCapabilityDto;
import com.avob.server.oadrvtn20b.model.OtherReportDataFloatDto;
import com.avob.server.oadrvtn20b.model.OtherReportDataKeyTokenDto;
import com.avob.server.oadrvtn20b.model.OtherReportDataPayloadResourceStatusDto;
import com.avob.server.oadrvtn20b.model.OtherReportRequestDto;
import com.avob.server.oadrvtn20b.model.OtherReportRequestDtoCreateRequestDto;
import com.avob.server.oadrvtn20b.model.OtherReportRequestDtoCreateSubscriptionDto;
import com.avob.server.oadrvtn20b.model.OtherReportRequestSpecifierDto;
import com.avob.server.oadrvtn20b.model.OtherReportRequestSpecifierSearchCriteria;
import com.avob.server.oadrvtn20b.model.ReportCapabilityDescriptionDto;
import com.avob.server.oadrvtn20b.model.ReportCapabilityDto;
import com.avob.server.oadrvtn20b.model.VenOptDto;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for Oadr20bVenControllerApi
 */
@Ignore
public class Oadr20bVenControllerApiTest {

    private final Oadr20bVenControllerApi api = new Oadr20bVenControllerApi();

    
    /**
     * cancelReport
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelReportUsingPOSTTest() throws ApiException {
        String reportRequestId = null;
        String venID = null;
        api.cancelReportUsingPOST(reportRequestId, venID);

        // TODO: test validations
    }
    
    /**
     * cancelSubscriptionReportRequest
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelSubscriptionReportRequestUsingPOSTTest() throws ApiException {
        String reportRequestId = null;
        String venID = null;
        api.cancelSubscriptionReportRequestUsingPOST(reportRequestId, venID);

        // TODO: test validations
    }
    
    /**
     * pageOtherReportCapability
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pageOtherReportCapabilityUsingGETTest() throws ApiException {
        String venID = null;
        Integer page = null;
        Integer size = null;
        List<OtherReportCapabilityDto> response = api.pageOtherReportCapabilityUsingGET(venID, page, size);

        // TODO: test validations
    }
    
    /**
     * pageReportRequest
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pageReportRequestUsingGETTest() throws ApiException {
        String venID = null;
        Integer page = null;
        Integer size = null;
        List<OtherReportRequestDto> response = api.pageReportRequestUsingGET(venID, page, size);

        // TODO: test validations
    }
    
    /**
     * registerPartyCancelPartyRegistration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerPartyCancelPartyRegistrationUsingPOSTTest() throws ApiException {
        String venID = null;
        api.registerPartyCancelPartyRegistrationUsingPOST(venID);

        // TODO: test validations
    }
    
    /**
     * registerPartyRequestReregistration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerPartyRequestReregistrationUsingPOSTTest() throws ApiException {
        String venID = null;
        api.registerPartyRequestReregistrationUsingPOST(venID);

        // TODO: test validations
    }
    
    /**
     * requestOtherReportCapabilityDescriptionRid
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestOtherReportCapabilityDescriptionRidUsingPOSTTest() throws ApiException {
        List<OtherReportRequestDtoCreateRequestDto> requests = null;
        String venID = null;
        api.requestOtherReportCapabilityDescriptionRidUsingPOST(requests, venID);

        // TODO: test validations
    }
    
    /**
     * requestRegisterReport
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestRegisterReportUsingPOSTTest() throws ApiException {
        String venID = null;
        api.requestRegisterReportUsingPOST(venID);

        // TODO: test validations
    }
    
    /**
     * sendRegisterReport
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendRegisterReportUsingPOSTTest() throws ApiException {
        String venID = null;
        api.sendRegisterReportUsingPOST(venID);

        // TODO: test validations
    }
    
    /**
     * subscribeOtherReportCapabilityDescriptionRid
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscribeOtherReportCapabilityDescriptionRidUsingPOSTTest() throws ApiException {
        List<OtherReportRequestDtoCreateSubscriptionDto> subscriptions = null;
        String venID = null;
        api.subscribeOtherReportCapabilityDescriptionRidUsingPOST(subscriptions, venID);

        // TODO: test validations
    }
    
    /**
     * venOpt
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void venOptUsingGETTest() throws ApiException {
        String venID = null;
        DateTime end = null;
        String marketContext = null;
        DateTime start = null;
        List<VenOptDto> response = api.venOptUsingGET(venID, end, marketContext, start);

        // TODO: test validations
    }
    
    /**
     * venResourceOpt
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void venResourceOptUsingGETTest() throws ApiException {
        String resourceName = null;
        String venID = null;
        DateTime end = null;
        String marketContext = null;
        DateTime start = null;
        List<VenOptDto> response = api.venResourceOptUsingGET(resourceName, venID, end, marketContext, start);

        // TODO: test validations
    }
    
    /**
     * viewOtherReportCapabilityDescription
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void viewOtherReportCapabilityDescriptionUsingGETTest() throws ApiException {
        String reportSpecifierId = null;
        String venID = null;
        List<ReportCapabilityDescriptionDto> response = api.viewOtherReportCapabilityDescriptionUsingGET(reportSpecifierId, venID);

        // TODO: test validations
    }
    
    /**
     * viewOtherReportCapability
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void viewOtherReportCapabilityUsingGETTest() throws ApiException {
        String venID = null;
        String reportSpecifierId = null;
        List<ReportCapabilityDto> response = api.viewOtherReportCapabilityUsingGET(venID, reportSpecifierId);

        // TODO: test validations
    }
    
    /**
     * viewReportRequestSpecifier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void viewReportRequestSpecifierUsingPOSTTest() throws ApiException {
        OtherReportRequestSpecifierSearchCriteria criteria = null;
        String venID = null;
        List<OtherReportRequestSpecifierDto> response = api.viewReportRequestSpecifierUsingPOST(criteria, venID);

        // TODO: test validations
    }
    
    /**
     * viewReportRequest
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void viewReportRequestUsingGETTest() throws ApiException {
        String venID = null;
        String reportRequestId = null;
        String reportSpecifierId = null;
        List<OtherReportRequestDto> response = api.viewReportRequestUsingGET(venID, reportRequestId, reportSpecifierId);

        // TODO: test validations
    }
    
    /**
     * viewsFloatReportData
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void viewsFloatReportDataUsingGETTest() throws ApiException {
        String reportSpecifierId = null;
        String rid = null;
        String venID = null;
        List<OtherReportDataFloatDto> response = api.viewsFloatReportDataUsingGET(reportSpecifierId, rid, venID);

        // TODO: test validations
    }
    
    /**
     * viewsFloatReportData
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void viewsFloatReportDataUsingGET1Test() throws ApiException {
        String reportSpecifierId = null;
        String venID = null;
        List<OtherReportDataFloatDto> response = api.viewsFloatReportDataUsingGET1(reportSpecifierId, venID);

        // TODO: test validations
    }
    
    /**
     * viewsKeyTokenReportData
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void viewsKeyTokenReportDataUsingGETTest() throws ApiException {
        String reportSpecifierId = null;
        String rid = null;
        String venID = null;
        List<OtherReportDataKeyTokenDto> response = api.viewsKeyTokenReportDataUsingGET(reportSpecifierId, rid, venID);

        // TODO: test validations
    }
    
    /**
     * viewsKeyTokenReportData
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void viewsKeyTokenReportDataUsingGET1Test() throws ApiException {
        String reportSpecifierId = null;
        String venID = null;
        List<OtherReportDataKeyTokenDto> response = api.viewsKeyTokenReportDataUsingGET1(reportSpecifierId, venID);

        // TODO: test validations
    }
    
    /**
     * viewsResourceStatusReportData
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void viewsResourceStatusReportDataUsingGETTest() throws ApiException {
        String reportSpecifierId = null;
        String rid = null;
        String venID = null;
        List<OtherReportDataPayloadResourceStatusDto> response = api.viewsResourceStatusReportDataUsingGET(reportSpecifierId, rid, venID);

        // TODO: test validations
    }
    
    /**
     * viewsResourceStatusReportData
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void viewsResourceStatusReportDataUsingGET1Test() throws ApiException {
        String reportSpecifierId = null;
        String venID = null;
        List<OtherReportDataPayloadResourceStatusDto> response = api.viewsResourceStatusReportDataUsingGET1(reportSpecifierId, venID);

        // TODO: test validations
    }
    
}
