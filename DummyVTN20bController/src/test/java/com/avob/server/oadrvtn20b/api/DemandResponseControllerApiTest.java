/*
 * Avob VTN Rest API
 * Description
 *
 * OpenAPI spec version: API TOS
 * Contact: bzanni@avob.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.avob.server.oadrvtn20b.api;

import com.avob.server.oadrvtn20b.handler.ApiException;
import com.avob.server.oadrvtn20b.model.DemandResponseEventCreateDto;
import com.avob.server.oadrvtn20b.model.DemandResponseEventFilter;
import com.avob.server.oadrvtn20b.model.DemandResponseEventReadDto;
import com.avob.server.oadrvtn20b.model.DemandResponseEventUpdateDto;
import com.avob.server.oadrvtn20b.model.VenDemandResponseEventDto;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DemandResponseControllerApi
 */
@Ignore
public class DemandResponseControllerApiTest {

    private final DemandResponseControllerApi api = new DemandResponseControllerApi();

    
    /**
     * active
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void activeUsingPOSTTest() throws ApiException {
        Long id = null;
        DemandResponseEventReadDto response = api.activeUsingPOST(id);

        // TODO: test validations
    }
    
    /**
     * cancel
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelUsingPOSTTest() throws ApiException {
        Long id = null;
        DemandResponseEventReadDto response = api.cancelUsingPOST(id);

        // TODO: test validations
    }
    
    /**
     * create
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUsingPOSTTest() throws ApiException {
        DemandResponseEventCreateDto event = null;
        DemandResponseEventReadDto response = api.createUsingPOST(event);

        // TODO: test validations
    }
    
    /**
     * delete
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUsingDELETETest() throws ApiException {
        Long id = null;
        api.deleteUsingDELETE(id);

        // TODO: test validations
    }
    
    /**
     * publish
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void publishUsingPOSTTest() throws ApiException {
        Long id = null;
        DemandResponseEventReadDto response = api.publishUsingPOST(id);

        // TODO: test validations
    }
    
    /**
     * read
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readUsingGETTest() throws ApiException {
        Long id = null;
        DemandResponseEventReadDto response = api.readUsingGET(id);

        // TODO: test validations
    }
    
    /**
     * readVenDemandResponseEvent
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readVenDemandResponseEventUsingGETTest() throws ApiException {
        Long id = null;
        String username = null;
        VenDemandResponseEventDto response = api.readVenDemandResponseEventUsingGET(id, username);

        // TODO: test validations
    }
    
    /**
     * readVenDemandResponseEvent
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readVenDemandResponseEventUsingGET1Test() throws ApiException {
        Long id = null;
        List<VenDemandResponseEventDto> response = api.readVenDemandResponseEventUsingGET1(id);

        // TODO: test validations
    }
    
    /**
     * search
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchUsingPOSTTest() throws ApiException {
        List<DemandResponseEventFilter> filters = null;
        Long end = null;
        Integer page = null;
        Integer size = null;
        Long start = null;
        List<DemandResponseEventReadDto> response = api.searchUsingPOST(filters, end, page, size, start);

        // TODO: test validations
    }
    
    /**
     * update
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUsingPUTTest() throws ApiException {
        DemandResponseEventUpdateDto event = null;
        Long id = null;
        DemandResponseEventReadDto response = api.updateUsingPUT(event, id);

        // TODO: test validations
    }
    
}
